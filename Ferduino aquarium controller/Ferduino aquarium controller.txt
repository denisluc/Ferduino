//Dúvidas, sugestões e elogios: fefegarcia_1@hotmail.com
//Link para download da IDE com todas as bibliotecas necessárias.
//https://skydrive.live.com/redir?resid=4F0958C6A216EC!401
//Este arquivo deve ser salvo com extensão .ino
//Na pasta onde estiver este arquivo deve conter o "template": "writeAnything.h"
//---------------------------------------------------------
//Meu Stilo v 2.3.8 Aquarium Controller>> Última atualização:12/09/2012 às 10:35 pelo horário de Brasília.
//Este programa foi desenvolvido com base na versão Stilo 2.1
//Disponível nesta página http://code.google.com/p/stilo/ 
//---------------------------------------------------------
//Nota das modificações:
//2.3.1: Concluido o código da tpa automática.
//2.3.2: Adicionado código para gravação de parâmetros em um txt e gráfico de temperatura.
// Além disso, o codigo foi ajustado para que os sensores de temperatura ocupem apenas um pino do arduino.
//2.3.3  Corrigido alguns erros.
//2.3.4 Corrigido problemas com cartão SD.
//2.3.5 Adicionado novas funções tais como: grafico de PH do aquario, gráfico de PH do reator de calcio
// Grafico de densidade, menu de controle de PH do reator de calcio  e ORP, menu de referencia para PH do aquario e densidade.
//Adicionada condicao para evitar que o aquecedor ou resfriador seja ligado em caso de problema na sonda de temperatura.
//Simplificação do desenho das malhas dos graficos.
//Alteração da gravação de dados de temperatura que sao usados para desenhar o grafico.  a temperatura e gravada a cada minuto e o grafico é gerado com a media de 6 em 6 valores.
//2.3.6 Adicionado integração com o cosm.com e alterado o slot do cartão SD para evitar conflitos com o ethernet shield.
//2.3.7 Adicionado código para trabalhar com os circuito de PH, ORP e Condutividade da Atlas-Scientific, concluido o código para os 
// graficos de PH e ORP e alterado o numero dos pino de alguns equipamentos.
//2.3.8 Corrigido alguns problemas com o controle de temperatura e adicionada funcoes de controle e alerta para o CO2 do reator de calcio e ozonizador.
//---------------------------------------------------------
//Algoritmo de controle de LED é baseado em Krusduino de Hugh Dangerfield
//http://Code.Google.com/p/dangerduino/
//Algoritmo da fase lunar foi escrito por TheDOdblG, baseado no código de NightAtTheOpera's Lunar Phase 
//http://www.nano-reef.com/forums/index.php?showtopic=217305
//-----------------------------------------------------------
// Este programa é software livre; Você pode redistribuí-lo e/ou
// modificá-lo sob os termos da GNU General Public License
// como publicada pela Free Software Foundation versão 3
// da licença, ou (por sua opção) qualquer versão posterior.
// Este programa é distribuído na esperança que seja útil,
// Mas sem qualquer garantia; sem mesmo a garantia implícita de
// comercialização ou propósito particular. Consulte o
// GNU General Public License para mais detalhes.

//*************************************************************************************************
//*************** Biliotecas utilizadas ***********************************************************
//*************************************************************************************************
#include <ITDB02_Graph16.h>
#include <ITDB02_Touch.h>
#include <Wire.h>
#include <EEPROM.h>
#include "writeAnything.h" // Template
#include <DS1307henning.h> //Atenção: Para usar a biblioteca original renomeie para <DS1307.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <SdFat.h>
#include <SdFatUtil.h>
#include <EtherCard.h>

//****************************************************************************************************
//***************** Sensore de temperatura ***********************************************************
//****************************************************************************************************
OneWire OneWireBus(47);                   //Sensor de temperatura da agua e dissipador ligado ao pino 47.
DallasTemperature sensors(&OneWireBus);  // Pass our oneWire reference to Dallas Temperature.                         
DeviceAddress sensor_agua= { 
  0x28, 0x9C, 0xA9, 0xAA, 0x03, 0x00, 0x00, 0x44 }; // Assign the addresses of temperature sensors.  Add/Change addresses as needed.
DeviceAddress sensor_dissipador = { 
  0x28, 0xE1, 0x96, 0xAA, 0x03, 0x00, 0x00, 0x7D }; // Assign the addresses of temperature sensors.  Add/Change addresses as needed.

//****************************************************************************************************
//****************** Variaveis de textos e fontes ****************************************************
//****************************************************************************************************
#define LARGE true
#define SMALL false
extern uint8_t SmallFont[];   // Declare which fonts we will be using
extern uint8_t BigFont[];     // Declare which fonts we will be using

//****************************************************************************************************
//****************** Define funcoes dos pinos digitais e analogicos **********************************
//****************************************************************************************************

// Pinos disponiveis [PWM (7,44,45,46)TX/RX(16,17,18,19) ANALOGICO(A6, A7, A8)]

const int ledPinBlue = 8;     //Pino que liga os leds azuis
const int ledPinWhite = 9;    //Pino que liga os leds brancos
const int aquecedorPin = 42;   // Pino que liga o aquecedor
const int chillerPin = 43;   // Pino que liga o chiller
const int alarmPin = A13;  // Pino que aciona o alarme de temperatura da agua baixa ou alta
const int fanPin = 13;     // Pino que controla a velocidade das ventoinhas do dissipador
const int sensor1 = A0;       //Pino analogico que verifica se ha tensao na boia da quarentena.
const int sensor2 = A1;       //Pino analogico que verifica se ha tensao na boia inferior do sump.
const int sensor3 = A2;       //Pino analogico que verifica se ha tensao na boia superior do sump.
const int sensor4 = A3;       //Pino analogico que verifica se ha tensao na boia inferior do reservatório.
const int sensor5 = A4;       //Pino analogico que verifica o nivel do reef.
const int sensor6 = A5;       //Pino analogico que verifica o nivel do fish only.
const int bomba1Pin = A9;    // Bomba que tira agua da quarentena.
const int bomba2Pin = A10;    // Bomba que tira agua do sump.
const int bomba3Pin = A11;    // Bomba que coloca água no sump.
const int solenoide1Pin = 48; // Liga a reposicao de agua doce.
const int reatorPin = 49;     // Pino que liga o CO2 do reator.
const int ozonizadorPin = A12; // pino que liga o zonizador
const int multiplexadorS0Pin = A14; // Pino S0 de controle dos stamps
const int multiplexadorS1Pin = A15; // Pino S1 de controle dos stamps
const int dosadora1 = 10;     // Bomba dosadora 1
const int dosadora2 = 11;     // Bomba dosadora 2
const int dosadora3 = 12;     // Bomba dosadora 3

//*******************************************************************************************************
//********************** Funcoes RTC ********************************************************************
//*******************************************************************************************************
DS1307 rtc(20, 21); // Indicao os pinos que o RTC esta conectado
Time t_temp;
boolean ct=false;
boolean cd=false;

//*******************************************************************************************************
//********************** Variaveis das fucoes do touch screen e tela inicial ****************************
//*******************************************************************************************************
ITDB02        myGLCD(38,39,40,41,1);     // Altere o aspecto se não estiver usando o ITDB02-3.2WC >>>>>>>>>>> (38,39,40,41,x) onde x é o modelo do LCD
ITDB02_Touch  myTouch(6,5,4,3,2);
int x, y;                  // touch coordinates
long previousMillis = 0;
byte data[56];
String date; 
int whiteLed, blueLed;    // previous Led output values
int dispScreen = 0;

// tela inicio =0, 
//tela de menu = 1, 
//tela do relogio = 2,
// tela de teste = 3,tela controle de temperatua = 4, 
//tela alterar valores dos led = 5
// tela para alterar potencia dos leds = 6,
// tela tpa = 7, 
// tela config. bombas dosadoras = 8,
// tela graficos = 9,
// tela wavemaker = 10, 
// tela grafico temperatura = 11,
// tela grafico orp = 12, 
// tela grafico ph do aquario = 13,
// tela configuracao parametros = 14, 
// tela configuracao de ph do reator de calcio = 15, 
// tela configuracao orp = 16, 
// tela grafico de ph do reator de calcio = 17, 
// tela configuracao de ph do aquario = 18, 
// tela grafico de densidade = 19,
// tela configurar densidade = 20, 
// tela esolha uma dosadora = 21, 
// tela dosadora 1 = 22, 
//tela dosadora 2 = 23, tela dosadora 3 = 24, tela dosadora 4 = 25, tela calibra dosadoras = 26

Time  t;

//*****************************************************************************************
//*********************** Variaveis do controle de temperatura da agua ********************
//*****************************************************************************************
float tempC = 0;              // Temperatura da agua
float setTempC = 0;          // Temperatura desejada
float offTempC = 0;          // Variacao permitida da temperatura
float alarmTempC = 0;        // Variacao para acionar o alarme de temperatura da agua
boolean tempCflag = 0;         // Sinaliza que o aquecedor está ligado / desligado
boolean tempHflag = 0;         // Sinaliza que o chiller está ligado / desligado
boolean tempAflag = 0;         // Sinaliza que o alarme de temperatura está ativo

//*****************************************************************************************
//************************ Variaveis do controle do PH do aquario *************************
//*****************************************************************************************
float PHA = 0;               // PH do aquario
float setPHA = 0;           // PH desejado do aquario
float offPHA = 0;           // Variacao permitida do PH do aquario
float alarmPHA = 0;         // Variacao para acionar o alarme de ph do aquario
boolean PHAAflag = 0;          // Sinaliza que o PH do aquario esta fora do especificado

//*****************************************************************************************
//************************ Variaveis de controle de densidade *****************************
//*****************************************************************************************
int DEN = 1025;                  // Densidade
int setDEN = 0;             // Densidade desejada
int offDEN = 0;             // Variacao permitida da densidade
int alarmDEN = 0;           // Variacao para acionar o alarme de densidade
boolean DENAflag = 0;        // Sinaliza que a densidade esta fora do especificado

//*****************************************************************************************
//************************ Variaveis de controle do PH do reator de calcio ****************
//*****************************************************************************************
float PHR =0;               // Valores PH reator
float setPHR = 0;           // PH do reator desejado
float offPHR = 0;           // Variacao permitida do PH do reator
float alarmPHR = 0;         // Variacao para acionar o alarme do PH do reator de calcio
boolean PHRflag = 0;          // Sinaliza que CO2 esta ligado / desligado
boolean PHRAflag = 0;        // Sinaliza que o PH do reator de calcio esta fora do especificado

//*****************************************************************************************
//************************ Variaveis de controle da  ORP **********************************
//*****************************************************************************************
int ORP =0;                 // Valores ORP
float setORP = 0;           // ORP desejada
float offORP = 0;           // Variacao permitida da ORP
float alarmORP = 0;         // Variacao para acionar o alarme da ORP
boolean ORPflag=0;          // Sinaliza que o ozonizador esta ligado / desligado
float ORPAflag = 0;        // Sinaliza que a ORP esta fora do especificado

//*****************************************************************************************
//************************ Variaveis de controle de velocidade dos coolers ****************
//*****************************************************************************************
const int HtempMin = 30;    //Declara a temperatura para iniciar o funcionamento das ventoinha do dissipador 
const int HtempMax = 40;    //Declara que as ventoinhas devem estar em sua velocidade maxima quando o dissipador estiver com 40°c

//*****************************************************************************************
//************************ Variavel de controle da temperatura do dissipador **************
//*****************************************************************************************
float tempH = 0;            //Temperatura do dissipador

//*****************************************************************************************
//************************ Variaveis temporarias de controle de temperatura da agua *******
//*****************************************************************************************
float temp2beS;           
float temp2beO;
float temp2beA;

//*****************************************************************************************
//************************ Variaveis temporarias de controle do PH do reator de calcio ****
//*****************************************************************************************
float PHR2beS;             
float PHR2beO;
float PHR2beA;

//*****************************************************************************************
//************************ Variaveis temporarias de controle do PH do aquario *************
//*****************************************************************************************
float PHA2beS;             
float PHA2beO;
float PHA2beA;

//*****************************************************************************************
//************************ Variaveis temporarias de controle da ORP ***********************
//*****************************************************************************************
float ORP2beS;               //orp temporaria
float ORP2beO;
float ORP2beA;

//*****************************************************************************************
//************************ Variaveis temporarias de controle da densidade *****************
//*****************************************************************************************
float DEN2beS;            
float DEN2beO;
float DEN2beA;

//*****************************************************************************************
//************************ Variaveis de controle da iluminacao ****************************
//*****************************************************************************************
int LedChangTime = 0;             //LED change page, time and values
boolean WorB;                     //display LED change page for whites (true) or blues (false)
boolean BUCKPUCK  = false;  //For Mean Well displays change "true" to "false"
boolean LEDtestTick = false;   //for testing leds and speed up clock
int min_cnt ;
int bled_out ;
int wled_out ;
#define WHITE true
#define BLUE false

//*****************************************************************************************
//************************ Variave da fase lunar ******************************************
//*****************************************************************************************
float LC = 29.53059;  //1 Lunar Cycle = 29.53059 days
String LP;
double AG;

//*****************************************************************************************
//************************ Variaveis da TPA automatica ************************************
//*****************************************************************************************
int hora = 0;
int minuto = 0;
int duracaomaximatpa = 0;
int segunda = 0;
int terca = 0;
int quarta = 0;
int quinta = 0;
int sexta = 0;
int sabado = 0;
int domingo = 0;
int tpa = 0;                             // Controla od estagio da TPA automatica
boolean tpa_em_andamento = 0;           // Sinaliza TPA automatica em andamento
unsigned long tempo = 0;                 // Duracao de cada estagio da TPA automatica
unsigned long marcadoriniciotpa = 0;   // Evita que uma tpa inicie proximo do millis zerar
unsigned long shiftedmillis = 0;       // Evita que uma tpa inicie proximo do millis zerar

//*****************************************************************************************
//************************ Variaveis temporarias da TPA automatica ************************************
//*****************************************************************************************
int temp2hora;
int temp2minuto;
int temp2duracaomaximatpa;
int temp2segunda;
int temp2terca;
int temp2quarta;
int temp2quinta;
int temp2sexta;
int temp2sabado;
int temp2domingo;

//****************************************************************************************
//*********************** Variaveis de controle das funcoes que utilizam o cartao SD *****
//****************************************************************************************
unsigned long logtempminutoantes = 0;  // Variavel que controla o tempo para gravacao dos parametro no cartao SD 
const int chipselect = 4;            // Para utilizar o Sd card do LCD altere para 53
Sd2Card card;
SdFile file;
SdFile root;
SdVolume volume;
char time1;
char time2;
char time3;
char time4;
char time5;

//*****************************************************************************************
//*********************** Variavel do controle de niveis **********************************
//*****************************************************************************************
boolean nivel_status = 0;             // Sinaliza nivel baixo em um dos aquarios

//*****************************************************************************************
//************************ Variavel de controle da reposicao de agua doce *****************
//*****************************************************************************************
boolean ato = 0;                      // Sinaliza reposicao ligada / desligada

//*****************************************************************************************
//************************ Variaveis de envio da informacoes ao cosm.com ******************
//*****************************************************************************************
long previous_Millis = 0; // Variavel que controla o tempo para envio dos dados
int chiller_status;   
int aquecedor_status;
int reator_status;
int ozonio_status;
int reposicao_status;
int niveis_status;
int tpa_status;

//*****************************************************************************************
//************************* Funcoes ethernet shield ***************************************
//*****************************************************************************************
#define FEED    "xxxxx"               // Numero do projeto(cosm.com).
#define APIKEY  "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" //Senha do projeto(cosm.com)
#define KEY   "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" // supertweet.net: senha criptografada em base 64 (http://tuxgraphics.org/~guido/javascript/base64-javascript.html).

static byte mymac[] = {
  0x54, 0x55, 0x58, 0x10, 0x00, 0x26}; // Este mac deve ser único na rede.
static byte myip[] = {
  192,168,2,105};
static byte gwip[] = {
  192,168,2,1 };
char website[] PROGMEM = "api.cosm.com";
char website1[] PROGMEM = "api.supertweet.net";
byte Ethernet::buffer[1000];
Stash stash;

//*****************************************************************************************
//************************** Variaveis de controle do multiplexador ***********************
//*****************************************************************************************
char sensorstring[15];
byte holding;
short i;
int ph1 = 0;
int ph2 = 1;
int orp = 2;
int ec = 3;
int done = 0;
float PHT;
int ORPT;
int DENT;
int ja = 0;
int ka = 0;
float somaden = 0.0f;
float valorden = 0.0f;
unsigned long millis_antes = 0;

//*****************************************************************************************
//************************** Variaveis da solicitacao de senha ****************************
//*****************************************************************************************
char stCurrent[7]="";
char limpar_senha [7] = "";
int stCurrentLen=0;
char senha [7] = {
  '1','2','3','4','5','6','\0'}; // Insira sua senha aqui. O caracter '\0' nao deve ser alterado.

//*****************************************************************************************
//************************** Variaveis dosadoras ******************************************
//*****************************************************************************************
unsigned long millis_antes_1 = 0;
unsigned long millis_antes_2 = 0;
unsigned long millis_antes_3 = 0;
int contador = 0;
int hora01 = 0;
int hora11 = 0;
int minuto01 = 0;
int minuto11 = 0;
int hora02 = 0;
int hora12 = 0;
int minuto02 = 0;
int minuto12 = 0;
int hora03 = 0;
int hora13 = 0;
int minuto03 = 0;
int minuto13 = 0;
int deslocamento_botao_x = 155;
int deslocamento_botao_y = 90;
long tempo_dosagem_1 = 0;
long tempo_dosagem_2 = 0;
long tempo_dosagem_3 = 0;
int pwm_dosadora_1 = 255;
int pwm_dosadora_2 = 255;
int pwm_dosadora_3 = 255;
float dose_dosadora_1_manual = 0.0;
float dose_dosadora_2_manual = 0.0;
float dose_dosadora_3_manual = 0.0;
boolean modo_manual = false;
boolean modo_personalizado = false;
boolean modo_automatico = false;
boolean modo_calibrar = false;
boolean dosadora_1_selecionada = false;
boolean dosadora_2_selecionada = false;
boolean dosadora_3_selecionada = false;
int modo_personalizado_on_1 = 0;
int modo_automatico_on_1 = 0;
int modo_personalizado_on_2 = 0;
int modo_automatico_on_2 = 0;
int modo_personalizado_on_3 = 0;
int modo_automatico_on_3 = 0;
float fator_calib_dosadora_1 = 0.0;
float fator_calib_dosadora_2 = 0.0;
float fator_calib_dosadora_3 = 0.0;
float dose_dosadora_1_personalizada = 0.0;
float dose_dosadora_2_personalizada = 0.0;
float dose_dosadora_3_personalizada = 0.0;
float dose_dosadora_1_automatica = 0.0;
float dose_dosadora_2_automatica = 0.0;
float dose_dosadora_3_automatica = 0.0;
int hora_inicial_dosagem_personalizada_1 = 0;
int minuto_inicial_dosagem_personalizada_1 = 0;
int hora_final_dosagem_personalizada_1 = 0;
int minuto_final_dosagem_personalizada_1 = 0;
int segunda_dosagem_personalizada_1 = 0;
int terca_dosagem_personalizada_1 = 0;
int quarta_dosagem_personalizada_1 = 0;
int quinta_dosagem_personalizada_1 = 0;
int sexta_dosagem_personalizada_1 = 0;
int sabado_dosagem_personalizada_1 = 0;
int domingo_dosagem_personalizada_1 = 0;
int hora_inicial_dosagem_personalizada_2 = 0;
int minuto_inicial_dosagem_personalizada_2 = 0;
int hora_final_dosagem_personalizada_2 = 0;
int minuto_final_dosagem_personalizada_2 = 0;
int segunda_dosagem_personalizada_2 = 0;
int terca_dosagem_personalizada_2 = 0;
int quarta_dosagem_personalizada_2 = 0;
int quinta_dosagem_personalizada_2 = 0;
int sexta_dosagem_personalizada_2 = 0;
int sabado_dosagem_personalizada_2 = 0;
int domingo_dosagem_personalizada_2 = 0;
int hora_inicial_dosagem_personalizada_3 = 0;
int minuto_inicial_dosagem_personalizada_3 = 0;
int hora_final_dosagem_personalizada_3 = 0;
int minuto_final_dosagem_personalizada_3 = 0;
int segunda_dosagem_personalizada_3 = 0;
int terca_dosagem_personalizada_3 = 0;
int quarta_dosagem_personalizada_3 = 0;
int quinta_dosagem_personalizada_3 = 0;
int sexta_dosagem_personalizada_3 = 0;
int sabado_dosagem_personalizada_3 = 0;
int domingo_dosagem_personalizada_3 = 0;
int quantidade_dose_dosadora_1_personalizada = 0;
int quantidade_dose_dosadora_2_personalizada = 0;
int quantidade_dose_dosadora_3_personalizada = 0;
int quantidade_dose_dosadora_1_automatica = 0;
int quantidade_dose_dosadora_2_automatica = 0;
int quantidade_dose_dosadora_3_automatica = 0;

int hora_inicial_dosagem_automatica_1 = 0;
int minuto_inicial_dosagem_automatica_1 = 0;
int hora_final_dosagem_automatica_1 = 0;
int minuto_final_dosagem_automatica_1 = 0;
int hora_inicial_dosagem_automatica_2 = 0;
int minuto_inicial_dosagem_automatica_2 = 0;
int hora_final_dosagem_automatica_2 = 0;
int minuto_final_dosagem_automatica_2 = 0;
int hora_inicial_dosagem_automatica_3 = 0;
int minuto_inicial_dosagem_automatica_3 = 0;
int hora_final_dosagem_automatica_3 = 0;
int minuto_final_dosagem_automatica_3 = 0;

//*****************************************************************************************
//************************** Variaveis temporarias das dosadoras **************************
//*****************************************************************************************
float fator_calib_dosadora_1_temp2;
float fator_calib_dosadora_2_temp2;
float fator_calib_dosadora_3_temp2;
float dose_dosadora_1_personalizada_temp2;
float dose_dosadora_2_personalizada_temp2;
float dose_dosadora_3_personalizada_temp2;
float dose_dosadora_1_automatica_temp2;
float dose_dosadora_2_automatica_temp2;
float dose_dosadora_3_automatica_temp2;
float dose_dosadora_1_manual_temp2;
float dose_dosadora_2_manual_temp2;
float dose_dosadora_3_manual_temp2;
int temp2hora_inicial_dosagem_personalizada_1;
int temp2minuto_inicial_dosagem_personalizada_1;
int temp2hora_final_dosagem_personalizada_1;
int temp2minuto_final_dosagem_personalizada_1;
int temp2segunda_dosagem_personalizada_1;
int temp2terca_dosagem_personalizada_1;
int temp2quarta_dosagem_personalizada_1;
int temp2quinta_dosagem_personalizada_1;
int temp2sexta_dosagem_personalizada_1;
int temp2sabado_dosagem_personalizada_1;
int temp2domingo_dosagem_personalizada_1;
int temp2hora_inicial_dosagem_personalizada_2;
int temp2minuto_inicial_dosagem_personalizada_2;
int temp2hora_final_dosagem_personalizada_2;
int temp2minuto_final_dosagem_personalizada_2;
int temp2segunda_dosagem_personalizada_2;
int temp2terca_dosagem_personalizada_2;
int temp2quarta_dosagem_personalizada_2;
int temp2quinta_dosagem_personalizada_2;
int temp2sexta_dosagem_personalizada_2;
int temp2sabado_dosagem_personalizada_2;
int temp2domingo_dosagem_personalizada_2;
int temp2hora_inicial_dosagem_personalizada_3;
int temp2minuto_inicial_dosagem_personalizada_3;
int temp2hora_final_dosagem_personalizada_3;
int temp2minuto_final_dosagem_personalizada_3;
int temp2segunda_dosagem_personalizada_3;
int temp2terca_dosagem_personalizada_3;
int temp2quarta_dosagem_personalizada_3;
int temp2quinta_dosagem_personalizada_3;
int temp2sexta_dosagem_personalizada_3;
int temp2sabado_dosagem_personalizada_3;
int temp2domingo_dosagem_personalizada_3;
int quantidade_dose_dosadora_1_personalizada_temp2;
int quantidade_dose_dosadora_2_personalizada_temp2;
int quantidade_dose_dosadora_3_personalizada_temp2;
int quantidade_dose_dosadora_1_automatica_temp2;
int quantidade_dose_dosadora_2_automatica_temp2;
int quantidade_dose_dosadora_3_automatica_temp2;
int modo_personalizado_on_1_temp2;
int modo_automatico_on_1_temp2;
int modo_personalizado_on_2_temp2;
int modo_automatico_on_2_temp2;
int modo_personalizado_on_3_temp2;
int modo_automatico_on_3_temp2;

int hora_inicial_dosagem_automatica_1_temp2;
int minuto_inicial_dosagem_automatica_1_temp2;
int hora_final_dosagem_automatica_1_temp2;
int minuto_final_dosagem_automatica_1_temp2;
int hora_inicial_dosagem_automatica_2_temp2;
int minuto_inicial_dosagem_automatica_2_temp2;
int hora_final_dosagem_automatica_2_temp2;
int minuto_final_dosagem_automatica_2_temp2;
int hora_inicial_dosagem_automatica_3_temp2;
int minuto_inicial_dosagem_automatica_3_temp2;
int hora_final_dosagem_automatica_3_temp2;
int minuto_final_dosagem_automatica_3_temp2;

//*****************************************************************************************
//************************** Variaveis de controle da potencia dos leds *******************
//*****************************************************************************************
byte bled[96] = {                       // Potencia de saida dos leds azuis 255 = 100% da potencia
  12, 12, 12, 12, 12, 12, 12, 12,       // 0 e 2
  12, 12, 12, 12, 12, 12, 12, 12,       // 2 e 4
  12, 12, 12, 12, 12, 21, 30, 39,       // 4 e 6
  48, 57, 66, 75, 84, 93, 102, 111,     // 6 e 8 
  120, 129, 138, 147, 156, 165, 174, 183, // 8 e 10
  192, 201, 210, 219, 228, 237, 246, 255, // 10 e 12
  255, 246, 237, 228, 219, 210, 201, 192, // 12 e 14
  183, 174, 165, 156, 147, 138, 129, 120,  // 14 e 16
  111, 102, 93, 84, 75, 66, 57, 48,       // 16 e 18
  39, 30, 21, 12, 12, 12, 12, 12,         // 18 a 20
  12, 12, 12, 12, 12, 12, 12, 12,         // 20 e 22
  12, 12, 12, 12, 12, 12, 12, 12          // 22 a 24
};  

byte wled[96] = {                         //Potencia de saida dos leds brancos 255 = 100% da potencia
  12, 12, 12, 12, 12, 12, 12, 12,         // 0 e 2
  12, 12, 12, 12, 12, 12, 12, 12,          // 2 e 4
  12, 12, 12, 12, 12, 21, 30, 39,          // 4 e 6
  48, 57, 66, 75, 84, 93, 102, 111,        // 6 e 8 
  120, 129, 138, 147, 156, 165, 174, 183,  // 8 e 10
  192, 201, 210, 219, 228, 237, 246, 255,  // 10 e 12
  255, 246, 237, 228, 219, 210, 201, 192,  // 12 e 14
  183, 174, 165, 156, 147, 138, 129, 120,  // 14 e 16
  111, 102, 93, 84, 75, 66, 57, 48,        // 16 e 18
  39, 30, 21, 12, 12, 12, 12, 12,          //18 a 20
  12, 12, 12, 12, 12, 12, 12, 12,         // 20 e 22
  12, 12, 12, 12, 12, 12, 12, 12           // 22 a 24
};
byte tled[96]; 

//**********************************************************************************************
//*********************** Botoes dos menus *****************************************************
//**********************************************************************************************
const int temM[]= {
  90,35,115,60};           //temp. minus
const int temP[]= {
  205,35,230,60};          //temp. plus
const int offM[]= {
  90,85,115,110};          //offset minus
const int offP[]= {
  205,85,230,110};         //offset plus
const int almM[]= {
  90,135,115,160};         //alarm minus
const int almP[]= {
  205,135,230,160};        //alarm plus
const int iniC[]= {
  325,2,393,42};           // inicio
const int menU[]= {
  325, 52, 393, 92};       // Botao menu
const int prOK[]= {
  325,200,393,238};        //ok
const int salV[]= {
  325,150,393,190};        //salvar dosagem
// const int xxx[]= {325,151,393,190};
//const int xxxx[]= {325,200,393,239};
const int savE[]= {
  180,188,300,220};        //Save Eeprom
//------------------menu----------------------------
const int tanD[]= {
  10, 20, 150, 60};        //hora e data
const int tesT[]= {
  10, 70, 150, 110};       //testar LED
const int temC[]= {
  10, 120, 150, 160};      // controle de temperatura
const int graF[]= {
  10, 170, 150, 210};      // Graficos
const int ledW[]= {
  170, 20, 310, 60};        //alterar valores led
const int tpaA[]= {
  170, 70, 310, 110};         //TPA automÃ¡tica
const int dosA[]= {
  170, 120, 310, 160};        //Bomba dosadora
const int wavM[]= {
  170, 170, 310, 210};        // Wavemaker
const int volT[]= {
  325,200,393,238};         //voltar
//-----------botoes graficos e parametros--------------------
const int tempG[]= {
  10, 20, 150, 60};        //parametro/grafico de temperatura
const int phA[]= {
  10, 70, 150, 110};       //parametro/grafico de ph do aqua
const int phR[]= {
  10, 120, 150, 160};      //parametro/grafico de ph do aqua
const int orP[]= {
  10, 170, 150, 210};      // parametro/grafico de orp
const int denS[]= {
  170, 20, 310, 60};        //parametro/grafico de densidade
//const int []= {170, 70, 310, 110};         
//const int []= {170, 120, 310, 160};        

const int manU[]= {
  10, 20, 150, 60};        // Dosagem manual
const int autO[]= {
  10, 70, 150, 110};       //Dosagem automatica
const int perS[]= {
  10, 120, 150, 160};      //Dosagem personalizada
const int reV[]= {
  10, 170, 150, 210};     // rever cofig. dosagem personalizada
//const int []= {170, 20, 310, 60};       
//const int []= {170, 70, 310, 110};         
//const int []= {170, 120, 310, 160};          

const int dosa1[]= {
  10, 20, 150, 60};       //Bomba dosadora 1
const int dosa2[]= {
  10, 70, 150, 110};         //Bomba dosadora 2
const int dosa3[]= {
  10, 120, 150, 160};      // Bomba dosadora 3
//----------------------------------------------------
const int leWB[]= {
  5, 188, 90, 220};        //LED values show whites or blues
const int leST[]= {
  100, 188, 170, 220};       //LED values change
const int leSh[]= {
  325,200,393,238};       //white LED show table
const int houU[]= {
  70, 18, 95, 43};          //hour up
const int minU[]= {
  160, 18, 185, 43};        //min up
const int minUT[]= {
  120, 18, 145, 43};        //minutotpa mais
const int minDT[]= {
  120, 69, 145, 92};       //minutotpa menos
const int houD[]= {
  70, 69, 95, 92};         //hour down
const int minD[]= {
  160, 69, 185, 92};       //min down
const int dayU[]= {
  70, 102, 95, 127};       //day up
const int monU[]= {
  160, 102, 185, 127};     //month up
const int yeaU[]= {
  250, 102, 275, 127};     //year up
const int dayD[]= {
  70, 152, 95, 177};       //day down
const int monD[]= {
  160, 152, 185, 177};     //month down
const int yeaD[]= {
  250, 152, 275, 177};     //year down
const int stsT[]= {
  90, 105, 220, 175};     //start/stop
const int tenM[]= {
  10, 120, 80, 160};       //-10s
const int tenP[]= {
  230, 120, 300, 160};     //+10s
const int segC[]= {
  250, 18, 275, 43};        //segundo para cima
const int segB[]= {
  250, 69, 275, 92};        // segundo para baixo
const int durC[]= {
  275, 18, 300, 43};        //duracao tpa para cima
const int durB[]= {
  275, 69, 300, 92};        // duracao tpa para baixo
const int segU[]= {
  30, 99, 110, 139};       //segunda
const int terC[]= {
  120, 99, 200, 139};       //terca
const int quaR[]= {
  210, 99, 290, 139};       //quarta
const int quiN[]= {
  30, 146, 110, 186};        // quinta
const int sexT[]= {
  120, 146, 200, 186};      //sexta
const int sabA[]= {
  210, 146, 290, 186};      //sabado
const int domI[]= {
  120, 193, 200, 233};      //domingo
const int caliB[]= {
  170, 170, 310, 210};     // calibrar
const int iniciaR[]= {
  120, 193, 200, 233};   //Iniciar calibracao
const int anT[]= {
  30, 193, 110, 233};        // anterior
const int proX[]= {
  210, 193, 290, 233};      //proximo
//----------------botoes solicitacao de senha-------------------------------------------------
const int boT1[]= {
  10, 20, 62, 60};        //Botao um
const int boT2[]= {
  72, 20, 124, 60};        //Botao dois
const int boT3[]= {
  134, 20, 186, 60};        //Botao tres
const int boT4[]= {
  196, 20, 248, 60};        //Botao quatro
const int boT5[]= {
  258, 20, 310, 60};        //Botao cinco
const int boT6[]= {
  10, 70, 62,110};        //Botao seis
const int boT7[]= {
  72, 70, 124, 110};        //Botao sete
const int boT8[]= {
  134, 70, 186, 110};       //Botao oito
const int boT9[]= {
  196, 70, 248, 110};        //Botao nove
const int boT0[]= {
  258, 70, 310, 110};        //Botao zero
const int boTL[]= {
  10, 120, 155, 160};        //Botao limpar
const int boTE[]= {
  165, 120, 310, 160};        //Botao entrar

//**********************************************************************************************
//************************ Funcoes EEPROM ******************************************************
//**********************************************************************************************
struct config_t                              // Temperatura
{
  int tempset;
  int tempoff;
  int tempalarm;
} 
tempSettings;

struct config_PHR                          // PH do reator
{
  int PHRset;
  int PHRoff;
  int PHRalarm;
} 
PHRSettings;

struct config_PHA                         // PH do aquario
{
  int PHAset;
  int PHAoff;
  int PHAalarm;
} 
PHASettings;

struct config_ORP                        // ORP
{
  int ORPset;
  int ORPoff;
  int ORPalarm;
} 
ORPSettings;

struct config_DEN                        // Densidade
{
  int DENset;
  int DENoff;
  int DENalarm;
} 
DENSettings;

struct config_tpa                       // TPA automatica
{
  int temphora;
  int tempminuto;
  int tempduracaomaximatpa;
  int tempsegunda;
  int tempterca;
  int tempquarta;
  int tempquinta;
  int tempsexta;
  int tempsabado;
  int tempdomingo;
} 
tpaconfig;

struct config_dos
{
  int fator_calib_dosadora_1_temp;
  int fator_calib_dosadora_2_temp;
  int fator_calib_dosadora_3_temp;
  int dose_dosadora_1_personalizada_temp;
  int dose_dosadora_2_personalizada_temp;
  int dose_dosadora_3_personalizada_temp;
  int dose_dosadora_1_automatica_temp;
  int dose_dosadora_2_automatica_temp;
  int dose_dosadora_3_automatica_temp;
  int hora_inicial_dosagem_personalizada_1_temp; 
  int minuto_inicial_dosagem_personalizada_1_temp;
  int hora_final_dosagem_personalizada_1_temp; 
  int minuto_final_dosagem_personalizada_1_temp; 
  int segunda_dosagem_personalizada_1_temp; 
  int terca_dosagem_personalizada_1_temp; 
  int quarta_dosagem_personalizada_1_temp; 
  int quinta_dosagem_personalizada_1_temp; 
  int sexta_dosagem_personalizada_1_temp; 
  int sabado_dosagem_personalizada_1_temp; 
  int domingo_dosagem_personalizada_1_temp;
  int hora_inicial_dosagem_personalizada_2_temp; 
  int minuto_inicial_dosagem_personalizada_2_temp;
  int hora_final_dosagem_personalizada_2_temp; 
  int minuto_final_dosagem_personalizada_2_temp; 
  int segunda_dosagem_personalizada_2_temp; 
  int terca_dosagem_personalizada_2_temp; 
  int quarta_dosagem_personalizada_2_temp; 
  int quinta_dosagem_personalizada_2_temp; 
  int sexta_dosagem_personalizada_2_temp; 
  int sabado_dosagem_personalizada_2_temp; 
  int domingo_dosagem_personalizada_2_temp;
  int hora_inicial_dosagem_personalizada_3_temp; 
  int minuto_inicial_dosagem_personalizada_3_temp;
  int hora_final_dosagem_personalizada_3_temp; 
  int minuto_final_dosagem_personalizada_3_temp; 
  int segunda_dosagem_personalizada_3_temp; 
  int terca_dosagem_personalizada_3_temp; 
  int quarta_dosagem_personalizada_3_temp; 
  int quinta_dosagem_personalizada_3_temp; 
  int sexta_dosagem_personalizada_3_temp; 
  int sabado_dosagem_personalizada_3_temp; 
  int domingo_dosagem_personalizada_3_temp;
  int quantidade_dose_dosadora_1_personalizada_temp;
  int quantidade_dose_dosadora_2_personalizada_temp;
  int quantidade_dose_dosadora_3_personalizada_temp;
  int quantidade_dose_dosadora_1_automatica_temp;
  int quantidade_dose_dosadora_2_automatica_temp;
  int quantidade_dose_dosadora_3_automatica_temp;
  int modo_personalizado_on_1_temp;
  int modo_automatico_on_1_temp;
  int modo_personalizado_on_2_temp;
  int modo_automatico_on_2_temp;
  int modo_personalizado_on_3_temp;
  int modo_automatico_on_3_temp;
  int hora_inicial_dosagem_automatica_1_temp; 
  int minuto_inicial_dosagem_automatica_1_temp;
  int hora_final_dosagem_automatica_1_temp; 
  int minuto_final_dosagem_automatica_1_temp;
  int hora_inicial_dosagem_automatica_2_temp; 
  int minuto_inicial_dosagem_automatica_2_temp;
  int hora_final_dosagem_automatica_2_temp; 
  int minuto_final_dosagem_automatica_2_temp;  
  int hora_inicial_dosagem_automatica_3_temp; 
  int minuto_inicial_dosagem_automatica_3_temp;
  int hora_final_dosagem_automatica_3_temp; 
  int minuto_final_dosagem_automatica_3_temp;
}
dosaconfig;

void SaveLEDToEEPROM()                  
{
  EEPROM.write(0, 123);         //to determine if data available in EEPROM
  for (int i=1; i<97; i++)  {
    EEPROM.write(i, wled[i]);
    EEPROM.write(i+96, bled[i]);
  } 
}

void SaveTempToEEPROM()
{
  tempSettings.tempset = int(setTempC*10);
  tempSettings.tempoff = int(offTempC*10);
  tempSettings.tempalarm = int(alarmTempC*10);
  EEPROM_writeAnything(194, tempSettings);
}

void SalvartpaEEPROM()
{
  tpaconfig.temphora = int(hora);
  tpaconfig.tempminuto = int(minuto);
  tpaconfig.tempduracaomaximatpa = int(duracaomaximatpa);
  tpaconfig.tempsegunda = int(segunda);
  tpaconfig.tempterca = int(terca);
  tpaconfig.tempquarta = int(quarta);
  tpaconfig.tempquinta = int(quinta);
  tpaconfig.tempsexta = int(sexta);
  tpaconfig.tempsabado = int(sabado);
  tpaconfig.tempdomingo = int(domingo);
  EEPROM_writeAnything(200, tpaconfig);
}

void SavePHRToEEPROM()
{
  PHRSettings.PHRset = int(setPHR*10);
  PHRSettings.PHRoff = int(offPHR*10);
  PHRSettings.PHRalarm = int(alarmPHR*10);
  EEPROM_writeAnything(220, PHRSettings);
}

void SaveORPToEEPROM()
{
  ORPSettings.ORPset = int(setORP);
  ORPSettings.ORPoff = int(offORP);
  ORPSettings.ORPalarm = int(alarmORP);
  EEPROM_writeAnything(226, ORPSettings);
}

void SavePHAToEEPROM()
{
  PHASettings.PHAset = int(setPHA*10);
  PHASettings.PHAoff = int(offPHA*10);
  PHASettings.PHAalarm = int(alarmPHA*10);
  EEPROM_writeAnything(232, PHASettings);
}

void SaveDENToEEPROM()
{
  DENSettings.DENset = int(setDEN-1000);
  DENSettings.DENoff = int(offDEN);
  DENSettings.DENalarm = int(alarmDEN);
  EEPROM_writeAnything(238, DENSettings);

}

void Salvar_dosadora_EEPROM()
{
  dosaconfig.fator_calib_dosadora_1_temp = int (fator_calib_dosadora_1*10);
  dosaconfig.fator_calib_dosadora_2_temp = int (fator_calib_dosadora_2*10);
  dosaconfig.fator_calib_dosadora_3_temp = int (fator_calib_dosadora_3*10);
  dosaconfig.dose_dosadora_1_personalizada_temp = int(dose_dosadora_1_personalizada*10);
  dosaconfig.dose_dosadora_2_personalizada_temp = int(dose_dosadora_2_personalizada*10);
  dosaconfig.dose_dosadora_3_personalizada_temp = int(dose_dosadora_3_personalizada*10);
  dosaconfig.dose_dosadora_1_automatica_temp = int(dose_dosadora_1_automatica*10);
  dosaconfig.dose_dosadora_2_automatica_temp = int(dose_dosadora_2_automatica*10);
  dosaconfig.dose_dosadora_3_automatica_temp = int(dose_dosadora_3_automatica*10);
  dosaconfig.hora_inicial_dosagem_personalizada_1_temp = int(hora_inicial_dosagem_personalizada_1);
  dosaconfig.minuto_inicial_dosagem_personalizada_1_temp = int(minuto_inicial_dosagem_personalizada_1); 
  dosaconfig.hora_final_dosagem_personalizada_1_temp = int(hora_final_dosagem_personalizada_1);
  dosaconfig.minuto_final_dosagem_personalizada_1_temp = int(minuto_final_dosagem_personalizada_1);
  dosaconfig.segunda_dosagem_personalizada_1_temp = int(segunda_dosagem_personalizada_1);
  dosaconfig.terca_dosagem_personalizada_1_temp = int(terca_dosagem_personalizada_1);
  dosaconfig.quarta_dosagem_personalizada_1_temp = int(quarta_dosagem_personalizada_1);
  dosaconfig.quinta_dosagem_personalizada_1_temp = int(quinta_dosagem_personalizada_1);
  dosaconfig.sexta_dosagem_personalizada_1_temp = int(sexta_dosagem_personalizada_1);
  dosaconfig.sabado_dosagem_personalizada_1_temp = int(sabado_dosagem_personalizada_1);
  dosaconfig.domingo_dosagem_personalizada_1_temp = int(domingo_dosagem_personalizada_1);
  dosaconfig.hora_inicial_dosagem_personalizada_2_temp = int(hora_inicial_dosagem_personalizada_2);
  dosaconfig.minuto_inicial_dosagem_personalizada_2_temp = int(minuto_inicial_dosagem_personalizada_2); 
  dosaconfig.hora_final_dosagem_personalizada_2_temp = int(hora_final_dosagem_personalizada_2);
  dosaconfig.minuto_final_dosagem_personalizada_2_temp = int(minuto_final_dosagem_personalizada_2);
  dosaconfig.segunda_dosagem_personalizada_2_temp = int(segunda_dosagem_personalizada_2);
  dosaconfig.terca_dosagem_personalizada_2_temp = int(terca_dosagem_personalizada_2);
  dosaconfig.quarta_dosagem_personalizada_2_temp = int(quarta_dosagem_personalizada_2);
  dosaconfig.quinta_dosagem_personalizada_2_temp = int(quinta_dosagem_personalizada_2);
  dosaconfig.sexta_dosagem_personalizada_2_temp = int(sexta_dosagem_personalizada_2);
  dosaconfig.sabado_dosagem_personalizada_2_temp = int(sabado_dosagem_personalizada_2);
  dosaconfig.domingo_dosagem_personalizada_2_temp = int(domingo_dosagem_personalizada_2);
  dosaconfig.hora_inicial_dosagem_personalizada_3_temp = int(hora_inicial_dosagem_personalizada_3);
  dosaconfig.minuto_inicial_dosagem_personalizada_3_temp = int(minuto_inicial_dosagem_personalizada_3); 
  dosaconfig.hora_final_dosagem_personalizada_3_temp = int(hora_final_dosagem_personalizada_3);
  dosaconfig.minuto_final_dosagem_personalizada_3_temp = int(minuto_final_dosagem_personalizada_3);
  dosaconfig.segunda_dosagem_personalizada_3_temp = int(segunda_dosagem_personalizada_3);
  dosaconfig.terca_dosagem_personalizada_3_temp = int(terca_dosagem_personalizada_3);
  dosaconfig.quarta_dosagem_personalizada_3_temp = int(quarta_dosagem_personalizada_3);
  dosaconfig.quinta_dosagem_personalizada_3_temp = int(quinta_dosagem_personalizada_3);
  dosaconfig.sexta_dosagem_personalizada_3_temp = int(sexta_dosagem_personalizada_3);
  dosaconfig.sabado_dosagem_personalizada_3_temp = int(sabado_dosagem_personalizada_3);
  dosaconfig.domingo_dosagem_personalizada_3_temp = int(domingo_dosagem_personalizada_3);
  dosaconfig.quantidade_dose_dosadora_1_personalizada_temp = int(quantidade_dose_dosadora_1_personalizada);
  dosaconfig.quantidade_dose_dosadora_2_personalizada_temp = int(quantidade_dose_dosadora_2_personalizada);
  dosaconfig.quantidade_dose_dosadora_3_personalizada_temp = int(quantidade_dose_dosadora_3_personalizada);
  dosaconfig.quantidade_dose_dosadora_1_automatica_temp = int(quantidade_dose_dosadora_1_automatica);
  dosaconfig.quantidade_dose_dosadora_2_automatica_temp = int(quantidade_dose_dosadora_2_automatica);
  dosaconfig.quantidade_dose_dosadora_3_automatica_temp = int(quantidade_dose_dosadora_3_automatica);
  dosaconfig.modo_personalizado_on_1_temp = int (modo_personalizado_on_1);
  dosaconfig.modo_automatico_on_1_temp = int (modo_automatico_on_1);
  dosaconfig.modo_personalizado_on_2_temp = int (modo_personalizado_on_2);
  dosaconfig.modo_automatico_on_2_temp = int (modo_automatico_on_2);
  dosaconfig.modo_personalizado_on_3_temp = int (modo_personalizado_on_3);
  dosaconfig.modo_automatico_on_3_temp = int (modo_automatico_on_3);
  dosaconfig.hora_inicial_dosagem_automatica_1_temp = int(hora_inicial_dosagem_automatica_1);
  dosaconfig.minuto_inicial_dosagem_automatica_1_temp = int(minuto_inicial_dosagem_automatica_1); 
  dosaconfig.hora_final_dosagem_automatica_1_temp = int(hora_final_dosagem_automatica_1);
  dosaconfig.minuto_final_dosagem_automatica_1_temp = int(minuto_final_dosagem_automatica_1);
  dosaconfig.hora_inicial_dosagem_automatica_2_temp = int(hora_inicial_dosagem_automatica_2);
  dosaconfig.minuto_inicial_dosagem_automatica_2_temp = int(minuto_inicial_dosagem_automatica_2); 
  dosaconfig.hora_final_dosagem_automatica_2_temp = int(hora_final_dosagem_automatica_2);
  dosaconfig.minuto_final_dosagem_automatica_2_temp = int(minuto_final_dosagem_automatica_2);
  dosaconfig.hora_inicial_dosagem_automatica_3_temp = int(hora_inicial_dosagem_automatica_3);
  dosaconfig.minuto_inicial_dosagem_automatica_3_temp = int(minuto_inicial_dosagem_automatica_3); 
  dosaconfig.hora_final_dosagem_automatica_3_temp = int(hora_final_dosagem_automatica_3);
  dosaconfig.minuto_final_dosagem_automatica_3_temp = int(minuto_final_dosagem_automatica_3);
  EEPROM_writeAnything(244, dosaconfig);
}

void ReadFromEEPROM()
{
  int k = EEPROM.read(0);
  //char tempString[3];
  if (k==123) {
    for (int i=1; i<89; i++)  {
      wled[i] = EEPROM.read(i);
      bled[i] = EEPROM.read(i+88);
    }  
  }

  EEPROM_readAnything(194, tempSettings);  
  setTempC = tempSettings.tempset;
  setTempC /=10;
  offTempC = tempSettings.tempoff;
  offTempC /=10;
  alarmTempC = tempSettings.tempalarm;
  alarmTempC /= 10;
}

void lertpaEEPROM()
{
  //  char tpaString[9];
  EEPROM_readAnything(200, tpaconfig);  
  hora = tpaconfig.temphora;
  minuto = tpaconfig.tempminuto;
  duracaomaximatpa = tpaconfig.tempduracaomaximatpa;
  segunda = tpaconfig.tempsegunda;
  terca = tpaconfig.tempterca;
  quarta = tpaconfig.tempquarta;
  quinta = tpaconfig.tempquinta;
  sexta = tpaconfig.tempsexta;
  sabado = tpaconfig.tempsabado;
  domingo = tpaconfig.tempdomingo;
}

void lerPHREEPROM()
{
  EEPROM_readAnything(220, PHRSettings);  
  setPHR = PHRSettings.PHRset;
  setPHR /=10;
  offPHR = PHRSettings.PHRoff;
  offPHR /=10;
  alarmPHR = PHRSettings.PHRalarm;
  alarmPHR /= 10;
}

void lerORPEEPROM()
{
  EEPROM_readAnything(226, ORPSettings);  
  setORP = ORPSettings.ORPset;
  offORP = ORPSettings.ORPoff;
  alarmORP = ORPSettings.ORPalarm;
}

void lerPHAEEPROM()
{
  EEPROM_readAnything(232, PHASettings);  
  setPHA = PHASettings.PHAset;
  setPHA /=10;
  offPHA = PHASettings.PHAoff;
  offPHA /=10;
  alarmPHA = PHASettings.PHAalarm;
  alarmPHA /= 10;
}

void lerDENEEPROM()
{
  EEPROM_readAnything(238, DENSettings);  
  setDEN = DENSettings.DENset;
  setDEN +=1000;
  offDEN = DENSettings.DENoff;
  alarmDEN = DENSettings.DENalarm;
}

void ler_dosadora_EEPROM()
{
  EEPROM_readAnything(244,dosaconfig);
  fator_calib_dosadora_1 = dosaconfig.fator_calib_dosadora_1_temp;
  fator_calib_dosadora_1 /=10;
  fator_calib_dosadora_2 = dosaconfig.fator_calib_dosadora_2_temp;
  fator_calib_dosadora_2 /=10;
  fator_calib_dosadora_3 = dosaconfig.fator_calib_dosadora_3_temp;
  fator_calib_dosadora_3 /=10;
  dose_dosadora_1_personalizada = dosaconfig.dose_dosadora_1_personalizada_temp;
  dose_dosadora_1_personalizada /= 10;
  dose_dosadora_2_personalizada = dosaconfig.dose_dosadora_2_personalizada_temp;
  dose_dosadora_2_personalizada /= 10;
  dose_dosadora_3_personalizada = dosaconfig.dose_dosadora_3_personalizada_temp; 
  dose_dosadora_3_personalizada /= 10;
  dose_dosadora_1_automatica = dosaconfig.dose_dosadora_1_automatica_temp;
  dose_dosadora_1_automatica /=10; 
  dose_dosadora_2_automatica = dosaconfig.dose_dosadora_2_automatica_temp; 
  dose_dosadora_2_automatica /=10; 
  dose_dosadora_3_automatica = dosaconfig.dose_dosadora_3_automatica_temp; 
  dose_dosadora_3_automatica /=10;
  hora_inicial_dosagem_personalizada_1 = dosaconfig.hora_inicial_dosagem_personalizada_1_temp;
  minuto_inicial_dosagem_personalizada_1 = dosaconfig.minuto_inicial_dosagem_personalizada_1_temp;
  hora_final_dosagem_personalizada_1 = dosaconfig.hora_final_dosagem_personalizada_1_temp;  
  minuto_final_dosagem_personalizada_1 = dosaconfig.minuto_final_dosagem_personalizada_1_temp; 
  segunda_dosagem_personalizada_1 = dosaconfig.segunda_dosagem_personalizada_1_temp; 
  terca_dosagem_personalizada_1 = dosaconfig.terca_dosagem_personalizada_1_temp; 
  quarta_dosagem_personalizada_1 = dosaconfig.quarta_dosagem_personalizada_1_temp;
  quinta_dosagem_personalizada_1 = dosaconfig.quinta_dosagem_personalizada_1_temp;
  sexta_dosagem_personalizada_1  = dosaconfig.sexta_dosagem_personalizada_1_temp;
  sabado_dosagem_personalizada_1 = dosaconfig.sabado_dosagem_personalizada_1_temp;
  domingo_dosagem_personalizada_1 = dosaconfig.domingo_dosagem_personalizada_1_temp;
  hora_inicial_dosagem_personalizada_2 = dosaconfig.hora_inicial_dosagem_personalizada_2_temp;
  minuto_inicial_dosagem_personalizada_2 = dosaconfig.minuto_inicial_dosagem_personalizada_2_temp;
  hora_final_dosagem_personalizada_2 = dosaconfig.hora_final_dosagem_personalizada_2_temp;  
  minuto_final_dosagem_personalizada_2 = dosaconfig.minuto_final_dosagem_personalizada_2_temp; 
  segunda_dosagem_personalizada_2 = dosaconfig.segunda_dosagem_personalizada_2_temp; 
  terca_dosagem_personalizada_2 = dosaconfig.terca_dosagem_personalizada_2_temp; 
  quarta_dosagem_personalizada_2 = dosaconfig.quarta_dosagem_personalizada_2_temp;
  quinta_dosagem_personalizada_2 = dosaconfig.quinta_dosagem_personalizada_2_temp;
  sexta_dosagem_personalizada_2  = dosaconfig.sexta_dosagem_personalizada_2_temp;
  sabado_dosagem_personalizada_2 = dosaconfig.sabado_dosagem_personalizada_2_temp;
  domingo_dosagem_personalizada_2 = dosaconfig.domingo_dosagem_personalizada_2_temp;
  hora_inicial_dosagem_personalizada_3 = dosaconfig.hora_inicial_dosagem_personalizada_3_temp;
  minuto_inicial_dosagem_personalizada_3 = dosaconfig.minuto_inicial_dosagem_personalizada_3_temp;
  hora_final_dosagem_personalizada_3 = dosaconfig.hora_final_dosagem_personalizada_3_temp;  
  minuto_final_dosagem_personalizada_3 = dosaconfig.minuto_final_dosagem_personalizada_3_temp; 
  segunda_dosagem_personalizada_3 = dosaconfig.segunda_dosagem_personalizada_3_temp; 
  terca_dosagem_personalizada_3 = dosaconfig.terca_dosagem_personalizada_3_temp; 
  quarta_dosagem_personalizada_3 = dosaconfig.quarta_dosagem_personalizada_3_temp;
  quinta_dosagem_personalizada_3 = dosaconfig.quinta_dosagem_personalizada_3_temp;
  sexta_dosagem_personalizada_3  = dosaconfig.sexta_dosagem_personalizada_3_temp;
  sabado_dosagem_personalizada_3 = dosaconfig.sabado_dosagem_personalizada_3_temp;
  domingo_dosagem_personalizada_3 = dosaconfig.domingo_dosagem_personalizada_3_temp;
  quantidade_dose_dosadora_1_personalizada = dosaconfig.quantidade_dose_dosadora_1_personalizada_temp;
  quantidade_dose_dosadora_2_personalizada = dosaconfig.quantidade_dose_dosadora_2_personalizada_temp;
  quantidade_dose_dosadora_3_personalizada = dosaconfig.quantidade_dose_dosadora_3_personalizada_temp;
  quantidade_dose_dosadora_1_automatica = dosaconfig.quantidade_dose_dosadora_1_automatica_temp;
  quantidade_dose_dosadora_2_automatica = dosaconfig.quantidade_dose_dosadora_2_automatica_temp;
  quantidade_dose_dosadora_3_automatica = dosaconfig.quantidade_dose_dosadora_3_automatica_temp;
  modo_personalizado_on_1 = dosaconfig.modo_personalizado_on_1_temp;
  modo_automatico_on_1 = dosaconfig.modo_automatico_on_1_temp;
  modo_personalizado_on_2 = dosaconfig.modo_personalizado_on_2_temp;
  modo_automatico_on_2 = dosaconfig.modo_automatico_on_2_temp;
  modo_personalizado_on_3 = dosaconfig.modo_personalizado_on_3_temp;
  modo_automatico_on_3 = dosaconfig.modo_automatico_on_3_temp;
  hora_inicial_dosagem_automatica_1 = dosaconfig.hora_inicial_dosagem_automatica_1_temp;
  minuto_inicial_dosagem_automatica_1 = dosaconfig.minuto_inicial_dosagem_automatica_1_temp;
  hora_final_dosagem_automatica_1 = dosaconfig.hora_final_dosagem_automatica_1_temp;  
  minuto_final_dosagem_automatica_1 = dosaconfig.minuto_final_dosagem_automatica_1_temp;
  hora_inicial_dosagem_automatica_2 = dosaconfig.hora_inicial_dosagem_automatica_2_temp;
  minuto_inicial_dosagem_automatica_2 = dosaconfig.minuto_inicial_dosagem_automatica_2_temp;
  hora_final_dosagem_automatica_2 = dosaconfig.hora_final_dosagem_automatica_2_temp;  
  minuto_final_dosagem_automatica_2 = dosaconfig.minuto_final_dosagem_automatica_2_temp;
  hora_inicial_dosagem_automatica_3 = dosaconfig.hora_inicial_dosagem_automatica_3_temp;
  minuto_inicial_dosagem_automatica_3 = dosaconfig.minuto_inicial_dosagem_automatica_3_temp;
  hora_final_dosagem_automatica_3 = dosaconfig.hora_final_dosagem_automatica_3_temp;  
  minuto_final_dosagem_automatica_3 = dosaconfig.minuto_final_dosagem_automatica_3_temp;
}


//**********************************************************************************************
//***************************** funcoes ********************************************************
//**********************************************************************************************
void clearScreen()
{
  myGLCD.setColor(0, 0, 0);
  myGLCD.fillRect(0, 0, 400, 240); 
}

void printButton(char* text, int x1, int y1, int x2, int y2, boolean setFont = false)
{
  int stl = strlen(text);
  int fx, fy;

  myGLCD.setColor(0, 0, 200);
  myGLCD.fillRoundRect (x1, y1, x2, y2);
  myGLCD.setColor(255, 255, 255);
  myGLCD.drawRoundRect (x1, y1, x2, y2);

  myGLCD.setBackColor(0, 0, 200);
  if (setFont) {
    myGLCD.setFont(BigFont); 
    fx = x1+(((x2 - x1+1)-(stl*16))/2);
    fy = y1+(((y2 - y1+1)-16)/2);
    myGLCD.print(text, fx, fy);
  }
  else {
    myGLCD.setFont(SmallFont); 
    fx = x1+(((x2 - x1)-(stl*8))/2);
    fy = y1+(((y2 - y1-1)-8)/2);
    myGLCD.print(text, fx, fy);
  }
}
void printButton_verde(char* text, int x1, int y1, int x2, int y2, boolean setFont = false)
{
  int stl = strlen(text);
  int fx, fy;

  myGLCD.setColor(0, 150, 86);
  myGLCD.fillRoundRect (x1, y1, x2, y2);
  myGLCD.setColor(255, 255, 255);
  myGLCD.drawRoundRect (x1, y1, x2, y2);

  myGLCD.setBackColor(0, 150, 86);
  if (setFont) {
    myGLCD.setFont(BigFont); 
    fx = x1+(((x2 - x1+1)-(stl*16))/2);
    fy = y1+(((y2 - y1+1)-16)/2);
    myGLCD.print(text, fx, fy);
  }
  else {
    myGLCD.setFont(SmallFont); 
    fx = x1+(((x2 - x1)-(stl*8))/2);
    fy = y1+(((y2 - y1-1)-8)/2);
    myGLCD.print(text, fx, fy);
  }
}
void printHeader(char* headline)
{
  setFont(SMALL, 255, 255, 0, 255, 255, 0);
  myGLCD.fillRect (1, 1, 319, 14);
  myGLCD.setColor(0, 0, 0);
  myGLCD.print(headline, LEFT+5, 2);   
}

void setFont(boolean font, byte cr, byte cg, byte cb, byte br, byte bg, byte bb)
{
  myGLCD.setBackColor(br, bg, bb);    //font background black
  myGLCD.setColor(cr, cg, cb);      //font colour white
  if (font==LARGE)
    myGLCD.setFont(BigFont);     //font size LARGE
  else if (font==SMALL)
    myGLCD.setFont(SmallFont);
}

// Draw a red frame while a button is touched
void waitForIt(int x1, int y1, int x2, int y2)
{
  myGLCD.setColor(255, 0, 0);
  myGLCD.drawRoundRect (x1, y1, x2, y2);
  while (myTouch.dataAvailable()) {
    myTouch.read(); 
  }
  myGLCD.setColor(255, 255, 255);
  myGLCD.drawRoundRect (x1, y1, x2, y2);
}

//**********************************************************************************************
//********************** Funcoes fase da lua* **************************************************
//**********************************************************************************************
float moonPhase(int moonYear, int moonMonth, int moonDay)
{ 
  float phase;
  double IP; 
  long YY, MM, K1, K2, K3, JulianDay; 
  YY = moonYear - floor((12 - moonMonth) / 10); 
  MM = moonMonth + 9;
  if (MM >= 12)
  { 
    MM = MM - 12; 
  }
  K1 = floor(365.25 * (YY + 4712));
  K2 = floor(30.6 * MM + 0.5);
  K3 = floor(floor((YY / 100) + 49) * 0.75) - 38;
  JulianDay = K1 + K2 + moonDay + 59;
  if (JulianDay > 2299160)
  { 
    JulianDay = JulianDay - K3; 
  }
  IP = MyNormalize((JulianDay - 2451550.1) / LC);
  AG = IP*LC;
  phase = 0; 

  //Determine the Moon Illumination %
  if ((AG >= 0) && (AG <= LC/2))            //FROM New Moon 0% TO Full Moon 100%
  { 
    phase = (2*AG)/LC; 
  }
  if ((AG > LC/2) && (AG <= LC))            //FROM Full Moon 100% TO New Moon 0%
  { 
    phase = 2*(LC-AG)/LC; 
  }
  //Determine the Lunar Phase
  if ((AG >= 0) && (AG <= 5.17))         // 0 a 35%        
  { 
    LP = "LUA NOVA"; 
  }
  if ((AG > 5.17) && (AG <= 14.32))       //35 a 97%  
  { 
    LP = "LUA CRESCENTE"; 
  }
  if ((AG > 14.32) && (AG <= 15.21))      // 97 a 100 e de 100 a 97%     
  { 
    LP = "LUA CHEIA"; 
  }    
  if ((AG > 15.21) && (AG <= 24.36))     //97 a 35%    
  { 
    LP = "LUA MINGUANTE"; 
  }
  if ((AG >= 24.36) && (AG <= LC))       //35 a 0%
  { 
    LP = "LUA NOVA"; 
  }

  return phase; 
}

/******* Normalization Function *******/
double MyNormalize(double v) 
{ 
  v = v - floor(v);
  if (v < 0)
    v = v + 1;
  return v;
}

byte validateDate(byte d, byte m, word y)
{
  byte mArr[12] = {
    31,0,31,30,31,30,31,31,30,31,30,31                              };
  byte od;

  if (m==2)
  {
    if ((y % 4)==0)
    {
      if (d==30)
        od=1;
      else if (d==0)
        od=29;
      else
        od=d;
    }
    else
    {
      if (d==29)
        od=1;
      else if (d==0)
        od=28;
      else
        od=d;
    }
  }
  else
  {
    if (d==0)
      od=mArr[m-1];
    else if (d==(mArr[m-1]+1))
      od=1;
    else
      od=d;
  }

  return od;
}

byte validateDateForMonth(byte d, byte m, word y)
{
  byte mArr[12] = {
    31,0,31,30,31,30,31,31,30,31,30,31                              };
  byte od;
  boolean dc=false;

  if (m==2)
  {
    if ((y % 4)==0)
    {
      if (d>29)
      {
        d=29;
        dc=true;
      }
    }
    else
    {  
      if (d>28)
      {
        d=28;
        dc=true;
      }
    }
  }
  else
  {
    if (d>mArr[m-1])
    {
      d=mArr[m-1];
      dc=true;
    }
  }
  return d;
}

byte calcDOW(byte d, byte m, int y)
{
  int dow;
  byte mArr[12] = {
    6,2,2,5,0,3,5,1,4,6,2,4                              };

  dow = (y % 100);
  dow = dow*1.25;
  dow += d;
  dow += mArr[m-1];
  if (((y % 4)==0) && (m<3))
    dow -= 1;
  while (dow>7)
    dow -= 7;

  return dow;
}

//Write CR LF to a file

void writeCRLF(SdFile& f) 
{
  f.write((uint8_t*)"\r\n", 2);
}

//coloca a senha em uma string
void updateStr(int val)
{
  stCurrent[stCurrentLen]=val;
  stCurrent[stCurrentLen+1]='\0';
  stCurrentLen++;
}

//---------------------------------------main screen ----------------------------------------------tela =0
void mainScreen(boolean refreshAll=false)
{
  int ledLevel, s, u;
  String oldval, rtc1, rtcm;
  t = rtc.getTime();

  myGLCD.setColor(64, 64, 64);
  myGLCD.fillRect(0, 226, 400, 239);
  setFont(SMALL, 255, 255, 0, 64, 64, 64);
  myGLCD.print(rtc.getDOWStr(FORMAT_LONG), 10, 227);
  myGLCD.printNumI(t.date, 75, 227);
  myGLCD.print("DE", 95, 227);
  myGLCD.print(rtc.getMonthStr(FORMAT_LONG), 125, 227);
  myGLCD.print("DE", 205, 227);
  myGLCD.printNumI(t.year, 225, 227);
  myGLCD.print(rtc.getTimeStr(FORMAT_LONG), 315, 227);  
  setFont(SMALL, 255, 255, 255, 0, 0, 0);
  oldval = date;                             //refresh date if different

  if ((oldval!=date) || refreshAll)
  {
    char bufferLP[16];
    LP.toCharArray(bufferLP, 16);
    myGLCD.print(bufferLP, 98, 210); //Print Moon Phase Description to LCD

    float lunarCycle = moonPhase(t.year,t.mon, t.date); //get a value for the lunar cycle
    if ((lunarCycle*100) < 1) //Print % of Full to LCD
    { 
      myGLCD.print(" 0.00", 212, 210); 
    }
    else { 
      myGLCD.printNumF(lunarCycle*100, 1, 242, 210);
    }
    myGLCD.print("% ILUMINADA", 280, 210);
    myGLCD.print("FASE LUNAR:", 10, 210);
  }
  if ((blueLed!=bled_out) || refreshAll)       //refresh blue led displays
  {
    blueLed = bled_out;
    ledLevel = LedToPercent(bled_out);
    oldval = "A: " + String(ledLevel) + "%  ";
    char bufferB[9];
    oldval.toCharArray(bufferB, 11);
    s= 117 + (bled_out*1.3);
    if (s > 295)
      u = s - 78;
    else if (s <= 295)
      u = s;
    myGLCD.setColor(0, 0, 0);
    myGLCD.fillRect(u, 9, 372, 14);          //hide end of last bar
    setFont(LARGE, 100, 100, 255, 0, 0, 0);
    myGLCD.print(bufferB, 3, 5);              //Blue led value
    myGLCD.drawLine(115, 5, 115, 19);
    myGLCD.fillRect(117, 9, u, 14);           //blue bar
    myGLCD.drawLine(373, 5, 373, 19);
  }

  if ((whiteLed!=wled_out) || refreshAll)         //refresh white led display
  {
    whiteLed = wled_out;
    ledLevel = LedToPercent(wled_out);
    oldval = "B: " + String(ledLevel) + "%  ";
    char bufferW[9];
    oldval.toCharArray(bufferW, 11);
    s= 117 + (wled_out*1.3);

    if (s > 295)
      u = s - 78;
    else if (s <= 295)
      u = s;

    myGLCD.setColor(0, 0, 0);
    myGLCD.fillRect(u, 27, 372, 35);               //hide end of last bar
    setFont(LARGE, 255, 255, 255, 0, 0, 0);
    myGLCD.print(bufferW, 3, 20);                  //White led value
    myGLCD.drawLine(115, 25, 115, 39);      
    myGLCD.fillRect(117, 29, u, 34);                //white bar
    myGLCD.drawLine(373, 25, 373, 39);
  }

  if ( refreshAll)                                  //draw static elements
  {
    setFont(SMALL, 255, 255, 255, 0, 0, 0);
    myGLCD.print("T.DISSIPADOR:", 12, 86);   
    myGLCD.print("TEMP. AGUA:", 12, 67);
    myGLCD.print("PH DO AQUARIO:", 12, 105);
    myGLCD.print("PH DO REATOR:", 12, 124);
    myGLCD.print("DENSIDADE:", 12, 143);
    myGLCD.print("ORP:", 12, 162);

    myGLCD.print("CHILLER:", 212, 67);
    myGLCD.print("AQUECEDOR:", 212, 86);
    myGLCD.print("REATOR:", 212, 105);
    myGLCD.print("OZONIO:", 212, 124);
    myGLCD.print("REPOSICAO:", 212, 143);
    myGLCD.print("NIVEL:", 212, 162);
    myGLCD.print("TPA:", 212, 181);

    setFont (LARGE, 0, 255, 0, 0, 0, 0);
    myGLCD.drawCircle(179, 84, 2);
    myGLCD.print("C", 182, 81);

    myGLCD.drawCircle(177, 65, 2);               //t. agua
    myGLCD.print("C", 180, 62);                  // t. agua

    myGLCD.print("mV", 100, 159);             //unidade orp
    myGLCD.print("g/l", 152, 140);            //unidade densidade

    myGLCD.setColor(161, 127, 73);                     //draw upper line
    myGLCD.drawLine(1, 50, 398, 50);

    myGLCD.drawRect(7, 57, 199, 205);             //Desenhar retangulos
    myGLCD.drawRect(206, 57, 392, 205);
  } 

  myGLCD.setColor(0, 0, 0);                      
  myGLCD.fillRect(100, 62, 170, 80);               //Apagar temperatura
  myGLCD.fillRect(113, 83, 170, 99);               //Apagar temp. dissipador
  myGLCD.fillRect(124, 102, 190, 119);               //Apagar PH do aquario
  myGLCD.fillRect(118, 121, 190, 137);               //Apagar PH do reator
  myGLCD.fillRect(88, 140, 150, 156);               //Apagar densidade
  myGLCD.fillRect(45, 160, 97, 178);               //Apagar ORP

  myGLCD.fillRect(282, 60, 330, 78);               //Apagar noticia de chiller ligado/desligado
  myGLCD.fillRect(292, 79, 350, 97);              // Apagar noticia de aquecedor ligado/desligado
  myGLCD.fillRect(270, 100, 320, 118);              // Apagar noticia de reator ligado/desligado
  myGLCD.fillRect(270, 119, 320, 137);              // Apagar noticia de ozonio ligado/desligado
  myGLCD.fillRect(287, 138, 350, 155);              // Apagar noticia de reposicao ligado/desligado
  myGLCD.fillRect(263, 158, 390, 174);              // Apagar noticia de nivel normal/anormal
  myGLCD.fillRect(245, 178, 320, 195);              // Apagar noticia de TPA ligado/desligado

  setFont(LARGE, 0, 255, 0, 0, 0, 0);  
  myGLCD.printNumF(tempC, 1, 102, 62); // Temperatura da agua
  myGLCD.printNumF(tempH, 1, 111, 83);   //Temperatura dissipador
  myGLCD.printNumF(PHA, 2, 122, 102);   //PH aqua
  myGLCD.printNumF( PHR, 2, 116, 121);  //PH reator
  myGLCD.printNumI(DEN, 88, 140);   //densidade
  myGLCD.printNumI( ORP, 45, 160);  //ORP 

  if (tempCflag==true) 
  {
    setFont(LARGE, 0, 255, 0, 0, 0, 0);
    myGLCD.print("ON", 279, 62);                       //chiller ligado
  }
  else if (tempCflag==false) 
  {
    setFont(LARGE, 0, 255, 0, 0, 0, 0);
    myGLCD.print("OFF", 279, 62);                        //chiller desligado
  }
  if (tempHflag==true) 
  {
    setFont(LARGE, 0, 255, 0, 0, 0, 0);
    myGLCD.print("ON", 289, 81);           // aquecedor ligado
  } 
  else if (tempHflag==false) 
  {
    setFont(LARGE, 0, 255, 0, 0, 0, 0);
    myGLCD.print("OFF", 289, 81);           // aquecedor desligado
  } 
  if (PHRflag==true) 
  {              
    setFont(LARGE, 0, 255, 0, 0, 0, 0);
    myGLCD.print("ON", 270, 100);           // reator ligado
  } 
  else if (PHRflag==false) 
  {              
    setFont(LARGE, 0, 255, 0, 0, 0, 0);
    myGLCD.print("OFF", 270, 100);           // reator desligado
  }
  if (ORPflag==true) 
  {             
    setFont(LARGE, 0, 255, 0, 0, 0, 0);
    myGLCD.print("ON", 270, 119);           // reator ligado
  } 
  else if (ORPflag==false) 
  {                
    setFont(LARGE, 0, 255, 0, 0, 0, 0);
    myGLCD.print("OFF", 270, 119);           // reator desligado
  }
  if (tpa_em_andamento==true) 
  {             
    setFont(LARGE, 0, 255, 0, 0, 0, 0);
    myGLCD.print("ON", 250, 180);           // TPA em andamento
  }
  else if (tpa_em_andamento==false) 
  {             
    setFont(LARGE, 0, 255, 0, 0, 0, 0);
    myGLCD.print("OFF", 250, 180);           // TPA não esta em andamento
  }
  if (nivel_status==true) {             
    setFont(LARGE, 255, 0, 0, 0, 0, 0);
    myGLCD.print("BAIXO", 265, 160);           // Nivel baixo em vermelho
  }
  else if (nivel_status==false) 
  {             
    setFont(LARGE, 0, 255, 0, 0, 0, 0);
    myGLCD.print("NORMAL", 265, 160);           // Nivel nornal
  }  
  if (ato==true) 
  {             
    setFont(LARGE, 0, 255, 0, 0, 0, 0);
    myGLCD.print("ON", 289, 140);           // reposicao ligada
  }
  else if (ato==false)
  {             
    setFont(LARGE, 0, 255, 0, 0, 0, 0);
    myGLCD.print("OFF", 289, 140);           // reposicao desligada
  }

  if (tempAflag==true) 
  {                                //print alarm
    setFont(LARGE, 255, 0, 0, 0, 0, 0);
    myGLCD.printNumF( tempC, 1, 102, 64);              //temperatura em vermelho
  }  
  if (PHAAflag==true) 
  {                                //print alarm
    setFont(LARGE, 255, 0, 0, 0, 0, 0);
    myGLCD.printNumF(PHA, 2, 122, 102);   //PH do aquario em vermelho
  }    
  if (PHRAflag==true) 
  {                                //print alarm
    setFont(LARGE, 255, 0, 0, 0, 0, 0);
    myGLCD.printNumF(PHR, 2, 116, 121);   //PH do reator em vermelho
  }
  if (ORPAflag==true) 
  {                                //print alarm
    setFont(LARGE, 255, 0, 0, 0, 0, 0);
    myGLCD.printNumI(ORP, 45, 160);   //ORP em vermelho
  }    
  if (DENAflag==true) 
  {                                //print alarm
    setFont(LARGE, 255, 0, 0, 0, 0, 0);
    myGLCD.printNumI(DEN, 88, 140);   //PH do reator em vermelho
  }  
}

//------------------------------------menu----------------------------------------------------------- tela =1
void menuScreen()
{

  printHeader("MENU");

  printButton("HORA E DATA", tanD[0], tanD[1], tanD[2], tanD[3]);
  printButton("TESTAR LED", tesT[0], tesT[1], tesT[2], tesT[3]);
  printButton("CONTROLE PARAM.", temC[0], temC[1], temC[2], temC[3]);
  printButton("GRAFICOS", graF[0], graF[1], graF[2], graF[3]);
  printButton("ALT. VALORES LED", ledW[0], ledW[1], ledW[2], ledW[3]);
  printButton("TPA AUTOMATICA", tpaA[0], tpaA[1], tpaA[2], tpaA[3]);
  printButton("DOSADORAS", dosA[0], dosA[1], dosA[2], dosA[3]);
  printButton("WAVEMAKER", wavM[0], wavM[1], wavM[2], wavM[3]);
  printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3]);
}

// -------------------------Relogio------------------------------------------------------tela=2
void setClock()   
{
  t_temp = rtc.getTime();

  printHeader("ALTERAR HORA E DATA");

  printButton ("+", houU[0], houU[1], houU[2], houU[3], true);   //hour up
  printButton ("-", houD[0], houD[1], houD[2], houD[3], true);   //hour down

  printButton ("+", minU[0], minU[1], minU[2], minU[3], true);   //min up
  printButton ("-", minD[0], minD[1], minD[2], minD[3], true);   //min down 

  printButton ("+", segC[0], segC[1], segC[2], segC[3], true);   //segundo mais
  printButton ("-", segB[0], segB[1], segB[2], segB[3], true);   //segundo menos

  printButton ("+", yeaU[0], yeaU[1], yeaU[2], yeaU[3], true);    //year up
  printButton ("-", yeaD[0], yeaD[1], yeaD[2], yeaD[3], true);     //year down

  printButton ("-", dayD[0], dayD[1], dayD[2], dayD[3], true);     //day down
  printButton ("+", dayU[0], dayU[1], dayU[2], dayU[3], true);    //day up

  printButton ("+", monU[0], monU[1], monU[2], monU[3], true);    //month up
  printButton ("-", monD[0], monD[1], monD[2], monD[3], true);     //month down

  printButton("SALVAR", prOK[0], prOK[1], prOK[2], prOK[3]);
  printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3]);
  printButton("MENU", menU[0], menU[1], menU[2], menU[3]);

  setFont(LARGE, 255, 255, 255, 0, 0, 0);

  if (t_temp.date==0)
  {
    t_temp.date=1;
    t_temp.mon=1;
    t_temp.year=2010;
    t_temp.dow=5;
    t_temp.hour=0;
    t_temp.min=0;
    t_temp.sec=0;
    ct=true;
    cd=true;
  }

  myGLCD.print("   :     ", 70, 48);  //fill over old time
  myGLCD.print("   :     ", 160, 48);  //fill over old time

  if (t_temp.hour<10)
  {
    myGLCD.printNumI(0, 70, 48);
    myGLCD.printNumI(t_temp.hour, 86, 48);
  }
  else
  {
    myGLCD.printNumI(t_temp.hour, 70, 48);
  } 
  if (t_temp.min<10)
  {
    myGLCD.printNumI(0, 160, 48);
    myGLCD.printNumI(t_temp.min, 176, 48);
  }
  else
  {
    myGLCD.printNumI(t_temp.min, 160, 48);
  } 
  if (t_temp.sec<10)
  {
    myGLCD.printNumI(0, 250, 48);
    myGLCD.printNumI(t_temp.sec, 266, 48);
  }
  else
  {
    myGLCD.printNumI(t_temp.sec, 250, 48);
  }
  if (t_temp.date<10)
  {
    myGLCD.printNumI(0, 70, 132);
    myGLCD.printNumI(t_temp.date, 86, 132);
  }
  else
  {
    myGLCD.printNumI(t_temp.date, 70, 132);
  }
  if (t_temp.mon<10)
  {
    myGLCD.printNumI(0, 160, 132);
    myGLCD.printNumI(t_temp.mon, 176, 132);
  }
  else
  {
    myGLCD.printNumI(t_temp.mon, 160, 132);
  }
  myGLCD.printNumI(t_temp.year, 230, 132);
  myGLCD.setFont(SmallFont);
  myGLCD.print("HORA:", 10, 51);
  myGLCD.print("DATA:", 10, 134);
  setFont(LARGE, 255, 255, 255, 0, 0, 0);  
}

void testScreen(boolean refreshAll=false)//--------------------------------teste-------------------------------------tela =3
{    
  if (refreshAll) 
  {  
    printHeader("TESTAR VARIACAO DE LUMINOSIDADE");
    myGLCD.fillRect (1, 15, 318, 99);      //clear 'Test in progress'
    printButton ("", stsT[0], stsT[1], stsT[2], stsT[3], true);   //start/stop
    printButton ("-10s", tenM[0], tenM[1], tenM[2], tenM[3], true);     //-10s
    printButton ("+10s", tenP[0], tenP[1], tenP[2], tenP[3], true);   //+10s
    myGLCD.print("INICIAR", stsT[0]+10, stsT[1]+15);
    myGLCD.print("TESTE", stsT[0]+25, stsT[1]+40);   
    printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3]);
    printButton("MENU", menU[0], menU[1], menU[2], menU[3]);
  } 
  else
  {
    min_cnt=0;

    myGLCD.setColor(0, 0, 0);
    myGLCD.fillRect (1, 15, 318, 99);    //clear above buttons
    myGLCD.setColor(0, 0, 200);
    myGLCD.fillRect(stsT[0]+5, stsT[1]+5, stsT[2]-5, stsT[3]-40);   //clear 'start'
    setFont(LARGE, 255, 255, 255, 0, 0, 200);
    myGLCD.print("PARAR", stsT[0]+25, stsT[1]+15);

    myGLCD.setColor(255, 0, 0);
    myGLCD.fillRect (1, 15, 318, 37);
    myGLCD.drawRoundRect (stsT[0], stsT[1], stsT[2], stsT[3]);       //red button during test
    setFont(LARGE, 255, 255, 255, 255, 0, 0);
    myGLCD.print("TESTE EM ANDAMENTO", 15, 16);
    setFont(SMALL, 255, 255, 255, 0, 0, 0);
    myGLCD.print("TEMPO:", 33, 40);
    myGLCD.print("POTENCIA DE SAIDA (0-255):", 30, 40);

    while (LEDtestTick)               //test LED and speed up time
    {
      unsigned long currentMillis = millis();

      if (myTouch.dataAvailable())  {
        processMyTouch();
      }

      if (currentMillis - previousMillis > 500)    //change time every 0.5s
      {
        previousMillis = currentMillis;

        min_cnt++;
        int hour = min_cnt/60;
        int minut = min_cnt%60;
        setFont(LARGE, 255, 255, 255, 0, 0, 0);
        myGLCD.print("  :  ", 20, 55);
        myGLCD.printNumI(hour, 24, 55);
        myGLCD.printNumI(minut, 64, 55);

        String bled = "B: " + String(bled_out) + "  ";      
        char bufferB[9];
        bled.toCharArray(bufferB, 9);
        myGLCD.print(bufferB, 180, 55);      //Blue led graph
        String wled = "W: " + String(wled_out) + "  ";
        char bufferW[9];
        wled.toCharArray(bufferW, 9);
        myGLCD.print(bufferW, 180, 75);

        LED_levels_output();

      }
    }
  } 
}

//---------------------------------------------Temperatura--------------------------------tela =4 ----------
void tempScreen(boolean refreshAll=false)
{

  if (refreshAll)
  {
    if (setTempC==0) {
      setTempC = tempC;  
    }                  //change to current temp.
    temp2beS = setTempC;
    temp2beO = offTempC;
    temp2beA = alarmTempC;

    printHeader("CONTROLE DE TEMPERATURA DA AGUA");

    setFont(SMALL, 255, 255, 255, 0, 0, 0);
    myGLCD.print("TEMPERATURA DESEJADA:", 85, 20);
    myGLCD.print("VARIACAO PERMITIDA:", 90, 70);
    myGLCD.print("VARIACAO PARA ACIONAR O ALARME:", 50, 120);

    printButton("-", temM[0], temM[1], temM[2], temM[3], true);      //temp minus
    printButton("+", temP[0], temP[1], temP[2], temP[3], true);      //temp plus
    printButton("-", offM[0], offM[1], offM[2], offM[3], true);      //offset minus
    printButton("+", offP[0], offP[1], offP[2], offP[3], true);      //offset plus
    printButton("-", almM[0], almM[1], almM[2], almM[3], true);      //alarm minus
    printButton("+", almP[0], almP[1], almP[2], almP[3], true);      //alarm plus

    printButton("SALVAR", prOK[0], prOK[1], prOK[2], prOK[3]);
    printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3]);
    printButton("VOLTAR", menU[0], menU[1], menU[2], menU[3]);
  }

  setFont(LARGE, 255, 255, 255, 0, 0, 0);
  myGLCD.printNumF(temp2beS, 1, 130, 40);
  myGLCD.printNumF(temp2beO, 1, 140, 90);
  myGLCD.printNumF(temp2beA, 1, 140, 140);
}

void ledSetScreen()   //--------------------------------alterar valores-----------------------------------tela =5
{
  int a;

  if (WorB) {
    for (int i; i<96; i++)
      tled[i] = wled[i];
    setFont(SMALL, 255, 255, 0, 255, 255, 0);
    myGLCD.fillRect (1, 1, 318, 14);
    myGLCD.setColor(0, 0, 0);
    myGLCD.print("POTENCIA DOS LEDS BRANCOS: 255 = 100%",15, 2);
    printButton("AZUL", leWB[0], leWB[1], leWB[2], leWB[3], SMALL);
  }
  else {
    for (int i; i<96; i++)
      tled[i] = bled[i];
    setFont(SMALL, 255, 255, 0, 255, 255, 0);
    myGLCD.fillRect (1, 1, 318, 14);
    myGLCD.setColor(0, 0, 0);
    myGLCD.print("POTENCIA LEDS AZUIS: 255 = 100%" ,15, 2);
    printButton("BRANCO", leWB[0], leWB[1], leWB[2], leWB[3], SMALL);
  }

  setFont(SMALL, 255, 255, 255, 0, 0, 0);
  for (int i=0; i<12; i++) {
    myGLCD.setColor(0, 255, 255);
    myGLCD.printNumI((i*2), (i*26)+13, 14); 
    myGLCD.printNumI(((i*2)+2), (i*26)+13, 24);
    for (int j=0; j<8; j++) {
      a= (i*8)+j;         
      myGLCD.setColor(255, 255, 255);
      myGLCD.printNumI(tled[a], (i*26)+7, (j*18)+39);
      myGLCD.setColor(100, 100, 100);
      myGLCD.drawRect((i*26)+4, (j*18)+35, (i*26)+30, (j*18)+53);
    }
  }

  printButton("ALTERAR", leST[0], leST[1], leST[2], leST[3], SMALL);
  printButton("SALVAR EEPROM", savE[0], savE[1], savE[2], savE[3], SMALL);
  printButton("MENU", menU[0], menU[1], menU[2], menU[3]);
  printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3]);

}

void ledChangeScreen()    //---------------------------------------potencia dos leds------------------------------tela =6
{
  if (WorB)
    printHeader("ALTERAR POTENCIAS DOS LEDS BRANCOS");
  else
    printHeader("ALTERAR POTENCIA DOS LEDS AZUIS");

  setFont(SMALL, 0, 255, 255, 0,0,0);
  for (int i=0; i<12; i++) {
    myGLCD.setColor(0, 255, 255);
    myGLCD.printNumI(((i*2)), (i*26)+10, 22);
    myGLCD.printNumI(((i*2)+2), (i*26)+10, 33);
    myGLCD.setColor(100, 100, 100);
    myGLCD.drawRect((i*26)+4, 20 , (i*26)+30, 45);
  }

  for (int i=0; i<8; i++)
  {
    printButton("+", (i*38)+10, 70, (i*38)+35, 95, LARGE);
    printButton("-", (i*38)+10, 125, (i*38)+35, 150, LARGE);
  }

  printButton("SALVAR", prOK[0], prOK[1], prOK[2], prOK[3]);
  printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3]);
  printButton("MENU", menU[0], menU[1], menU[2], menU[3]);
}

int LedToPercent (int Led_out)        //returns LED output in %
{
  int result;

  if (Led_out==0) {
    result = 0; 
  }
  else {
    result = map(Led_out, 1, 255, 1, 100);  
  }

  return result; 
}

void tpaScreen(boolean refreshAll = false) //--------------------------------------------------------tela =7
{
  if(refreshAll)
  {
    temp2hora = hora;
    temp2minuto = minuto;
    temp2duracaomaximatpa = duracaomaximatpa;
    temp2segunda = segunda;
    temp2terca = terca;
    temp2quarta = quarta;
    temp2quinta = quinta;
    temp2sexta = sexta;
    temp2sabado = sabado;
    temp2domingo = domingo;

    printHeader("CONF.DIAS E HORARIO PARA TPA AUTOMATICA");

    printButton("+", houU[0], houU[1], houU[2], houU[3], true); //hour up
    printButton("-", houD[0], houD[1], houD[2], houD[3], true); //hour down
    printButton("+", minUT[0], minUT[1], minUT[2], minUT[3], true); //min up
    printButton("-", minDT[0], minDT[1], minDT[2], minDT[3], true); //min down
    printButton("+", durC[0], durC[1], durC[2], durC[3], true); //min up
    printButton("-", durB[0], durB[1], durB[2], durB[3], true); //min down

    setFont(LARGE, 255, 255, 255, 0, 0, 0);
    myGLCD.print(":", 105, 48);
    myGLCD.setFont(SmallFont);
    myGLCD.print("HORA:", 10, 51);
    myGLCD.print("DURACAO MAXIMA", 157, 31);
    myGLCD.print("POR ESTAGIO:", 170, 46);
    printButton("SALVAR", prOK[0], prOK[1], prOK[2], prOK[3]);
    printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3]);
    printButton("MENU", menU[0], menU[1], menU[2], menU[3]);
  }
  if (temp2segunda == 1) {
    printButton_verde("SEGUNDA", segU[0], segU[1], segU[2], segU[3]); //botao segunda
  } 
  else {
    printButton("SEGUNDA", segU[0], segU[1], segU[2], segU[3]); //botao segunda
  }
  if (temp2terca == 2) {
    printButton_verde("TERCA", terC[0], terC[1], terC[2], terC[3]); //botao terca
  } 
  else {
    printButton("TERCA", terC[0], terC[1], terC[2], terC[3]); //botao terca
  }
  if (temp2quarta == 3) {
    printButton_verde("QUARTA", quaR[0], quaR[1], quaR[2], quaR[3]); //botao quarta
  } 
  else {
    printButton("QUARTA", quaR[0], quaR[1], quaR[2], quaR[3]); //botao quarta
  }
  if (temp2quinta == 4) {
    printButton_verde("QUINTA", quiN[0], quiN[1], quiN[2], quiN[3]); //botao quinta
  } 
  else {
    printButton("QUINTA", quiN[0], quiN[1], quiN[2], quiN[3]); //botao quinta
  }
  if (temp2sexta == 5) {
    printButton_verde("SEXTA", sexT[0], sexT[1], sexT[2], sexT[3]); //botao sexta
  } 
  else {
    printButton("SEXTA", sexT[0], sexT[1], sexT[2], sexT[3]); //botao sexta
  }
  if (temp2sabado == 6) printButton_verde("SABADO", sabA[0], sabA[1], sabA[2], sabA[3]); //botao sabado
  else {
    printButton("SABADO", sabA[0], sabA[1], sabA[2], sabA[3]); //botao sabado
  }
  if (temp2domingo == 7) printButton_verde("DOMINGO", domI[0], domI[1], domI[2], domI[3]); //botao sabado
  else {
    printButton("DOMINGO", domI[0], domI[1], domI[2], domI[3]); //botao sabado
  }

  setFont(LARGE, 255, 255, 255, 0, 0, 0);
  if (temp2hora < 10) {
    myGLCD.printNumI(0, 70, 48);
    myGLCD.printNumI(temp2hora, 86, 48);
  } 
  else {
    myGLCD.printNumI(temp2hora, 70, 48);
  }

  if (temp2minuto < 10) {
    myGLCD.printNumI(0, 120, 48);
    myGLCD.printNumI(temp2minuto, 136, 48);
  } 
  else {
    myGLCD.printNumI(temp2minuto, 120, 48);
  }
  if (temp2duracaomaximatpa < 10) {
    myGLCD.printNumI(0, 275, 48);
    myGLCD.printNumI(temp2duracaomaximatpa, 291, 48);
  } 
  else {
    myGLCD.printNumI(temp2duracaomaximatpa, 275, 48);
  }  
}
void menu_dosadoras()//---------------------------------------------tela =8
{

  printHeader("ALTERAR CONFIGURACAO DAS DOSADORAS");

  printButton("MANUAL", manU[0], manU[1], manU[2], manU[3]);
  printButton("AUTOMATICO", autO[0], autO[1], autO[2], autO[3]);
  printButton("PERSONALIZADO", perS[0], perS[1], perS[2], perS[3]);
  printButton("REVER CONFIG.", reV[0], reV[1], reV[2], reV[3]);
  printButton("CALIBRAR", caliB[0], caliB[1], caliB[2], caliB[3]);
  printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3]);
  printButton("MENU", menU[0], menU[1], menU[2], menU[3]);
}

void graficoScreen()//------------------------------------------------------------tela =9
{  
  printHeader("ESCOLHA UM GRAFICO"); 
  printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3]); 
  printButton("MENU", menU[0], menU[1], menU[2], menU[3]);
  printButton("TEMPERATURA", tempG[0], tempG[1], tempG[2],tempG[3]);
  printButton("PH AQUARIO", phA[0], phA[1], phA[2], phA[3]);
  printButton("PH REATOR", phR[0], phR[1], phR[2], phR[3]);
  printButton("ORP", orP[0], orP[1], orP[2], orP[3]);
  printButton("DENSIDADE", denS[0], denS[1], denS[2], denS[3]);

}

void waveScreen(boolean refreshAll=false)///------------------------------------------------------------------tela =10
{
  printHeader("WAVEMAKER");
  printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3]);
  printButton("MENU", menU[0], menU[1], menU[2], menU[3]);

  setFont(SMALL, 255, 255, 255, 0, 0, 0);
  myGLCD.print("FUNCAO INCOMPLETA", 80, 30);
}

void tempgScreen()//------------------------------------------------------------tela =11
{
  int x, y, z, grafico;
  int16_t n;
  char buf[8];
  float temperatura;
  int j = 0;
  int i = 0;
  int k = 0;
  float soma = 0.0f; // soma dos valores de todos os elementos
  float media = 0.0f; // média dos valores
  float linhaR;
  float linhaG;
  float linhaB;

  printHeader("GRAFICO DE TEMPERATURA");
  setFont(SMALL, 255, 255, 255, 0, 0, 0);
  myGLCD.print("22,5", 5, 180);
  myGLCD.print("23,0", 5, 165);
  myGLCD.print("23,5", 5, 150);
  myGLCD.print("24,0", 5, 135);
  myGLCD.print("24,5", 5, 120);
  myGLCD.print("25,0", 5, 105);
  myGLCD.print("25,5", 5, 90);
  myGLCD.print("26,0", 5, 75);
  myGLCD.print("26,5", 5, 60);
  myGLCD.print("27,0", 5, 45);
  myGLCD.print("27,5", 5, 30);  
  myGLCD.print("2", 50, 193);
  myGLCD.print("4", 70, 193);
  myGLCD.print("6", 90, 193);
  myGLCD.print("8", 110, 193);
  myGLCD.print("10", 125, 193);
  myGLCD.print("12", 145, 193);
  myGLCD.print("14", 165, 193);
  myGLCD.print("16", 185, 193);
  myGLCD.print("18", 205, 193);
  myGLCD.print("20", 225, 193);
  myGLCD.print("22", 245, 193);
  myGLCD.print("0", 275, 193);  
  myGLCD.drawCircle(15, 21, 2);  
  myGLCD.print("C", 20, 18);
  myGLCD.print("H", 290, 193);

  myGLCD.drawLine(40, 30, 40, 190); //eixo y
  myGLCD.drawLine(40, 190, 290, 190);  //eixo x

  myGLCD.setColor(64, 64, 64);  //malha

  //EIXO X
  for(int k=40; k<180; k+=15)
  {
    myGLCD.drawLine(40, k, 290, k);
  }

  //EIXOY
  for(int l=60; l<300; l+=20)
  {
    myGLCD.drawLine(l, 30, l, 190);
  }

  linhaR =setTempC;   //  Linhas de comparacao
  linhaG =(setTempC+offTempC);
  linhaB = (setTempC-offTempC);

  if ((linhaR>=22.5) && (linhaR<=27.5))
    x= (190-((linhaR-22.5)*30));

  else if (linhaR > 27.5)
    x=30;

  else if (linhaR < 22.5)
    x=190;

  if ((linhaG>=22.5) && (linhaG<=27.5))
    y= (190-((linhaG-22.5)*30));

  else if (linhaG > 27.5)
    y=30;

  else if (linhaG < 22.5)
    y=190;

  if ((linhaB>=22.5) && (linhaB<=27.5))
    z= (190-((linhaB-22.5)*30));

  else if (linhaB > 27.5)
    z=30;

  else if (linhaB < 22.5)
    z=190;

  myGLCD.setColor(255, 0, 0);
  myGLCD.drawLine(40, x, 290, x);//Temperatura desejada
  myGLCD.setColor(10, 10, 255);        //Variacao permitida
  myGLCD.drawLine(40, y, 290, y); //variacao mais
  myGLCD.drawLine(40, z, 290, z); //variacao menos*/

  printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3]); 
  printButton("MENU", menU[0], menU[1], menU[2], menU[3]);
  printButton("VOLTAR", volT[0], volT[1], volT[2], volT[3]);

  digitalWrite (4, LOW);
  file.open(&root, "LOGTDIA.TXT", O_READ);
  while ((n = file.read(buf, sizeof(buf))) > 0)
  {
    temperatura = atof(buf);
    soma +=temperatura;

    if(strlen(buf)==5)
    {
      i++;
      k++;
    }

    if (temperatura <= 2 )
    {
      k -= 1;
    }

    if (i==6)
    {
      media = soma / k;
      i = 0;
      j++;
      soma = 0;
      k = 0;

      if ((media) < 22.5)
      {
        grafico = 190;
      }
      else if ((media) > 27.5)
      {
        grafico = 30;
      }
      else if (22.5 <= media <= 27.5)
      {
        grafico = (190-((media-22.5)*30));
      }
      setFont(SMALL, 255, 0, 255, 0, 0, 0);
      myGLCD.drawPixel((40+j),grafico);
    }
  }
  file.close();
  digitalWrite (4, HIGH);
}

void orpScreen()//------------------------------------------------------------tela =12
{
  int x, y, z;
  int orp = setORP;
  int orpmais = offORP;
  int orpmenos = offORP;
  float linhaR;
  float linhaG;
  float linhaB;
  int j = 0;
  int i = 0;
  int k = 0;
  int soma = 0; // soma dos valores de todos os elementos
  int media = 0; // média dos valores.
  int grafico;
  int16_t n;
  char buf[6];
  int redox;


  printHeader("GRAFICO DE ORP");
  setFont(SMALL, 255, 255, 255, 0, 0, 0);
  myGLCD.print("180", 10, 180);
  myGLCD.print("210", 10, 165);
  myGLCD.print("240", 10, 150);
  myGLCD.print("270", 10, 135);
  myGLCD.print("300", 10, 120);
  myGLCD.print("330", 10, 105);
  myGLCD.print("360", 10, 90);
  myGLCD.print("390", 10, 75);
  myGLCD.print("420", 10, 60);
  myGLCD.print("450", 10, 45);
  myGLCD.print("480", 10, 30);  
  myGLCD.print("2", 50, 193);
  myGLCD.print("4", 70, 193);
  myGLCD.print("6", 90, 193);
  myGLCD.print("8", 110, 193);
  myGLCD.print("10", 125, 193);
  myGLCD.print("12", 145, 193);
  myGLCD.print("14", 165, 193);
  myGLCD.print("16", 185, 193);
  myGLCD.print("18", 205, 193);
  myGLCD.print("20", 225, 193);
  myGLCD.print("22", 245, 193);
  myGLCD.print("0", 275, 193);    
  myGLCD.print("MV", 20, 18);
  myGLCD.print("H", 290, 193);
  myGLCD.drawLine(40, 190, 290, 190);  //eixo x
  myGLCD.drawLine(40, 30, 40, 190); //eixo y

  myGLCD.setColor(64, 64, 64);                    //malha

  //EIXO X
  for(int k=40; k<180; k+=15)
  {
    myGLCD.drawLine(40, k, 290, k);
  }

  //EIXOY
  for(int l = 60; l<300; l+=20)
  {
    myGLCD.drawLine(l, 30, l, 190);
  } 

  linhaR = orp;       //  Linhas de comparacao
  linhaG =(orp + orpmais);
  linhaB = (orp - orpmenos);

  if ((linhaR >= 180) && (linhaR <= 480))
    x = (190 - ((linhaR - 180) * 0.5));

  else if (linhaR > 480)
    x = 30;

  else if (linhaR < 180)
    x = 190;

  if ((linhaG > 180) && (linhaG <= 480))
    y = (190 - ((linhaG - 180) * 0.5));

  else if (linhaG > 480)
    y = 30;

  else if (linhaG < 180)
    y = 190;

  if ((linhaB > 180) && (linhaB <= 480))
    z = (190-((linhaB - 180) * 0.5));

  else if (linhaB > 480)
    z = 30;

  else if (linhaB < 180)
    z = 190;

  myGLCD.setColor(255, 0, 0);
  myGLCD.drawLine(40, x, 290, x);//Temperatura desejada
  myGLCD.setColor(10, 10, 255);        //Variacao permitida
  myGLCD.drawLine(40, y, 290, y); //variacao mais
  myGLCD.drawLine(40, z, 290, z); //variacao menos

  printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3]); 
  printButton("MENU", menU[0], menU[1], menU[2], menU[3]);
  printButton("VOLTAR", volT[0], volT[1], volT[2], volT[3]);

  digitalWrite (4, LOW);
  file.open(&root, "LOGODIA.TXT", O_READ);
  while ((n = file.read(buf, sizeof(buf))) > 0)
  {
    redox = atoi(buf);
    soma +=redox;


    if(strlen(buf)==3)
    {
      i++;
      k++;
    }

    if (redox <= 2 )
    {
      k -= 1;
    }

    if (i==6)
    {
      media = soma / k;
      i = 0;
      j++;
      soma = 0;
      k = 0;

      if ((media) < 180)
      {
        grafico = 190;
      }
      else if ((media) > 480)
      {
        grafico = 30;
      }
      else if (180 <= media <= 480)
      {
        grafico = (190-((media - 180) * 0.5));
      }
      setFont(SMALL, 255, 0, 255, 0, 0, 0);
      myGLCD.drawPixel((40+j),grafico);
    }
  }
  file.close();
  digitalWrite (4, HIGH);
}

void PHAScreen()//-------------------------------ph do aqua-----------------------------tela =13
{
  float x, y, z;
  float ph = setPHA;
  float phmais = offPHA;
  float phmenos = offPHA;
  float linhaR;
  float linhaG;
  float linhaB;
  int j = 0;
  int i = 0;
  int k = 0;
  float soma = 0.0f; // soma dos valores de todos os elementos
  float media = 0.0f; // média dos valores.
  int grafico;
  int16_t n;
  char buf[7];
  float pht;

  printHeader("GRAFICO DE PH DO AQUARIO");
  setFont(SMALL, 255, 255, 255, 0, 0, 0);
  myGLCD.print("7,0", 10, 180);
  myGLCD.print("7,2", 10, 165);
  myGLCD.print("7,4", 10, 150);
  myGLCD.print("7,6", 10, 135);
  myGLCD.print("7,8", 10, 120);
  myGLCD.print("8,0", 10, 105);
  myGLCD.print("8,2", 10, 90);
  myGLCD.print("8,4", 10, 75);
  myGLCD.print("8,6", 10, 60);
  myGLCD.print("8,8", 10, 45);
  myGLCD.print("9,0", 10, 30);  
  myGLCD.print("2", 50, 193);
  myGLCD.print("4", 70, 193);
  myGLCD.print("6", 90, 193);
  myGLCD.print("8", 110, 193);
  myGLCD.print("10", 125, 193);
  myGLCD.print("12", 145, 193);
  myGLCD.print("14", 165, 193);
  myGLCD.print("16", 185, 193);
  myGLCD.print("18", 205, 193);
  myGLCD.print("20", 225, 193);
  myGLCD.print("22", 245, 193);
  myGLCD.print("0", 275, 193);   
  myGLCD.print("PH", 20, 18);
  myGLCD.print("H", 290, 193);

  myGLCD.drawLine(40, 30, 40, 190); //eixo y
  myGLCD.drawLine(40, 190, 290, 190);  //eixo x

  myGLCD.setColor(64, 64, 64);            //malha
  //EIXO X
  for(int k=40; k<180; k+=15)
  {
    myGLCD.drawLine(40, k, 290, k);
  }

  //EIXOY
  for(int l=60; l<300; l+=20)
  {
    myGLCD.drawLine(l, 30, l, 190);
  }

  linhaR =ph;  //  Linhas de comparacao
  linhaG =ph+phmais;
  linhaB =ph-phmenos;

  if ((linhaR>=7) && (linhaR<=9))
    x= 190-((linhaR-7)*75);

  else if (linhaR >9)
    x=30;

  else if (linhaR <7)
    x=190;

  if ((linhaG>=7) && (linhaG<=9))
    y= 190-((linhaG-7)*75);

  else if (linhaG >9)
    y=30;

  else if (linhaG <7)
    y=190;

  if ((linhaB>=7) && (linhaB<=9))
    z= 190-((linhaB-7)*75);

  else if (linhaB >9)
    z=30;

  else if (linhaB <7)
    z=190;

  myGLCD.setColor(255, 0, 0);
  myGLCD.drawLine(40, x, 290, x);//PH desejado
  myGLCD.setColor(10, 10, 255);  //Variacao permitida
  myGLCD.drawLine(40, y, 290, y); //variacao mais
  myGLCD.drawLine(40, z, 290, z); //variacao menos

  printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3],false); 
  printButton("MENU", menU[0], menU[1], menU[2], menU[3], false);
  printButton("VOLTAR", volT[0], volT[1], volT[2], volT[3],false);

  digitalWrite (4, LOW);
  file.open(&root, "LOGPDIA.TXT", O_READ);
  while ((n = file.read(buf, sizeof(buf))) > 0)
  {
    pht = atof(buf);
    soma +=pht;

    if(strlen(buf)==4)
    {
      i++;
      k++;
    }

    if (pht <= 2 )
    {
      k -= 1;
    }

    if (i==6)
    {
      media = soma / k;
      i = 0;
      j++;
      soma = 0;
      k = 0;

      if ((media) < 7)
      {
        grafico = 190;
      }
      else if ((media) > 9)
      {
        grafico = 30;
      }
      else if (7 <= media <= 9)
      {
        grafico = (190-((media-7)* 75));
      }
      setFont(SMALL, 255, 0, 255, 0, 0, 0);
      myGLCD.drawPixel((40+j),grafico);
    }
  }
  file.close();
  digitalWrite (4, HIGH);
}
void parametroScreen()//------------------------------------------------------------tela =14---------
{  
  printHeader("ESCOLHA UM PARAMETRO"); 
  printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3],false); 
  printButton("MENU", menU[0], menU[1], menU[2], menU[3],false);
  printButton("TEMPERATURA", tempG[0], tempG[1], tempG[2],tempG[3]);
  printButton("PH AQUARIO", phA[0], phA[1], phA[2], phA[3]);
  printButton("PH REATOR", phR[0], phR[1], phR[2], phR[3]);
  printButton("ORP", orP[0], orP[1], orP[2], orP[3]);
  printButton("DENSIDADE", denS[0], denS[1], denS[2], denS[3]);
  printButton("CALIBRAR SONDAS", caliB[0], caliB[1], caliB[2], caliB[3]);

}
//---------------------------------------------PH do reator--------------------------------tela =15 ----------
void config_phR_Screen(boolean refreshAll=false)
{

  if (refreshAll)
  {
    if (setPHR==0) {
      setPHR = PHR;  
    }                  //change to current temp.
    PHR2beS = setPHR;
    PHR2beO = offPHR;
    PHR2beA = alarmPHR;

    printHeader("CONTROLE DE PH DO REATOR DE CALCIO");

    setFont(SMALL, 255, 255, 255, 0, 0, 0);
    myGLCD.print("PH DESEJADO:", 110, 20);
    myGLCD.print("VARIACAO PERMITIDA:", 90, 70);
    myGLCD.print("VARIACAO PARA ACIONAR O ALARME:", 50, 120);

    printButton("-", temM[0], temM[1], temM[2], temM[3], true);      //temp minus
    printButton("+", temP[0], temP[1], temP[2], temP[3], true);      //temp plus
    printButton("-", offM[0], offM[1], offM[2], offM[3], true);      //offset minus
    printButton("+", offP[0], offP[1], offP[2], offP[3], true);      //offset plus
    printButton("-", almM[0], almM[1], almM[2], almM[3], true);      //alarm minus
    printButton("+", almP[0], almP[1], almP[2], almP[3], true);      //alarm plus

    printButton("SALVAR", prOK[0], prOK[1], prOK[2], prOK[3]);
    printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3]);
    printButton("VOLTAR", menU[0], menU[1], menU[2], menU[3]);
  }

  setFont(LARGE, 255, 255, 255, 0, 0, 0);
  myGLCD.printNumF(PHR2beS, 1, 135, 40);
  myGLCD.printNumF(PHR2beO, 1, 140, 90);
  myGLCD.printNumF(PHR2beA, 1, 140, 140);
}
//---------------------------------------------ORP--------------------------------tela =16 ----------
void config_orp_Screen(boolean refreshAll=false)
{

  if (refreshAll)
  {
    ORP2beS = setORP;
    ORP2beO = offORP;
    ORP2beA = alarmORP;

    printHeader("CONTROLE DE ORP");

    setFont(SMALL, 255, 255, 255, 0, 0, 0);
    myGLCD.print("ORP DESEJADA:", 115, 20);
    myGLCD.print("VARIACAO PERMITIDA:", 90, 70);
    myGLCD.print("VARIACAO PARA ACIONAR O ALARME:", 50, 120);

    printButton("-", temM[0], temM[1], temM[2], temM[3], true);      //temp minus
    printButton("+", temP[0], temP[1], temP[2], temP[3], true);      //temp plus
    printButton("-", offM[0], offM[1], offM[2], offM[3], true);      //offset minus
    printButton("+", offP[0], offP[1], offP[2], offP[3], true);      //offset plus
    printButton("-", almM[0], almM[1], almM[2], almM[3], true);      //alarm minus
    printButton("+", almP[0], almP[1], almP[2], almP[3], true);      //alarm plus

    printButton("SALVAR", prOK[0], prOK[1], prOK[2], prOK[3]);
    printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3]);
    printButton("VOLTAR", menU[0], menU[1], menU[2], menU[3]);
  }

  setFont(LARGE, 255, 255, 255, 0, 0, 0);
  myGLCD.printNumI(ORP2beS,145, 40);
  myGLCD.printNumI(ORP2beO,150, 90);
  myGLCD.printNumI(ORP2beA, 150, 140);
}

void PHRScreen()//----------------PH do reator --------------------------------------------tela =17
{
  float x, y, z;
  float ph = setPHR;
  float phmais = offPHR;
  float phmenos = offPHR;
  float linhaR;
  float linhaG;
  float linhaB;
  int j = 0;
  int i = 0;
  int k = 0;
  float soma = 0.0f; // soma dos valores de todos os elementos
  float media = 0.0f; // média dos valores.
  int grafico;
  int16_t n;
  char buf[7];
  float pht;

  printHeader("GRAFICO DE PH DO REATOR DE CALCIO");
  setFont(SMALL, 255, 255, 255, 0, 0, 0);
  myGLCD.print("5,4", 10, 180);
  myGLCD.print("5,6", 10, 165);
  myGLCD.print("5,8", 10, 150);
  myGLCD.print("6,0", 10, 135);
  myGLCD.print("6,2", 10, 120);
  myGLCD.print("6,4", 10, 105);
  myGLCD.print("6,6", 10, 90);
  myGLCD.print("6,8", 10, 75);
  myGLCD.print("7,0", 10, 60);
  myGLCD.print("7,2", 10, 45);
  myGLCD.print("7,4", 10, 30);  
  myGLCD.print("2", 50, 193);
  myGLCD.print("4", 70, 193);
  myGLCD.print("6", 90, 193);
  myGLCD.print("8", 110, 193);
  myGLCD.print("10", 125, 193);
  myGLCD.print("12", 145, 193);
  myGLCD.print("14", 165, 193);
  myGLCD.print("16", 185, 193);
  myGLCD.print("18", 205, 193);
  myGLCD.print("20", 225, 193);
  myGLCD.print("22", 245, 193);
  myGLCD.print("0", 275, 193);   
  myGLCD.print("PH", 20, 18);
  myGLCD.print("H", 290, 193);

  myGLCD.drawLine(40, 30, 40, 190); //eixo y
  myGLCD.drawLine(40, 190, 290, 190);  //eixo x

  myGLCD.setColor(64, 64, 64);            //malha

  //EIXO X
  for(int k=40; k<180; k+=15)
  {
    myGLCD.drawLine(40, k, 290, k);
  }

  //EIXOY
  for(int l=60; l<300; l+=20)
  {
    myGLCD.drawLine(l, 30, l, 190);
  }

  linhaR =ph;  //  Linhas de comparacao
  linhaG =ph+phmais;
  linhaB =ph-phmenos;

  if ((linhaR>=5.4) && (linhaR<=7.4))
    x= 190-((linhaR-5.4)*75);

  else if (linhaR >7.4)
    x=30;

  else if (linhaR <5.4)
    x=190;

  if ((linhaG>=5.4) && (linhaG<=7.4))
    y= 190-((linhaG-5.4)*75);

  else if (linhaG >7.4)
    y=30;

  else if (linhaG <5.4)
    y=190;

  if ((linhaB>=5.4) && (linhaB<=7.4))
    z= 190-((linhaB-5.4)*75);

  else if (linhaB >7.4)
    z=30;

  else if (linhaB <5.4)
    z=190;

  myGLCD.setColor(255, 0, 0);
  myGLCD.drawLine(40, x, 290, x);//PH desejado
  myGLCD.setColor(10, 10, 255);  //Variacao permitida
  myGLCD.drawLine(40, y, 290, y); //variacao mais
  myGLCD.drawLine(40, z, 290, z); //variacao menos

  printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3],false); 
  printButton("MENU", menU[0], menU[1], menU[2], menU[3], false);
  printButton("VOLTAR", volT[0], volT[1], volT[2], volT[3],false);

  digitalWrite (4, LOW);
  file.open(&root, "LOGRDIA.TXT", O_READ);
  while ((n = file.read(buf, sizeof(buf))) > 0)
  {
    pht = atof(buf);
    soma +=pht;

    if(strlen(buf)==4)
    {
      i++;
      k++;
    }
    if (pht <= 2 )
    {
      k -= 1;
    }
    if (i==6)
    {
      media = soma / k;
      i = 0;
      j++;
      soma = 0;
      k = 0;

      if ((media) < 5.4)
      {
        grafico = 190;
      }
      else if ((media) > 7.4)
      {
        grafico = 30;
      }
      else if ( 5.4 <= media <= 7.4)
      {
        grafico = (190-((media-5.4)* 75));
      }
      setFont(SMALL, 255, 0, 255, 0, 0, 0);
      myGLCD.drawPixel((40+j),grafico);
    }
  }
  file.close();
  digitalWrite (4, HIGH);
}

//---------------------------------------------PH do aquario--------------------------------tela =18 ----------

void config_phA_Screen(boolean refreshAll=false)
{

  if (refreshAll)
  {
    if (setPHA==0) {
      setPHA = PHA;  
    }                  //change to current temp.
    PHA2beS = setPHA;
    PHA2beO = offPHA;
    PHA2beA = alarmPHA;

    printHeader("CONTROLE DE PH DO AQUARIO");

    setFont(SMALL, 255, 255, 255, 0, 0, 0);
    myGLCD.print("PH DESEJADO:", 110, 20);
    myGLCD.print("VARIACAO PERMITIDA:", 90, 70);
    myGLCD.print("VARIACAO PARA ACIONAR O ALARME:", 50, 120);
    myGLCD.print("NAO HA FUNCAO DE CONTROLE", 25, 170);
    myGLCD.print("ATRIBUIDADA PARA ESTE PARAMETRO", 25, 185);
    myGLCD.print("ESSES VALORES SAO APENAS ", 25, 200);
    myGLCD.print("REFERENCIA PARA O GRAFICO.", 25, 215);

    printButton("-", temM[0], temM[1], temM[2], temM[3], true);      //temp minus
    printButton("+", temP[0], temP[1], temP[2], temP[3], true);      //temp plus
    printButton("-", offM[0], offM[1], offM[2], offM[3], true);      //offset minus
    printButton("+", offP[0], offP[1], offP[2], offP[3], true);      //offset plus
    printButton("-", almM[0], almM[1], almM[2], almM[3], true);      //alarm minus
    printButton("+", almP[0], almP[1], almP[2], almP[3], true);      //alarm plus

    printButton("SALVAR", prOK[0], prOK[1], prOK[2], prOK[3]);
    printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3]);
    printButton("VOLTAR", menU[0], menU[1], menU[2], menU[3]);
  }

  setFont(LARGE, 255, 255, 255, 0, 0, 0); 
  myGLCD.printNumF(PHA2beS, 1, 135, 40);
  myGLCD.printNumF(PHA2beO, 1, 140, 90);
  myGLCD.printNumF(PHA2beA, 1, 140, 140);
}

void densidadeScreen()//----------------grafico de densidade --------------------------------------------tela =19
{
  float x, y, z;
  float dens = setDEN;
  float densmais = offDEN;
  float densmenos = offDEN;
  int w = 10;
  float linhaR;
  float linhaG;
  float linhaB;
  int j = 0;
  int i = 0;
  int k = 0;
  int soma = 0; // soma dos valores de todos os elementos
  int media = 0; // média dos valores.
  int grafico;
  int16_t n;
  char buf[10];
  int densidade;


  printHeader("GRAFICO DE DENSIDADE");
  setFont(SMALL, 255, 255, 255, 0, 0, 0);
  myGLCD.print("1010", 10, 180);
  myGLCD.print("1012", 10, 165);
  myGLCD.print("1014", 10, 150);
  myGLCD.print("1016", 10, 135);
  myGLCD.print("1018", 10, 120);
  myGLCD.print("1020", 10, 105);
  myGLCD.print("1022", 10, 90);
  myGLCD.print("1024", 10, 75);
  myGLCD.print("1026", 10, 60);
  myGLCD.print("1028", 10, 45);
  myGLCD.print("1030", 10, 30);  
  myGLCD.print("2", 50+w, 193);
  myGLCD.print("4", 70+w, 193);
  myGLCD.print("6", 90+w, 193);
  myGLCD.print("8", 110+w, 193);
  myGLCD.print("10", 125+w, 193);
  myGLCD.print("12", 145+w, 193);
  myGLCD.print("14", 165+w, 193);
  myGLCD.print("16", 185+w, 193);
  myGLCD.print("18", 205+w, 193);
  myGLCD.print("20", 225+w, 193);
  myGLCD.print("22", 245+w, 193);
  myGLCD.print("0", 275+w, 193);   
  myGLCD.print("PH", 20, 18);
  myGLCD.print("H", 290+w, 193);

  myGLCD.drawLine(40+w, 30, 40+w, 190); //eixo y
  myGLCD.drawLine(40+w, 190, 290+w, 190);  //eixo x
  //EIXO X
  myGLCD.setColor(64, 64, 64);            //malha

  //EIXO X
  for(int k=40; k<180; k+=15)
  {
    myGLCD.drawLine(40+w, k, 290+w, k);
  }

  //EIXOY
  for(int l=60; l<300; l+=20)
  {
    myGLCD.drawLine(l+w, 30, l+w, 190);
  }


  linhaR =dens;  //  Linhas de comparacao
  linhaG =dens+densmais;
  linhaB =dens-densmenos;

  if ((linhaR>=1010) && (linhaR<=1030))
    x= 190-((linhaR-1010)*7.5);

  else if (linhaR >1030)
    x=30;

  else if (linhaR <1010)
    x=190;

  if ((linhaG>=1010) && (linhaG<=1030))
    y= 190-((linhaG-1010)*7.5);

  else if (linhaG >1030)
    y=30;

  else if (linhaG <1010)
    y=190;

  if ((linhaB>=1010) && (linhaB<=1030))
    z= 190-((linhaB-1010)*7.5);

  else if (linhaB >1030)
    z=30;

  else if (linhaB <1010)
    z=190;

  myGLCD.setColor(255, 0, 0);
  myGLCD.drawLine(40+w, x, 290+w, x);//PH desejado
  myGLCD.setColor(10, 10, 255);  //Variacao permitida
  myGLCD.drawLine(40+w, y, 290+w, y); //variacao mais
  myGLCD.drawLine(40+w, z, 290+w, z); //variacao menos

  printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3],false); 
  printButton("MENU", menU[0], menU[1], menU[2], menU[3], false);
  printButton("VOLTAR", volT[0], volT[1], volT[2], volT[3],false);

  digitalWrite (4, LOW);
  file.open(&root, "LOGDDIA.TXT", O_READ);
  while ((n = file.read(buf, sizeof(buf))) > 0)
  {
    densidade = atof(buf);
    soma +=densidade;

    if(strlen(buf)==4)
    {
      i++;
      k++;
    }
    if (densidade <= 2 )
    {
      k -= 1;
    }
    if (i==6)
    {
      media = soma / k;
      i = 0;
      j++;
      soma = 0;
      k = 0;

      if ((media) < 1010)
      {
        grafico = 190;
      }
      else if ((media) > 1030)
      {
        grafico = 30;
      }
      else if (1010 <= media <= 1030)
      {
        grafico = (190-((media-1010)*7.5));
      }
      setFont(SMALL, 255, 0, 255, 0, 0, 0);
      myGLCD.drawPixel((40+w+j),grafico);
    }
  }
  file.close();
  digitalWrite (4, HIGH);
}
//---------------------------------------------configurar densidade--------------------------------tela =20 ----------

void config_dens_Screen(boolean refreshAll=false)
{

  if (refreshAll)
  {
    DEN2beS = setDEN;
    DEN2beO = offDEN;
    DEN2beA = alarmDEN;

    printHeader("CONTROLE DE DENSIDADE");

    setFont(SMALL, 255, 255, 255, 0, 0, 0);
    myGLCD.print("DENSIDADE DESEJADA:", 90, 20);
    myGLCD.print("VARIACAO PERMITIDA:", 90, 70);
    myGLCD.print("VARIACAO PARA ACIONAR O ALARME:", 50, 120);
    myGLCD.print("NAO HA FUNCAO DE CONTROLE", 25, 170);
    myGLCD.print("ATRIBUIDA PARA ESTE PARAMETRO", 25, 185);
    myGLCD.print("ESSES VALORES SAO APENAS", 25, 200);
    myGLCD.print("REFERENCIA PARA O GRAFICO.", 25, 215);

    printButton("-", temM[0], temM[1], temM[2], temM[3], true);      //temp minus
    printButton("+", temP[0], temP[1], temP[2], temP[3], true);      //temp plus
    printButton("-", offM[0], offM[1], offM[2], offM[3], true);      //offset minus
    printButton("+", offP[0], offP[1], offP[2], offP[3], true);      //offset plus
    printButton("-", almM[0], almM[1], almM[2], almM[3], true);      //alarm minus
    printButton("+", almP[0], almP[1], almP[2], almP[3], true);      //alarm plus

    printButton("SALVAR", prOK[0], prOK[1], prOK[2], prOK[3]);
    printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3]);
    printButton("VOLTAR", menU[0], menU[1], menU[2], menU[3]);
  }

  setFont(LARGE, 255, 255, 255, 0, 0, 0); 
  myGLCD.printNumI(DEN2beS, 128, 40);
  myGLCD.printNumI(DEN2beO, 150, 90);
  myGLCD.printNumI(DEN2beA, 150, 140);
}

void selecionar_dosadora(boolean refreshAll=false)//---------------------------------------------tela =21
{
  printHeader("ESCOLHA UMA DOSADORA");
  printButton("DOSADORA 1", dosa1[0], dosa1[1], dosa1[2], dosa1[3]);
  printButton("DOSADORA 2", dosa2[0], dosa2[1], dosa2[2], dosa2[3]);
  printButton("DOSADORA 3", dosa3[0], dosa3[1], dosa3[2], dosa3[3]);
  printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3]);
  printButton("MENU", menU[0], menU[1], menU[2], menU[3]);
  printButton("VOLTAR", volT[0], volT[1], volT[2], volT[3]);  
}
//---------------------------------------- Bomba dosadora 1 ---------------------- tela =22


//---------------------------------------- Bomba dosadora 2 ---------------------- tela =23

//---------------------------------------- Bomba dosadora 3 ---------------------- tela =24

//---------------------------------------- Bomba dosadora 4 ---------------------- tela =25

//---------------------------------------- Calibrar dosadoras ---------------------- tela =26 
void calibrar_dosadoras(boolean refreshAll=false)
{
  if(refreshAll)
  {
    fator_calib_dosadora_1_temp2 = fator_calib_dosadora_1;
    fator_calib_dosadora_2_temp2 = fator_calib_dosadora_2;
    fator_calib_dosadora_3_temp2 = fator_calib_dosadora_3;

    printHeader("CALIBRAR DOSADORA");
    printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3]);
    printButton("VOLTAR", volT[0], volT[1], volT[2], volT[3]);
    printButton("SALVAR", salV[0], salV[1], salV[2], salV[3]);
    printButton("INICIAR", iniciaR[0], iniciaR[1], iniciaR[2], iniciaR[3]);
    printButton("-", almM[0], almM[1], almM[2], almM[3], true);      //alarm minus
    printButton("+", almP[0], almP[1], almP[2], almP[3], true);      //alarm plus  
    myGLCD.setColor(255, 255, 255);
    myGLCD.drawRect(20, 50, 310, 125);
    setFont(SMALL, 255, 255, 255, 0, 0, 0);
    myGLCD.print("COLOQUE O RECIPIENTE SOB O BICO", 30, 55);
    myGLCD.print("DOSADOR E CLIQUE EM INICIAR.", 30, 70);  
    myGLCD.print("EM SEGUIDA INSIRA O VALOR OBTIDO", 30, 85);
    myGLCD.print("EM ML NO CAMPO ABAIXO.", 30, 100);
    myGLCD.print("PARA MELHORES RESULTADOS REPITA O TESTE", 5, 165);
    myGLCD.print("ALGUMAS VEZES E USE UMA MEDIA.", 35, 177);
  }
  myGLCD.setColor(0, 0, 0);
  myGLCD.fillRect(117, 135, 203, 160);

  if((modo_calibrar == true) && (dosadora_1_selecionada == true))
  {
    setFont(LARGE, 255, 255, 255, 0, 0, 0);
    myGLCD.printNumF(fator_calib_dosadora_1_temp2,1, 130, 140);
    setFont(SMALL, 255, 255, 255, 0, 0, 0);
    myGLCD.print("DOSADORA 1 SELECIONADA", 80, 30);
  }

  if((modo_calibrar == true) && (dosadora_2_selecionada == true))
  {
    setFont(LARGE, 255, 255, 255, 0, 0, 0);
    myGLCD.printNumF(fator_calib_dosadora_2_temp2,1, 130, 140);  
    setFont(SMALL, 255, 255, 255, 0, 0, 0);
    myGLCD.print("DOSADORA 2 SELECIONADA", 80, 30);
  }

  if((modo_calibrar == true) && (dosadora_3_selecionada == true))
  {
    setFont(LARGE, 255, 255, 255, 0, 0, 0);
    myGLCD.printNumF(fator_calib_dosadora_3_temp2,1, 130, 140);
    setFont(SMALL, 255, 255, 255, 0, 0, 0);
    myGLCD.print("DOSADORA 3 SELECIONADA", 80, 30);
  } 
}

void config_dosagem_manual(boolean refreshAll=false) // ----------tela =27
{
  if(refreshAll)
  {
    printHeader("DOSAGEM MANUAL");
    printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3]);
    printButton("VOLTAR", volT[0], volT[1], volT[2], volT[3]);
    printButton("INICIAR", iniciaR[0], iniciaR[1], iniciaR[2], iniciaR[3]);
    printButton("-", almM[0], almM[1], almM[2], almM[3], true);      //alarm minus
    printButton("+", almP[0], almP[1], almP[2], almP[3], true);      //alarm plus  
    myGLCD.setColor(255, 255, 255);
    myGLCD.drawRect(20, 50, 310, 125);
    setFont(SMALL, 255, 255, 255, 0, 0, 0);
    myGLCD.print("SELECIONE O VOLUME A SER DOSADO", 30, 55);
    myGLCD.print("EM ML NO CAMPO ABAIXO  E", 30, 70);  
    myGLCD.print("EM SEGUIDA TOQUE EM INICIAR.", 30, 85);
    myGLCD.print("A DOSAGEM INICIARA EM 10 SEGUNDOS", 30, 100);
  }
  myGLCD.setColor(0, 0, 0);
  myGLCD.fillRect(117, 135, 203, 160);

  if((modo_manual == true) && (dosadora_1_selecionada == true))
  {
    setFont(LARGE, 255, 255, 255, 0, 0, 0);
    myGLCD.printNumF(dose_dosadora_1_manual,1, 130, 140);
    setFont(SMALL, 255, 255, 255, 0, 0, 0);
    myGLCD.print("DOSADORA 1 SELECIONADA", 80, 30);
  }

  if((modo_manual == true) && (dosadora_2_selecionada == true))
  {
    setFont(LARGE, 255, 255, 255, 0, 0, 0);
    myGLCD.printNumF(dose_dosadora_2_manual,1, 130, 140);  
    setFont(SMALL, 255, 255, 255, 0, 0, 0);
    myGLCD.print("DOSADORA 2 SELECIONADA", 80, 30);
  }

  if((modo_manual == true) && (dosadora_3_selecionada == true))
  {
    setFont(LARGE, 255, 255, 255, 0, 0, 0);
    myGLCD.printNumF(dose_dosadora_3_manual,1, 130, 140);
    setFont(SMALL, 255, 255, 255, 0, 0, 0);
    myGLCD.print("DOSADORA 3 SELECIONADA", 80, 30);
  } 
}

void config_dosagem_automatica(boolean refreshAll=false) // ----------tela =28
{
  if(refreshAll)
  { 
    hora_inicial_dosagem_automatica_1_temp2 = hora_inicial_dosagem_automatica_1;
    minuto_inicial_dosagem_automatica_1_temp2 = minuto_inicial_dosagem_automatica_1;
    hora_final_dosagem_automatica_1_temp2 = hora_final_dosagem_automatica_1;
    minuto_final_dosagem_automatica_1_temp2 = minuto_final_dosagem_automatica_1;
    hora_inicial_dosagem_automatica_2_temp2 = hora_inicial_dosagem_automatica_2;
    minuto_inicial_dosagem_automatica_2_temp2 = minuto_inicial_dosagem_automatica_2;
    hora_final_dosagem_automatica_2_temp2 = hora_final_dosagem_automatica_2;
    minuto_final_dosagem_automatica_2_temp2 = minuto_final_dosagem_automatica_2;
    hora_inicial_dosagem_automatica_3_temp2 = hora_inicial_dosagem_automatica_3;
    minuto_inicial_dosagem_automatica_3_temp2 = minuto_inicial_dosagem_automatica_3;
    hora_final_dosagem_automatica_3_temp2 = hora_final_dosagem_automatica_3;
    minuto_final_dosagem_automatica_3_temp2 = minuto_final_dosagem_automatica_3;
    dose_dosadora_1_automatica_temp2 = dose_dosadora_1_automatica;
    dose_dosadora_2_automatica_temp2 = dose_dosadora_2_automatica;
    dose_dosadora_3_automatica_temp2 = dose_dosadora_3_automatica;
    quantidade_dose_dosadora_1_automatica_temp2 = quantidade_dose_dosadora_1_automatica;
    quantidade_dose_dosadora_2_automatica_temp2 = quantidade_dose_dosadora_2_automatica;
    quantidade_dose_dosadora_3_automatica_temp2 = quantidade_dose_dosadora_3_automatica;
    modo_automatico_on_1_temp2 = modo_automatico_on_1;
    modo_automatico_on_2_temp2 = modo_automatico_on_2;
    modo_automatico_on_3_temp2 = modo_automatico_on_3;
  }
  printHeader("CONFIGURAR DOSAGEM AUTOMATICA");

  printButton("+", houU[0], houU[1], houU[2], houU[3], true); //hour up
  printButton("-", houD[0], houD[1], houD[2], houD[3], true); //hour down
  printButton("+", minUT[0], minUT[1], minUT[2], minUT[3], true); //min up
  printButton("-", minDT[0], minDT[1], minDT[2], minDT[3], true); //min down
  printButton("+", houU[0]+deslocamento_botao_x, houU[1], houU[2]+deslocamento_botao_x, houU[3], true); //hora mais
  printButton("-", houD[0]+deslocamento_botao_x, houD[1], houD[2]+deslocamento_botao_x, houD[3], true); //hora menos
  printButton("+", minUT[0]+deslocamento_botao_x, minUT[1], minUT[2]+deslocamento_botao_x, minUT[3], true); //minuto mais
  printButton("-", minDT[0]+deslocamento_botao_x, minDT[1], minDT[2]+deslocamento_botao_x, minDT[3], true); //minuto menos
  printButton("+", minUT[0], minUT[1]+deslocamento_botao_y, minUT[2], minUT[3]+deslocamento_botao_y, true); //min up
  printButton("-", minDT[0], minDT[1]+deslocamento_botao_y, minDT[2], minDT[3]+deslocamento_botao_y, true); //min down
  printButton("+", durC[0], durC[1]+deslocamento_botao_y, durC[2], durC[3]+deslocamento_botao_y, true); //minuto mais
  printButton("-", durB[0], durB[1]+deslocamento_botao_y, durB[2], durB[3]+deslocamento_botao_y, true); //minuto menos

  printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3]);
  printButton("VOLTAR", volT[0], volT[1], volT[2], volT[3]);
  printButton("SALVAR", salV[0], salV[1], salV[2], salV[3]);

  setFont(LARGE, 255, 255, 255, 0, 0, 0);
  myGLCD.print(":", 105, 48);
  myGLCD.print(":", 105 + deslocamento_botao_x, 48);
  myGLCD.setFont(SmallFont);
  myGLCD.print("INICIAL:", 5, 51);
  myGLCD.print("FINAL:", 172, 51);
  myGLCD.print("SELECIONE O", 10, 31 + deslocamento_botao_y);
  myGLCD.print("VOLUME ", 10, 55 + deslocamento_botao_y);
  myGLCD.print("(ML/DIA):", 10, 75 + deslocamento_botao_y);
  myGLCD.print("QUANTIDADE", 190, 46 + deslocamento_botao_y);
  myGLCD.print("DE DOSES:", 190, 61 + deslocamento_botao_y);

  if(dosadora_1_selecionada == true)
  {
    setFont(LARGE, 255, 255, 255, 0, 0, 0);
    if (hora_inicial_dosagem_automatica_1_temp2 < 10) {
      myGLCD.printNumI(0, 70, 48);
      myGLCD.printNumI(hora_inicial_dosagem_automatica_1_temp2, 86, 48);
    } 
    else {
      myGLCD.printNumI(hora_inicial_dosagem_automatica_1_temp2, 70, 48);
    }

    if (minuto_inicial_dosagem_automatica_1_temp2 < 10) {
      myGLCD.printNumI(0, 120, 48);
      myGLCD.printNumI(minuto_inicial_dosagem_automatica_1_temp2, 136, 48);
    } 
    else {
      myGLCD.printNumI(minuto_inicial_dosagem_automatica_1_temp2, 120, 48);
    }
    if (hora_final_dosagem_automatica_1_temp2 < 10) {
      myGLCD.printNumI(0, 70 + deslocamento_botao_x, 48);
      myGLCD.printNumI(hora_final_dosagem_automatica_1_temp2, 86 + deslocamento_botao_x, 48);
    } 
    else {
      myGLCD.printNumI(hora_final_dosagem_automatica_1_temp2, 70 + deslocamento_botao_x, 48);
    }

    if (minuto_final_dosagem_automatica_1_temp2 < 10) {
      myGLCD.printNumI(0, 120 + deslocamento_botao_x, 48);
      myGLCD.printNumI(minuto_final_dosagem_automatica_1_temp2, 136 + deslocamento_botao_x, 48);
    } 
    else {
      myGLCD.printNumI(minuto_final_dosagem_automatica_1_temp2, 120 + deslocamento_botao_x, 48);
    }

    setFont(LARGE, 255, 255, 255, 0, 0, 0);

    myGLCD.printNumF(dose_dosadora_1_automatica_temp2, 1, 100, 48 + deslocamento_botao_y);

    if (quantidade_dose_dosadora_1_automatica_temp2 < 10) 
    {
      myGLCD.printNumI(0, 275, 48 + deslocamento_botao_y);
      myGLCD.printNumI(quantidade_dose_dosadora_1_automatica_temp2, 291, 48 + deslocamento_botao_y);
    } 
    else 
    {
      myGLCD.printNumI(quantidade_dose_dosadora_1_automatica_temp2, 275, 48 + deslocamento_botao_y);
    }
    setFont(SMALL, 255, 255, 255, 0, 0, 0);
    myGLCD.print("DOSADORA 1", 10, 198);
    myGLCD.print("SELECIONADA", 10, 218);

    if (modo_automatico_on_1_temp2 == 1) 
    {
      printButton_verde("ON", domI[0], domI[1], domI[2], domI[3]); 
    } 
    else 
    {
      printButton("OFF", domI[0], domI[1], domI[2], domI[3]); 
    }
  }
  if(dosadora_2_selecionada == true)
  {
    setFont(LARGE, 255, 255, 255, 0, 0, 0);

    if (hora_inicial_dosagem_automatica_2_temp2 < 10) {
      myGLCD.printNumI(0, 70, 48);
      myGLCD.printNumI(hora_inicial_dosagem_automatica_2_temp2, 86, 48);
    } 
    else {
      myGLCD.printNumI(hora_inicial_dosagem_automatica_2_temp2, 70, 48);
    }

    if (minuto_inicial_dosagem_automatica_2_temp2 < 10) {
      myGLCD.printNumI(0, 120, 48);
      myGLCD.printNumI(minuto_inicial_dosagem_automatica_2_temp2, 136, 48);
    } 
    else {
      myGLCD.printNumI(minuto_inicial_dosagem_automatica_2_temp2, 120, 48);
    }
    if (hora_final_dosagem_automatica_2_temp2 < 10) {
      myGLCD.printNumI(0, 70 + deslocamento_botao_x, 48);
      myGLCD.printNumI(hora_final_dosagem_automatica_2_temp2, 86 + deslocamento_botao_x, 48);
    } 
    else {
      myGLCD.printNumI(hora_final_dosagem_automatica_2_temp2, 70 + deslocamento_botao_x, 48);
    }

    if (minuto_final_dosagem_automatica_2_temp2 < 10) {
      myGLCD.printNumI(0, 120 + deslocamento_botao_x, 48);
      myGLCD.printNumI(minuto_final_dosagem_automatica_2_temp2, 136 + deslocamento_botao_x, 48);
    } 
    else {
      myGLCD.printNumI(minuto_final_dosagem_automatica_2_temp2, 120 + deslocamento_botao_x, 48);
    }
    setFont(LARGE, 255, 255, 255, 0, 0, 0);

    myGLCD.printNumF(dose_dosadora_2_automatica_temp2, 1, 100, 48 + deslocamento_botao_y);

    if (quantidade_dose_dosadora_2_automatica_temp2 < 10) 
    {
      myGLCD.printNumI(0, 275, 48 + deslocamento_botao_y);
      myGLCD.printNumI(quantidade_dose_dosadora_2_automatica_temp2, 291, 48 + deslocamento_botao_y);
    } 
    else 
    {
      myGLCD.printNumI(quantidade_dose_dosadora_2_automatica_temp2, 275, 48 + deslocamento_botao_y);
    }
    setFont(SMALL, 255, 255, 255, 0, 0, 0);
    myGLCD.print("DOSADORA 2", 10, 198);
    myGLCD.print("SELECIONADA", 10, 218);

    if (modo_automatico_on_2_temp2 == 1) 
    {
      printButton_verde("ON", domI[0], domI[1], domI[2], domI[3]); 
    } 
    else 
    {
      printButton("OFF", domI[0], domI[1], domI[2], domI[3]); 
    }
  }
  if(dosadora_3_selecionada == true)
  {
    setFont(LARGE, 255, 255, 255, 0, 0, 0);

    if (hora_inicial_dosagem_automatica_3_temp2 < 10) {
      myGLCD.printNumI(0, 70, 48);
      myGLCD.printNumI(hora_inicial_dosagem_automatica_3_temp2, 86, 48);
    } 
    else {
      myGLCD.printNumI(hora_inicial_dosagem_automatica_3_temp2, 70, 48);
    }

    if (minuto_inicial_dosagem_automatica_3_temp2 < 10) {
      myGLCD.printNumI(0, 120, 48);
      myGLCD.printNumI(minuto_inicial_dosagem_automatica_3_temp2, 136, 48);
    } 
    else {
      myGLCD.printNumI(minuto_inicial_dosagem_automatica_3_temp2, 120, 48);
    }
    if (hora_final_dosagem_automatica_3_temp2 < 10) {
      myGLCD.printNumI(0, 70 + deslocamento_botao_x, 48);
      myGLCD.printNumI(hora_final_dosagem_automatica_3_temp2, 86 + deslocamento_botao_x, 48);
    } 
    else {
      myGLCD.printNumI(hora_final_dosagem_automatica_3_temp2, 70 + deslocamento_botao_x, 48);
    }

    if (minuto_final_dosagem_automatica_3_temp2 < 10) {
      myGLCD.printNumI(0, 120 + deslocamento_botao_x, 48);
      myGLCD.printNumI(minuto_final_dosagem_automatica_3_temp2, 136 + deslocamento_botao_x, 48);
    } 
    else {
      myGLCD.printNumI(minuto_final_dosagem_automatica_3_temp2, 120 + deslocamento_botao_x, 48);
    }
    setFont(LARGE, 255, 255, 255, 0, 0, 0);

    myGLCD.printNumF(dose_dosadora_3_automatica_temp2, 1, 100, 48 + deslocamento_botao_y);

    if (quantidade_dose_dosadora_3_automatica_temp2 < 10) 
    {
      myGLCD.printNumI(0, 275, 48 + deslocamento_botao_y);
      myGLCD.printNumI(quantidade_dose_dosadora_3_automatica_temp2, 291, 48 + deslocamento_botao_y);
    } 
    else 
    {
      myGLCD.printNumI(quantidade_dose_dosadora_3_automatica_temp2, 275, 48 + deslocamento_botao_y);
    }
    setFont(SMALL, 255, 255, 255, 0, 0, 0);
    myGLCD.print("DOSADORA 3", 10, 198);
    myGLCD.print("SELECIONADA", 10, 218);

    if (modo_automatico_on_3_temp2 == 1) 
    {
      printButton_verde("ON", domI[0], domI[1], domI[2], domI[3]); 
    } 
    else 
    {
      printButton("OFF", domI[0], domI[1], domI[2], domI[3]); 
    }
  }  
  myGLCD.setColor(0, 0, 0);                      
  myGLCD.fillRect(205, 195, 310, 239);
}

void config_dosagem_personalizada(boolean refreshAll=false) // ----------tela =29
{
  if(refreshAll)
  {   

    temp2hora_inicial_dosagem_personalizada_1 = hora_inicial_dosagem_personalizada_1;
    temp2minuto_inicial_dosagem_personalizada_1 = minuto_inicial_dosagem_personalizada_1;
    temp2hora_final_dosagem_personalizada_1 = hora_final_dosagem_personalizada_1;
    temp2minuto_final_dosagem_personalizada_1 = minuto_final_dosagem_personalizada_1;
    temp2segunda_dosagem_personalizada_1 = segunda_dosagem_personalizada_1;
    temp2terca_dosagem_personalizada_1 = terca_dosagem_personalizada_1;
    temp2quarta_dosagem_personalizada_1 = quarta_dosagem_personalizada_1;
    temp2quinta_dosagem_personalizada_1 = quinta_dosagem_personalizada_1;
    temp2sexta_dosagem_personalizada_1 = sexta_dosagem_personalizada_1;
    temp2sabado_dosagem_personalizada_1 = sabado_dosagem_personalizada_1;
    temp2domingo_dosagem_personalizada_1 = domingo_dosagem_personalizada_1;
    temp2hora_inicial_dosagem_personalizada_2 = hora_inicial_dosagem_personalizada_2;
    temp2minuto_inicial_dosagem_personalizada_2 = minuto_inicial_dosagem_personalizada_2;
    temp2hora_final_dosagem_personalizada_2 = hora_final_dosagem_personalizada_2;
    temp2minuto_final_dosagem_personalizada_2 = minuto_final_dosagem_personalizada_2;
    temp2segunda_dosagem_personalizada_2 = segunda_dosagem_personalizada_2;
    temp2terca_dosagem_personalizada_2 = terca_dosagem_personalizada_2;
    temp2quarta_dosagem_personalizada_2 = quarta_dosagem_personalizada_2;
    temp2quinta_dosagem_personalizada_2 = quinta_dosagem_personalizada_2;
    temp2sexta_dosagem_personalizada_2 = sexta_dosagem_personalizada_2;
    temp2sabado_dosagem_personalizada_2 = sabado_dosagem_personalizada_2;
    temp2domingo_dosagem_personalizada_2 = domingo_dosagem_personalizada_2;
    temp2hora_inicial_dosagem_personalizada_3 = hora_inicial_dosagem_personalizada_3;
    temp2minuto_inicial_dosagem_personalizada_3 = minuto_inicial_dosagem_personalizada_3;
    temp2hora_final_dosagem_personalizada_3 = hora_final_dosagem_personalizada_3;
    temp2minuto_final_dosagem_personalizada_3 = minuto_final_dosagem_personalizada_3;
    temp2segunda_dosagem_personalizada_3 = segunda_dosagem_personalizada_3;
    temp2terca_dosagem_personalizada_3 = terca_dosagem_personalizada_3;
    temp2quarta_dosagem_personalizada_3 = quarta_dosagem_personalizada_3;
    temp2quinta_dosagem_personalizada_3 = quinta_dosagem_personalizada_3;
    temp2sexta_dosagem_personalizada_3 = sexta_dosagem_personalizada_3;
    temp2sabado_dosagem_personalizada_3 = sabado_dosagem_personalizada_3;
    temp2domingo_dosagem_personalizada_3 = domingo_dosagem_personalizada_3;

  }
  printHeader("CONFIGURAR DOSAGEM PERSONALIZADA");

  printButton("+", houU[0], houU[1], houU[2], houU[3], true); //hour up
  printButton("-", houD[0], houD[1], houD[2], houD[3], true); //hour down
  printButton("+", minUT[0], minUT[1], minUT[2], minUT[3], true); //min up
  printButton("-", minDT[0], minDT[1], minDT[2], minDT[3], true); //min down
  printButton("+", houU[0]+deslocamento_botao_x, houU[1], houU[2]+deslocamento_botao_x, houU[3], true); //hora mais
  printButton("-", houD[0]+deslocamento_botao_x, houD[1], houD[2]+deslocamento_botao_x, houD[3], true); //hora menos
  printButton("+", minUT[0]+deslocamento_botao_x, minUT[1], minUT[2]+deslocamento_botao_x, minUT[3], true); //minuto mais
  printButton("-", minDT[0]+deslocamento_botao_x, minDT[1], minDT[2]+deslocamento_botao_x, minDT[3], true); //minuto menos

  setFont(LARGE, 255, 255, 255, 0, 0, 0);
  myGLCD.print(":", 105, 48);
  myGLCD.print(":", 105 + deslocamento_botao_x, 48);
  myGLCD.setFont(SmallFont);
  myGLCD.print("INICIAL:", 5, 51);
  myGLCD.print("FINAL:", 172, 51);
  printButton("PROXIMO", proX[0], proX[1], proX[2], proX[3]); 
  printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3]);
  printButton("MENU", menU[0], menU[1], menU[2], menU[3]);
  printButton("VOLTAR", volT[0], volT[1], volT[2], volT[3]);

  if(dosadora_1_selecionada == true)
  {
    setFont(SMALL, 255, 255, 255, 0, 0, 0);
    myGLCD.print("DOSADORA 1", 10, 198);
    myGLCD.print("SELECIONADA", 10, 218);

    if (temp2segunda_dosagem_personalizada_1 == 1) {
      printButton_verde("SEGUNDA", segU[0], segU[1], segU[2], segU[3]); //botao segunda
    } 
    else {
      printButton("SEGUNDA", segU[0], segU[1], segU[2], segU[3]); //botao segunda
    }
    if (temp2terca_dosagem_personalizada_1 == 2) {
      printButton_verde("TERCA", terC[0], terC[1], terC[2], terC[3]); //botao terca
    } 
    else {
      printButton("TERCA", terC[0], terC[1], terC[2], terC[3]); //botao terca
    }
    if (temp2quarta_dosagem_personalizada_1 == 3) {
      printButton_verde("QUARTA", quaR[0], quaR[1], quaR[2], quaR[3]); //botao quarta
    } 
    else {
      printButton("QUARTA", quaR[0], quaR[1], quaR[2], quaR[3]); //botao quarta
    }
    if (temp2quinta_dosagem_personalizada_1 == 4) {
      printButton_verde("QUINTA", quiN[0], quiN[1], quiN[2], quiN[3]); //botao quinta
    } 
    else {
      printButton("QUINTA", quiN[0], quiN[1], quiN[2], quiN[3]); //botao quinta
    }
    if (temp2sexta_dosagem_personalizada_1 == 5) {
      printButton_verde("SEXTA", sexT[0], sexT[1], sexT[2], sexT[3]); //botao sexta
    } 
    else {
      printButton("SEXTA", sexT[0], sexT[1], sexT[2], sexT[3]); //botao sexta
    }
    if (temp2sabado_dosagem_personalizada_1 == 6) printButton_verde("SABADO", sabA[0], sabA[1], sabA[2], sabA[3]); //botao sabado
    else {
      printButton("SABADO", sabA[0], sabA[1], sabA[2], sabA[3]); //botao sabado
    }
    if (temp2domingo_dosagem_personalizada_1 == 7) printButton_verde("DOMINGO", domI[0], domI[1], domI[2], domI[3]); //botao sabado
    else {
      printButton("DOMINGO", domI[0], domI[1], domI[2], domI[3]); //botao sabado
    }

    setFont(LARGE, 255, 255, 255, 0, 0, 0);
    if (temp2hora_inicial_dosagem_personalizada_1 < 10) {
      myGLCD.printNumI(0, 70, 48);
      myGLCD.printNumI(temp2hora_inicial_dosagem_personalizada_1, 86, 48);
    } 
    else {
      myGLCD.printNumI(temp2hora_inicial_dosagem_personalizada_1, 70, 48);
    }

    if (temp2minuto_inicial_dosagem_personalizada_1 < 10) {
      myGLCD.printNumI(0, 120, 48);
      myGLCD.printNumI(temp2minuto_inicial_dosagem_personalizada_1, 136, 48);
    } 
    else {
      myGLCD.printNumI(temp2minuto_inicial_dosagem_personalizada_1, 120, 48);
    }
    if (temp2hora_final_dosagem_personalizada_1 < 10) {
      myGLCD.printNumI(0, 70 + deslocamento_botao_x, 48);
      myGLCD.printNumI(temp2hora_final_dosagem_personalizada_1, 86 + deslocamento_botao_x, 48);
    } 
    else {
      myGLCD.printNumI(temp2hora_final_dosagem_personalizada_1, 70 + deslocamento_botao_x, 48);
    }

    if (temp2minuto_final_dosagem_personalizada_1 < 10) {
      myGLCD.printNumI(0, 120 + deslocamento_botao_x, 48);
      myGLCD.printNumI(temp2minuto_final_dosagem_personalizada_1, 136 + deslocamento_botao_x, 48);
    } 
    else {
      myGLCD.printNumI(temp2minuto_final_dosagem_personalizada_1, 120 + deslocamento_botao_x, 48);
    }
  }
  if(dosadora_2_selecionada == true)
  {
    setFont(SMALL, 255, 255, 255, 0, 0, 0);
    myGLCD.print("DOSADORA 2", 10, 198);
    myGLCD.print("SELECIONADA", 10, 218);

    if (temp2segunda_dosagem_personalizada_2 == 1) {
      printButton_verde("SEGUNDA", segU[0], segU[1], segU[2], segU[3]); //botao segunda
    } 
    else {
      printButton("SEGUNDA", segU[0], segU[1], segU[2], segU[3]); //botao segunda
    }
    if (temp2terca_dosagem_personalizada_2 == 2) {
      printButton_verde("TERCA", terC[0], terC[1], terC[2], terC[3]); //botao terca
    } 
    else {
      printButton("TERCA", terC[0], terC[1], terC[2], terC[3]); //botao terca
    }
    if (temp2quarta_dosagem_personalizada_2 == 3) {
      printButton_verde("QUARTA", quaR[0], quaR[1], quaR[2], quaR[3]); //botao quarta
    } 
    else {
      printButton("QUARTA", quaR[0], quaR[1], quaR[2], quaR[3]); //botao quarta
    }
    if (temp2quinta_dosagem_personalizada_2 == 4) {
      printButton_verde("QUINTA", quiN[0], quiN[1], quiN[2], quiN[3]); //botao quinta
    } 
    else {
      printButton("QUINTA", quiN[0], quiN[1], quiN[2], quiN[3]); //botao quinta
    }
    if (temp2sexta_dosagem_personalizada_2 == 5) {
      printButton_verde("SEXTA", sexT[0], sexT[1], sexT[2], sexT[3]); //botao sexta
    } 
    else {
      printButton("SEXTA", sexT[0], sexT[1], sexT[2], sexT[3]); //botao sexta
    }
    if (temp2sabado_dosagem_personalizada_2 == 6) printButton_verde("SABADO", sabA[0], sabA[1], sabA[2], sabA[3]); //botao sabado
    else {
      printButton("SABADO", sabA[0], sabA[1], sabA[2], sabA[3]); //botao sabado
    }
    if (temp2domingo_dosagem_personalizada_2 == 7) printButton_verde("DOMINGO", domI[0], domI[1], domI[2], domI[3]); //botao sabado
    else {
      printButton("DOMINGO", domI[0], domI[1], domI[2], domI[3]); //botao sabado
    }

    setFont(LARGE, 255, 255, 255, 0, 0, 0);
    if (temp2hora_inicial_dosagem_personalizada_2 < 10) {
      myGLCD.printNumI(0, 70, 48);
      myGLCD.printNumI(temp2hora_inicial_dosagem_personalizada_2, 86, 48);
    } 
    else {
      myGLCD.printNumI(temp2hora_inicial_dosagem_personalizada_2, 70, 48);
    }

    if (temp2minuto_inicial_dosagem_personalizada_2 < 10) {
      myGLCD.printNumI(0, 120, 48);
      myGLCD.printNumI(temp2minuto_inicial_dosagem_personalizada_2, 136, 48);
    } 
    else {
      myGLCD.printNumI(temp2minuto_inicial_dosagem_personalizada_2, 120, 48);
    }
    if (temp2hora_final_dosagem_personalizada_2 < 10) {
      myGLCD.printNumI(0, 70 + deslocamento_botao_x, 48);
      myGLCD.printNumI(temp2hora_final_dosagem_personalizada_2, 86 + deslocamento_botao_x, 48);
    } 
    else {
      myGLCD.printNumI(temp2hora_final_dosagem_personalizada_2, 70 + deslocamento_botao_x, 48);
    }

    if (temp2minuto_final_dosagem_personalizada_2 < 10) {
      myGLCD.printNumI(0, 120 + deslocamento_botao_x, 48);
      myGLCD.printNumI(temp2minuto_final_dosagem_personalizada_2, 136 + deslocamento_botao_x, 48);
    } 
    else {
      myGLCD.printNumI(temp2minuto_final_dosagem_personalizada_2, 120 + deslocamento_botao_x, 48);
    }
  }
  if(dosadora_3_selecionada == true)
  {
    setFont(SMALL, 255, 255, 255, 0, 0, 0);
    myGLCD.print("DOSADORA 3", 10, 198);
    myGLCD.print("SELECIONADA", 10, 218);

    if (temp2segunda_dosagem_personalizada_3 == 1) {
      printButton_verde("SEGUNDA", segU[0], segU[1], segU[2], segU[3]); //botao segunda
    } 
    else {
      printButton("SEGUNDA", segU[0], segU[1], segU[2], segU[3]); //botao segunda
    }
    if (temp2terca_dosagem_personalizada_3 == 2) {
      printButton_verde("TERCA", terC[0], terC[1], terC[2], terC[3]); //botao terca
    } 
    else {
      printButton("TERCA", terC[0], terC[1], terC[2], terC[3]); //botao terca
    }
    if (temp2quarta_dosagem_personalizada_3 == 3) {
      printButton_verde("QUARTA", quaR[0], quaR[1], quaR[2], quaR[3]); //botao quarta
    } 
    else {
      printButton("QUARTA", quaR[0], quaR[1], quaR[2], quaR[3]); //botao quarta
    }
    if (temp2quinta_dosagem_personalizada_3 == 4) {
      printButton_verde("QUINTA", quiN[0], quiN[1], quiN[2], quiN[3]); //botao quinta
    } 
    else {
      printButton("QUINTA", quiN[0], quiN[1], quiN[2], quiN[3]); //botao quinta
    }
    if (temp2sexta_dosagem_personalizada_3 == 5) {
      printButton_verde("SEXTA", sexT[0], sexT[1], sexT[2], sexT[3]); //botao sexta
    } 
    else {
      printButton("SEXTA", sexT[0], sexT[1], sexT[2], sexT[3]); //botao sexta
    }
    if (temp2sabado_dosagem_personalizada_3 == 6) printButton_verde("SABADO", sabA[0], sabA[1], sabA[2], sabA[3]); //botao sabado
    else {
      printButton("SABADO", sabA[0], sabA[1], sabA[2], sabA[3]); //botao sabado
    }
    if (temp2domingo_dosagem_personalizada_3 == 7) printButton_verde("DOMINGO", domI[0], domI[1], domI[2], domI[3]); //botao sabado
    else {
      printButton("DOMINGO", domI[0], domI[1], domI[2], domI[3]); //botao sabado
    }

    setFont(LARGE, 255, 255, 255, 0, 0, 0);
    if (temp2hora_inicial_dosagem_personalizada_3 < 10) {
      myGLCD.printNumI(0, 70, 48);
      myGLCD.printNumI(temp2hora_inicial_dosagem_personalizada_3, 86, 48);
    } 
    else {
      myGLCD.printNumI(temp2hora_inicial_dosagem_personalizada_3, 70, 48);
    }

    if (temp2minuto_inicial_dosagem_personalizada_3 < 10) {
      myGLCD.printNumI(0, 120, 48);
      myGLCD.printNumI(temp2minuto_inicial_dosagem_personalizada_3, 136, 48);
    } 
    else {
      myGLCD.printNumI(temp2minuto_inicial_dosagem_personalizada_3, 120, 48);
    }
    if (temp2hora_final_dosagem_personalizada_3 < 10) {
      myGLCD.printNumI(0, 70 + deslocamento_botao_x, 48);
      myGLCD.printNumI(temp2hora_final_dosagem_personalizada_3, 86 + deslocamento_botao_x, 48);
    } 
    else {
      myGLCD.printNumI(temp2hora_final_dosagem_personalizada_3, 70 + deslocamento_botao_x, 48);
    }

    if (temp2minuto_final_dosagem_personalizada_3 < 10) {
      myGLCD.printNumI(0, 120 + deslocamento_botao_x, 48);
      myGLCD.printNumI(temp2minuto_final_dosagem_personalizada_3, 136 + deslocamento_botao_x, 48);
    } 
    else {
      myGLCD.printNumI(temp2minuto_final_dosagem_personalizada_3, 120 + deslocamento_botao_x, 48);
    }
  }
}

void solicitar_senha()  //---------------tela =30
{
  printHeader("DIGITE A SENHA");
  printButton("1", boT1[0], boT1[1], boT1[2], boT1[3],true);
  printButton("2", boT2[0], boT2[1], boT2[2], boT2[3],true);
  printButton("3", boT3[0], boT3[1], boT3[2], boT3[3],true);
  printButton("4", boT4[0], boT4[1], boT4[2], boT4[3],true);
  printButton("5", boT5[0], boT5[1], boT5[2], boT5[3],true);
  printButton("6", boT6[0], boT6[1], boT6[2], boT6[3],true);
  printButton("7", boT7[0], boT7[1], boT7[2], boT7[3],true);
  printButton("8", boT8[0], boT8[1], boT8[2], boT8[3],true);
  printButton("9", boT9[0], boT9[1], boT9[2], boT9[3],true);
  printButton("0", boT0[0], boT0[1], boT0[2], boT0[3],true);
  printButton("LIMPAR", boTL[0], boTL[1], boTL[2], boTL[3],true);
  printButton("ENTRAR", boTE[0], boTE[1], boTE[2], boTE[3],true);
  printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3]);

}
void config_dosagem_personalizada_2(boolean refreshAll=false) // ----------tela =31
{
  if(refreshAll)
  {
    dose_dosadora_1_personalizada_temp2 = dose_dosadora_1_personalizada;
    dose_dosadora_2_personalizada_temp2 = dose_dosadora_2_personalizada;
    dose_dosadora_3_personalizada_temp2 = dose_dosadora_3_personalizada;
    quantidade_dose_dosadora_1_personalizada_temp2 = quantidade_dose_dosadora_1_personalizada;
    quantidade_dose_dosadora_2_personalizada_temp2 = quantidade_dose_dosadora_2_personalizada;
    quantidade_dose_dosadora_3_personalizada_temp2 = quantidade_dose_dosadora_3_personalizada;
    modo_personalizado_on_1_temp2 = modo_personalizado_on_1;
    modo_personalizado_on_2_temp2 = modo_personalizado_on_2;
    modo_personalizado_on_3_temp2 = modo_personalizado_on_3;

    printHeader("CONFIGURAR DOSAGEM PERSONALIZADA");
    printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3]);
    printButton("MENU", menU[0], menU[1], menU[2], menU[3]);
    printButton("ANTERIOR", anT[0],anT[1], anT[2], anT[3]);
    printButton("SALVAR", prOK[0],prOK[1], prOK[2], prOK[3]);
    printButton("+", minUT[0], minUT[1], minUT[2], minUT[3], true); //min up
    printButton("-", minDT[0], minDT[1], minDT[2], minDT[3], true); //min down
    printButton("+", durC[0], durC[1], durC[2], durC[3], true); //minuto mais
    printButton("-", durB[0], durB[1], durB[2], durB[3], true); //minuto menos
    setFont(LARGE, 255, 255, 255, 0, 0, 0);
    myGLCD.setFont(SmallFont);
    myGLCD.print("SELECIONE O", 10, 31);
    myGLCD.print("VOLUME ", 10, 55);
    myGLCD.print("(ML/DIA):", 10, 75);
    myGLCD.print("QUANTIDADE", 190, 46);
    myGLCD.print("DE DOSES:", 190, 61);
  }

  if ((dosadora_1_selecionada == true) && (modo_personalizado == true ))
  { 
    setFont(LARGE, 255, 255, 255, 0, 0, 0);
    myGLCD.printNumF(dose_dosadora_1_personalizada_temp2, 1, 100, 48);  
    if (quantidade_dose_dosadora_1_personalizada_temp2 < 10) 
    {
      myGLCD.printNumI(0, 275, 48);
      myGLCD.printNumI(quantidade_dose_dosadora_1_personalizada_temp2, 291, 48);
    } 
    else 
    {
      myGLCD.printNumI(quantidade_dose_dosadora_1_personalizada_temp2, 275, 48);
    }
    setFont(SMALL, 255, 255, 255, 0, 0, 0);
    myGLCD.print("DOSADORA 1 SELECIONADA", 125, 213);

    if (modo_personalizado_on_1_temp2 == 1) 
    {
      printButton_verde("ON", sexT[0], sexT[1], sexT[2], sexT[3]); 
    } 
    else 
    {
      printButton("OFF", sexT[0], sexT[1], sexT[2], sexT[3]); 
    }
  } 
  if ((dosadora_2_selecionada == true) && (modo_personalizado == true ))
  {
    setFont(LARGE, 255, 255, 255, 0, 0, 0);
    myGLCD.printNumF(dose_dosadora_2_personalizada_temp2, 1, 100, 48);  
    if (quantidade_dose_dosadora_2_personalizada_temp2 < 10) 
    {
      myGLCD.printNumI(0, 275, 48);
      myGLCD.printNumI(quantidade_dose_dosadora_2_personalizada_temp2, 291, 48);
    } 
    else 
    {
      myGLCD.printNumI(quantidade_dose_dosadora_2_personalizada_temp2, 275, 48);
    }
    setFont(SMALL, 255, 255, 255, 0, 0, 0);
    myGLCD.print("DOSADORA 2 SELECIONADA", 125, 213);
    if (modo_personalizado_on_2_temp2 == 1) 
    {
      printButton_verde("ON", sexT[0], sexT[1], sexT[2], sexT[3]); //botao sexta
    } 
    else 
    {
      printButton("OFF", sexT[0], sexT[1], sexT[2], sexT[3]); //botao sexta
    }
  }
  if ((dosadora_3_selecionada == true) && (modo_personalizado == true))
  {
    setFont(LARGE, 255, 255, 255, 0, 0, 0);
    myGLCD.printNumF(dose_dosadora_3_personalizada_temp2, 1, 100, 48); 

    if (quantidade_dose_dosadora_3_personalizada_temp2 < 10) 
    {
      myGLCD.printNumI(0, 275, 48);
      myGLCD.printNumI(quantidade_dose_dosadora_3_personalizada_temp2, 291, 48);
    } 
    else 
    {
      myGLCD.printNumI(quantidade_dose_dosadora_3_personalizada_temp2, 275, 48);
    }
    setFont(SMALL, 255, 255, 255, 0, 0, 0);
    myGLCD.print("DOSADORA 3 SELECIONADA", 125, 213);
    if (modo_personalizado_on_3_temp2 == 1) 
    {
      printButton_verde("ON", sexT[0], sexT[1], sexT[2], sexT[3]); //botao sexta
    } 
    else 
    {
      printButton("OFF", sexT[0], sexT[1], sexT[2], sexT[3]); //botao sexta
    }
  }
}

void rever_dosagem_personalizada() // ----------tela =32
{

  printHeader("REVER CONF. DA DOSAGEM PERSONALIZADA");
  printButton("INICIO", iniC[0], iniC[1], iniC[2], iniC[3]);
  printButton("MENU", menU[0], menU[1], menU[2], menU[3]);

  myGLCD.setColor(161, 127, 73);                    
  myGLCD.drawLine(1, 88, 319, 88);  
  myGLCD.drawLine(1, 158, 319, 158);
  myGLCD.drawLine(319, 15, 319, 239);

  setFont(SMALL, 255, 255, 255, 0, 0, 0);
  myGLCD.print("DOSADORA 1:", 10, 30);   
  myGLCD.print("INICIAL:", 10, 50);  
  myGLCD.print("FINAL:", 118, 50);
  myGLCD.print("QUANTIDADE DE DOSES:", 10, 70);
  myGLCD.print("VOLUME:", 215, 50);    //Posição correta
  myGLCD.print(":", 90, 50);
  myGLCD.print(":", 180, 50);

  myGLCD.printNumF(dose_dosadora_1_personalizada, 1, 275, 50); //Posição correta
  myGLCD.printNumI(quantidade_dose_dosadora_1_personalizada, 170, 70);

  if(hora_inicial_dosagem_personalizada_1 < 10)
  {
    myGLCD.printNumI(0, 72, 50);
    myGLCD.printNumI(hora_inicial_dosagem_personalizada_1, 80, 50);
  }
  else
  {
    myGLCD.printNumI(hora_inicial_dosagem_personalizada_1, 72, 50);
  }
  if(minuto_inicial_dosagem_personalizada_1 < 10)
  {
    myGLCD.printNumI(0, 98, 50);
    myGLCD.printNumI(minuto_inicial_dosagem_personalizada_1, 106, 50);
  }
  else
  {
    myGLCD.printNumI(minuto_inicial_dosagem_personalizada_1, 98, 50);
  }
  if(hora_final_dosagem_personalizada_1 < 10)
  {
    myGLCD.printNumI(0, 165, 50);
    myGLCD.printNumI(hora_final_dosagem_personalizada_1, 173, 50); 
  }
  else
  {
    myGLCD.printNumI(hora_final_dosagem_personalizada_1, 165, 50);
  }
  if(minuto_final_dosagem_personalizada_1 < 10)
  {
    myGLCD.printNumI(0, 188, 50);
    myGLCD.printNumI(minuto_final_dosagem_personalizada_1, 196, 50);
  }
  else
  {
    myGLCD.printNumI(minuto_final_dosagem_personalizada_1, 188, 50);
  }
  if(segunda_dosagem_personalizada_1 == 1)
  {
    printButton_verde("S", 110, 23, 130, 43);
  }
  else
  {
    printButton("S", 110, 23, 130, 43);
  }
  if(terca_dosagem_personalizada_1 == 2)
  {
    printButton_verde("T", 140, 23, 160, 43);
  }
  else
  {
    printButton("T", 140, 23, 160, 43);
  }
  if(quarta_dosagem_personalizada_1 == 3)
  {
    printButton_verde("Q", 170, 23, 190, 43);
  }
  else
  {
    printButton("Q", 170, 23, 190, 43);
  }    
  if(quinta_dosagem_personalizada_1 == 4)
  {
    printButton_verde("Q", 200, 23, 220, 43);
  }
  else
  {
    printButton("Q", 200, 23, 220, 43);
  }    
  if(sexta_dosagem_personalizada_1 == 5)
  {
    printButton_verde("S", 230, 23, 250, 43);
  }
  else
  {
    printButton("S", 230, 23, 250, 43);
  }
  if(sabado_dosagem_personalizada_1 == 6)
  {
    printButton_verde("S", 260, 23, 280, 43);
  }
  else
  {
    printButton("S", 260, 23, 280, 43);
  }
  if(sabado_dosagem_personalizada_1 == 7)
  {
    printButton_verde("D", 290, 23, 310, 43);
  }
  else
  {
    printButton("D", 290, 23, 310, 43);
  } 
  if (modo_personalizado_on_1 == 1) 
  {
    printButton_verde("ON", 200, 65, 245, 85); 
  } 
  else 
  {
    printButton("ON", 200, 65, 245, 85); 
  }
  if (modo_personalizado_on_1 == 0) 
  {
    printButton_verde("OFF", 250, 65, 295, 85); 
  } 
  else 
  {
    printButton("OFF", 250, 65, 295, 85); 
  }
  setFont(SMALL, 255, 255, 255, 0, 0, 0);    
  myGLCD.print("DOSADORA 2:", 10, 100);   
  myGLCD.print("INICIAL:", 10, 120);  
  myGLCD.print("FINAL:", 118, 120);
  myGLCD.print("QUANTIDADE DE DOSES:", 10, 140);
  myGLCD.print("VOLUME:", 215, 120);    
  myGLCD.print(":", 90, 120);
  myGLCD.print(":", 180, 120);

  myGLCD.printNumF(dose_dosadora_2_personalizada, 1, 275, 120); 
  myGLCD.printNumI(quantidade_dose_dosadora_2_personalizada, 170, 140);
  if(hora_inicial_dosagem_personalizada_2 < 10)
  {
    myGLCD.printNumI(0, 72, 120);
    myGLCD.printNumI(hora_inicial_dosagem_personalizada_2, 80, 120);
  }
  else
  {
    myGLCD.printNumI(hora_inicial_dosagem_personalizada_2, 72, 120);
  }
  if(minuto_inicial_dosagem_personalizada_2 < 10)
  {
    myGLCD.printNumI(0, 98, 120);
    myGLCD.printNumI(minuto_inicial_dosagem_personalizada_2, 106, 120);
  }
  else
  {
    myGLCD.printNumI(minuto_inicial_dosagem_personalizada_2, 98, 120);
  }
  if(hora_final_dosagem_personalizada_2 < 10)
  {
    myGLCD.printNumI(0, 165, 120);
    myGLCD.printNumI(hora_final_dosagem_personalizada_2, 173, 120); 
  }
  else
  {
    myGLCD.printNumI(hora_final_dosagem_personalizada_2, 165, 120);
  }
  if(minuto_final_dosagem_personalizada_2 < 10)
  {
    myGLCD.printNumI(0, 188, 120);
    myGLCD.printNumI(minuto_final_dosagem_personalizada_2, 196, 120);
  }
  else
  {
    myGLCD.printNumI(minuto_final_dosagem_personalizada_2, 188, 120);
  }
  if(segunda_dosagem_personalizada_2 == 1)
  {
    printButton_verde("S", 110, 93, 130, 113);
  }
  else
  {
    printButton("S", 110, 93, 130, 113);
  }
  if(terca_dosagem_personalizada_2 == 2)
  {
    printButton_verde("T", 140, 93, 160, 113);
  }
  else
  {
    printButton("T", 140, 93, 160, 113);
  }
  if(quarta_dosagem_personalizada_2 == 3)
  {
    printButton_verde("Q", 170, 93, 190, 113);
  }
  else
  {
    printButton("Q", 170, 93, 190, 113);
  }    
  if(quinta_dosagem_personalizada_2 == 4)
  {
    printButton_verde("Q", 200, 93, 220, 113);
  }
  else
  {
    printButton("Q", 200, 93, 220, 113);
  }    
  if(sexta_dosagem_personalizada_2 == 5)
  {
    printButton_verde("S", 230, 93, 250, 113);
  }
  else
  {
    printButton("S", 230, 93, 250, 113);
  }
  if(sabado_dosagem_personalizada_2 == 6)
  {
    printButton_verde("S", 260, 93, 280, 113);
  }
  else
  {
    printButton("S", 260, 93, 280, 113);
  }
  if(sabado_dosagem_personalizada_2 == 7)
  {
    printButton_verde("D", 290, 93, 310, 113);
  }
  else
  {
    printButton("D", 290, 93, 310, 113);
  } 
  if (modo_personalizado_on_2 == 1) 
  {
    printButton_verde("ON", 200, 135, 245, 155); 
  } 
  else 
  {
    printButton("ON", 200, 135, 245, 155); 
  }
  if (modo_personalizado_on_2 == 0) 
  {
    printButton_verde("OFF", 250, 135, 295, 155); 
  } 
  else 
  {
    printButton("OFF", 250, 135, 295, 155); 
  } 
  setFont(SMALL, 255, 255, 255, 0, 0, 0);    
  myGLCD.print("DOSADORA 3:", 10, 170);   
  myGLCD.print("INICIAL:", 10, 190);  
  myGLCD.print("FINAL:", 118, 190);
  myGLCD.print("QUANTIDADE DE DOSES:", 10, 210);
  myGLCD.print("VOLUME:", 215, 190);    
  myGLCD.print(":", 90, 190);
  myGLCD.print(":", 180, 190);

  myGLCD.printNumF(dose_dosadora_3_personalizada, 1, 275, 190); 
  myGLCD.printNumI(quantidade_dose_dosadora_3_personalizada, 170, 210);
  if(hora_inicial_dosagem_personalizada_3 < 10)
  {
    myGLCD.printNumI(0, 72, 190);
    myGLCD.printNumI(hora_inicial_dosagem_personalizada_3, 80, 190);
  }
  else
  {
    myGLCD.printNumI(hora_inicial_dosagem_personalizada_3, 72, 190);
  }
  if(minuto_inicial_dosagem_personalizada_3 < 10)
  {
    myGLCD.printNumI(0, 98, 190);
    myGLCD.printNumI(minuto_inicial_dosagem_personalizada_3, 106, 190);
  }
  else
  {
    myGLCD.printNumI(minuto_inicial_dosagem_personalizada_3, 98, 190);
  }
  if(hora_final_dosagem_personalizada_3 < 10)
  {
    myGLCD.printNumI(0, 165, 190);
    myGLCD.printNumI(hora_final_dosagem_personalizada_3, 173, 190); 
  }
  else
  {
    myGLCD.printNumI(hora_final_dosagem_personalizada_3, 165, 190);
  }
  if(minuto_final_dosagem_personalizada_3 < 10)
  {
    myGLCD.printNumI(0, 188, 190);
    myGLCD.printNumI(minuto_final_dosagem_personalizada_3, 196, 190);
  }
  else
  {
    myGLCD.printNumI(minuto_final_dosagem_personalizada_3, 188, 190);
  }
  if(segunda_dosagem_personalizada_3 == 1)
  {
    printButton_verde("S", 110, 163, 130, 183);
  }
  else
  {
    printButton("S", 110, 163, 130, 183);
  }
  if(terca_dosagem_personalizada_3 == 2)
  {
    printButton_verde("T", 140, 163, 160, 183);
  }
  else
  {
    printButton("T", 140, 163, 160, 183);
  }
  if(quarta_dosagem_personalizada_3 == 3)
  {
    printButton_verde("Q", 170, 163, 190, 183);
  }
  else
  {
    printButton("Q", 170, 163, 190, 183);
  }    
  if(quinta_dosagem_personalizada_3 == 4)
  {
    printButton_verde("Q", 200, 163, 220, 183);
  }
  else
  {
    printButton("Q", 200, 163, 220, 183);
  }    
  if(sexta_dosagem_personalizada_3 == 5)
  {
    printButton_verde("S", 230, 163, 250, 183);
  }
  else
  {
    printButton("S", 230, 163, 250, 183);
  }
  if(sabado_dosagem_personalizada_3 == 6)
  {
    printButton_verde("S", 260, 163, 280, 183);
  }
  else
  {
    printButton("S", 260, 163, 280, 183);
  }
  if(sabado_dosagem_personalizada_3 == 7)
  {
    printButton_verde("D", 290, 163, 310, 183);
  }
  else
  {
    printButton("D", 290, 163, 310, 183);
  } 
  if (modo_personalizado_on_3 == 1) 
  {
    printButton_verde("ON", 200, 205, 245, 225); 
  } 
  else 
  {
    printButton("ON", 200, 205, 245, 225); 
  }
  if (modo_personalizado_on_3 == 0) 
  {
    printButton_verde("OFF", 250, 205, 295, 225); 
  } 
  else 
  {
    printButton("OFF", 250, 205, 295, 225); 
  }     
}


//------------------------------------- Leitura dos stamps
void check_parametros() 
{
  int i;

  unsigned long millis_agora = millis();

  if (millis_agora - millis_antes > 60000)
  {   
    millis_antes = millis_agora;        
    do{
      Open_channel(ph1);
      Serial3.flush(); 
      Serial3.print(tempC);
      Serial3.print('\r');
      delay(1100);

      if(Serial3.available() > 3) 
      {
        holding = Serial3.available();
        for(i=1; i <= holding; i++)
        {
          sensorstring[i]= Serial3.read();
        }  
        Serial.println();
        if(holding ==5)
        {
          PHT = ((sensorstring[1]-48)*100 + (sensorstring[3]-48)*10 + (sensorstring[4]-48));
          PHA = PHT/100;
        }
        else
        {
          PHT = ((sensorstring[1]-48)*1000 + (sensorstring[2]-48)*100 + (sensorstring[4]-48)*10 + (sensorstring[5]-48));
          PHA = PHT/100;
        }  
        PHT=0;
        Serial3.flush();
        break;
      }
    } 
    while (done==1);
    done=0;

    do{
      Open_channel(ph2);
      Serial3.flush();
      Serial3.print(tempC);
      Serial3.print('\r');
      delay(1100);

      if(Serial3.available() > 3) 
      {
        holding = Serial3.available();
        for(i=1; i <= holding; i++)
        {
          sensorstring[i]= Serial3.read();
        }
        Serial.println();
        if(holding ==5)
        {
          PHT = ((sensorstring[1]-48)*100 + (sensorstring[3]-48)*10 + (sensorstring[4]-48));
          PHR = PHT/100;
        }
        else
        {
          PHT = ((sensorstring[1]-48)*1000 + (sensorstring[2]-48)*100 + (sensorstring[4]-48)*10 + (sensorstring[5]-48));
          PHR = PHT/100;
        }  
        PHT=0;
        Serial3.flush();
        break;
      }
    } 
    while (done==1);
    done=0;

    do{
      Open_channel(orp);
      Serial3.flush();
      Serial3.print("r"),
      Serial3.print('\r');
      delay(1100);

      if(Serial3.available() > 3) 
      {
        holding = Serial3.available();
        for(i=1; i <= holding; i++)
        {
          sensorstring[i]= Serial3.read();
        }
        ORPT = ((sensorstring[1]-48)*100 + (sensorstring[2]-48)*10 + (sensorstring[3]-48));
        ORP = ORPT; 
        ORPT=0;
        Serial3.flush();      
        break;
      }
    } 
    while (done==1);
    done=0;

    /*  do{
     Open_channel(ec);
     Serial3.flush();
     Serial3.print(tempC);
     Serial3.print('\r');
     delay(1100);
     if(Serial3.available() > 4) 
     {
     holding = Serial3.available();
     for(i=1; i <= 15; i++)
     {
     sensorstring[i]= Serial3.read();
     }
     DENT = ((sensorstring[1]-48)*1000 + (sensorstring[2]-48)*100 + ((sensorstring[3]-48)*10) + (sensorstring[4]-48));
     DEN = DENT*0.2;
     DENT=0;      
     Serial3.flush();
     break;
     }    
     } 
     while (done==1);
     done=0;*/
  }
  Serial3.flush();
}

void Open_channel(short channel)
{
  switch (channel) 
  {
  case 0:
    //open channel Y0
    //S0=0
    //S1=0
    digitalWrite(multiplexadorS0Pin, LOW);
    digitalWrite(multiplexadorS1Pin, LOW);
    break;

  case 1:
    //open channel Y1
    //S0=1
    //S1=0
    digitalWrite(multiplexadorS0Pin, HIGH);
    digitalWrite(multiplexadorS1Pin, LOW);
    break;

  case 2:
    //open channel Y2
    //S0=0
    //S1=1
    digitalWrite(multiplexadorS0Pin, LOW);
    digitalWrite(multiplexadorS1Pin, HIGH);
    break;

  case 3:
    //open channel Y3
    //S0=1
    //S1=1
    digitalWrite(multiplexadorS0Pin, HIGH);
    digitalWrite(multiplexadorS1Pin, HIGH);
    break;
  }
  Serial3.print('\r');
  return;
}
//------------------------------------- Fim da Leitura dos stamps

//---------------------------------------------------------------------------------------------
void checkTempC()
{ 
  sensors.requestTemperatures();   // call sensors.requestTemperatures() to issue a global 
  // temperature request to all devices on the bus
  tempC = (sensors.getTempC(sensor_agua));  //read water temperature
  tempH = (sensors.getTempC(sensor_dissipador));   //read heatsink temperature


  if (tempC < (setTempC + offTempC + alarmTempC) && tempC > (setTempC - offTempC - alarmTempC)) 
  {
    tempAflag = false;
  }

  if (alarmTempC > 0)                        //turn on alarm
  {
    if ((tempC >= (setTempC + offTempC + alarmTempC)) || (tempC <= (setTempC - offTempC - alarmTempC)))
    {
      tempAflag=true;
    }
  }

  if ((tempC < (setTempC + offTempC)) && (tempC > (setTempC - offTempC)))          //turn off cooler/heater
  {
    tempCflag = false;
    tempHflag = false;
    digitalWrite(aquecedorPin, LOW);
    digitalWrite(chillerPin, LOW);   
  }

  if (offTempC > 0)
  {
    if ((tempC > (setTempC + offTempC)))            //liga o chiller
    {
      tempCflag = true;
      digitalWrite(chillerPin, HIGH);
    }
    if ((tempC < (setTempC - offTempC)))             //liga o aquecedor
    {
      tempHflag=true;
      digitalWrite(aquecedorPin, HIGH);
    }
  }

  if ((tempC > 50) || (tempC <10))
  {
    tempCflag = false;
    tempHflag = false;
    digitalWrite(aquecedorPin, LOW);
    digitalWrite(chillerPin, LOW);
  }


  int tempval = int(tempH * 10);
  int fanSpeed = map(tempval, (HtempMin * 10), (HtempMax * 10), 0, 255);       //---------Controle de velocidade das ventoinhas do dissipador
  if (fanSpeed <= 0)                                                          //30°c = 0 volts -- 40°c = 5 volts
    fanSpeed = 0;                                                          
  if (fanSpeed > 255)
    fanSpeed = 255;
  analogWrite(fanPin, fanSpeed);
}

void checktpa()
{
  t = rtc.getTime();
  tempo = (duracaomaximatpa * 60000ul);

  if ((segunda==t.dow) && (hora==t.hour) && (minuto==t.min) && (t.sec<=5))
  {
    tpa=1;
    if ((4294967295ul - tempo) < millis())
    {
      marcadoriniciotpa= millis() - (tempo*2);
    }
    else
    {
      marcadoriniciotpa= millis();
    }
  }

  if ((terca==t.dow) && (hora==t.hour) && (minuto==t.min) && (t.sec<=5))
  {
    tpa=1;
    if ((4294967295ul - tempo) < millis())
    {
      marcadoriniciotpa= millis() - (tempo*2);
    }
    else
    {
      marcadoriniciotpa= millis();
    }
  }

  if ((quarta==t.dow) && (hora==t.hour) && (minuto==t.min) && (t.sec<=5))
  {
    tpa=1;
    if ((4294967295ul - tempo) < millis())
    {
      marcadoriniciotpa= millis() - (tempo*2);
    }
    else
    {
      marcadoriniciotpa= millis();
    }
  }

  if ((quinta==t.dow) && (hora==t.hour) && (minuto==t.min) && (t.sec<=5))
  {
    tpa=1;
    if ((4294967295ul - tempo) < millis())
    {
      marcadoriniciotpa= millis() - (tempo*2);
    }
    else
    {
      marcadoriniciotpa= millis();
    }
  }

  if ((sexta==t.dow) && (hora==t.hour) && (minuto==t.min) && (t.sec<=5))
  {
    tpa=1;
    if ((4294967295ul - tempo) < millis())
    {
      marcadoriniciotpa= millis() - (tempo*2);
    }
    else
    {
      marcadoriniciotpa= millis();
    }
  }

  if ((sabado==t.dow) && (hora==t.hour) && (minuto==t.min) && (t.sec<=5))
  {
    tpa=1;
    if ((4294967295ul - tempo) < millis())
    {
      marcadoriniciotpa= millis() - (tempo*2);
    }
    else
    {
      marcadoriniciotpa= millis();
    }
  }

  if ((domingo==t.dow) && (hora==t.hour) && (minuto==t.min) && (t.sec<=5))
  {
    tpa=1;
    if ((4294967295ul - tempo) < millis())
    {
      marcadoriniciotpa= millis() - (tempo*2);
    }
    else
    {
      marcadoriniciotpa= millis();
    }
  }

  if ((4294967295ul - tempo) < millis())
  {
    shiftedmillis= millis() - (tempo*2);
  }
  else
  {
    shiftedmillis= millis();
  }

  if ((analogRead(sensor1)<100) && (analogRead(sensor2)>400) && (analogRead(sensor3)<100) && tpa==1 && (analogRead(sensor4)>400) && ((shiftedmillis - marcadoriniciotpa) < tempo))
  {
    digitalWrite(bomba1Pin,HIGH); //estagio 1
    digitalWrite(bomba2Pin,LOW);
    digitalWrite(bomba3Pin,LOW);
    tpa=2;
    tpa_em_andamento =true;
    if ((4294967295ul - tempo) < millis()) //zera o cronometro para o proximo estagio
    {
      marcadoriniciotpa= millis() - (tempo*2);
    }
    else
    {
      marcadoriniciotpa= millis();
    }
  }
  else if ((analogRead(sensor1)>400) && (analogRead(sensor2)>400) && tpa==2 && ((shiftedmillis - marcadoriniciotpa) < tempo))
  {
    digitalWrite(bomba1Pin,LOW); //estagio 2
    digitalWrite(bomba2Pin,HIGH);
    digitalWrite(bomba3Pin,LOW);
    tpa=3;
    tpa_em_andamento =true;
    if ((4294967295ul - tempo) < millis()) //zera o cronometro para o proximo estagio
    {
      marcadoriniciotpa= millis() - (tempo*2);
    }
    else
    {
      marcadoriniciotpa= millis();
    }
  }
  else if ((analogRead(sensor2)<100) && (analogRead(sensor1)==0) && (analogRead(sensor3)>400) && tpa==3 && ((shiftedmillis - marcadoriniciotpa) < tempo))
  {
    digitalWrite(bomba1Pin,LOW); // estagio 3
    digitalWrite(bomba2Pin,LOW);
    digitalWrite(bomba3Pin,HIGH);
    tpa=4;
    tpa_em_andamento =true;
    if ((4294967295ul - tempo) < millis()) //zera o cronometro para o proximo estagio
    {
      marcadoriniciotpa= millis() - (tempo*2);
    }
    else
    {
      marcadoriniciotpa= millis();
    }
  }
  else if ((analogRead(sensor3)<100) && (analogRead(sensor2)>400) && (analogRead(sensor1)<100) && tpa==4 && ((shiftedmillis - marcadoriniciotpa) < tempo))
  {
    digitalWrite(bomba1Pin,LOW); // estagio 0
    digitalWrite(bomba2Pin,LOW);
    digitalWrite(bomba3Pin,LOW);
    tpa_em_andamento = false;
  }
  else if ((shiftedmillis - marcadoriniciotpa) >= tempo)
  {
    digitalWrite(bomba1Pin,LOW); //desliga as bombas todas e mete tpa=0 para não entrar no ciclo outra vez
    digitalWrite(bomba2Pin,LOW);
    digitalWrite(bomba3Pin,LOW);
    tpa_em_andamento = false;
    tpa=0;
  }
}
void reposicao_agua_doce () // abre a solenoide 1 se o nível estiver baixo e se a tpa não estiver em andamento
//e se o chiller estiver desligado e se o nível do sump não estiver anormal.
{
  if((analogRead(sensor3) > 400) && (analogRead(sensor2) > 400) && (tpa_em_andamento == false) && (tempCflag==false))
  {
    digitalWrite(solenoide1Pin,HIGH);
    ato = true; //sinaliza reposição em andamento
  }
  else
  {
    ato = false;
    digitalWrite(solenoide1Pin,LOW);
  }
}

void check_nivel() //verifica o nivel do reef e fish only.
{
  if((analogRead(sensor5) > 400) ||(analogRead(sensor6) > 400) || (analogRead(sensor2) < 100) && (tpa_em_andamento == false))
  {
    nivel_status =true; //sinaliza nivel baixo em um dos aquários ou sump
  }
  else 
  {
    nivel_status =false; //sinaliza nivel normal dos aquários e sump
  }
}

void check_dosagem_automatica_1()
{
  int16_t n1;
  int16_t n11;
  char buf1[5];
  char buf11[5];
  int hora1;
  int minuto1;
  int contador1 = 0;
  int contador2 = 0;

  unsigned long millis_agora_1 = millis();

  if (millis_agora_1 - millis_antes_1 > 60000)
  {   
    millis_antes_1 = millis_agora_1;

    digitalWrite (4, LOW);

    if(modo_automatico_on_1 == 1)
    {
      file.open(&root, "HDA1.TXT", O_READ);
      while ((n1 = file.read(buf1, sizeof(buf1))) > 0)
      {

        hora1 = atoi(buf1);
        contador1 += 1;
        if(hora1 == t.hour)
        {
          n1 = 0;
          file.close();
          file.open(&root, "MDA1.TXT", O_READ);
          while ((n11 = file.read(buf11, sizeof(buf11))) > 0)
          {
            minuto1 = atoi(buf11);
            contador2 += 1;
            if ((minuto1 == t.min) && (contador2 == contador1))
            {
              Serial.println("Dosando 1:");
              Serial.println(rtc.getTimeStr(FORMAT_LONG));
              n11 = 0;
              file.close();
            }
          }
        }
      }
    }
    contador1 = 0;
    contador2 = 0; 
    digitalWrite (4, HIGH);
  }
}

void check_dosagem_automatica_2()
{
  int16_t n2;
  int16_t n12;
  char buf2[5];
  char buf12[5];
  int hora2;
  int minuto2;
  int contador12 = 0;
  int contador22 = 0;

  unsigned long millis_agora_2 = millis();

  if (millis_agora_2 - millis_antes_2 > 60000)
  {   
    millis_antes_2 = millis_agora_2;

    digitalWrite (4, LOW);

    if(modo_automatico_on_2 == 1)
    {
      file.open(&root, "HDA2.TXT", O_READ);
      while ((n2 = file.read(buf2, sizeof(buf2))) > 0)
      {

        hora2 = atoi(buf2);
        contador12 += 1;
        if(hora2 == t.hour)
        {
          n2 = 0;
          file.close();
          file.open(&root, "MDA2.TXT", O_READ);
          while ((n12 = file.read(buf12, sizeof(buf12))) > 0)
          {
            minuto2 = atoi(buf12);
            contador22 += 1;
            if ((minuto2 == t.min) && (contador22 == contador12))
            {
              Serial.println("Dosando 2:");
              Serial.println(rtc.getTimeStr(FORMAT_LONG));
              n12 = 0;
              file.close();
            }
          }
        }
      }
    }
    contador12 = 0;
    contador22 = 0; 
    digitalWrite (4, HIGH);
  }
}

void check_dosagem_automatica_3()
{
  int16_t n3;
  int16_t n13;
  char buf3[5];
  char buf13[5];
  int hora3;
  int minuto3;
  int contador13 = 0;
  int contador23 = 0;

  unsigned long millis_agora_3 = millis();

  if (millis_agora_3 - millis_antes_3 > 60000)
  {   
    millis_antes_3 = millis_agora_3;

    digitalWrite (4, LOW);

    if(modo_automatico_on_3 == 1)
    {
      file.open(&root, "HDA3.TXT", O_READ);
      while ((n3 = file.read(buf3, sizeof(buf3))) > 0)
      {

        hora3 = atoi(buf3);
        contador13 += 1;
        if(hora3 == t.hour)
        {
          file.close();
          n3 = 0;
          file.open(&root, "MDA3.TXT", O_READ);
          while ((n13 = file.read(buf13, sizeof(buf13))) > 0)
          {
            minuto3 = atoi(buf13);
            contador23 += 1;
            if ((minuto3 == t.min) && (contador23 == contador13))
            {
              Serial.println("Dosando 3:");
              Serial.println(rtc.getTimeStr(FORMAT_LONG));
              n13 = 0;
              file.close();
            }
          }
        }
      }
    }
    contador13 = 0;
    contador23 = 0; 
    digitalWrite (4, HIGH);
  }
}

void logtempgraf() //Grava dados no SD CARD para gerar  grafico de temperatura.
{
  t = rtc.getTime();
  char oldminuto1;
  oldminuto1 = time1;
  time1 = t.min;

  digitalWrite (4, LOW);  

  if (oldminuto1!=time1)
  {
    file.open(&root, "LOGTDIA.TXT", O_CREAT | O_APPEND | O_WRITE);

    if ((tempC<=1.0) || (tempC>99.9))
    {
      file.print("00.00");
      file.write((uint8_t*)"\0", 1);
      writeCRLF(file);
    }
    else
    {
      file.print(tempC);
      file.write((uint8_t*)"\0", 1);
      writeCRLF(file);
    }
  }
  file.close();

  if ((t.hour == 23) && (t.min > 58))
  {
    file.open(&root, "LOGTDIA.TXT", O_WRITE);
    file.remove();
  } 
  digitalWrite (4, HIGH);  
}

void logphagraf() //Grava dados no SD CARD para gerar  grafico de PH do aquario.
{ 
  t = rtc.getTime();
  char oldminuto2;
  oldminuto2 = time2;
  time2 = t.min;

  digitalWrite (4, LOW);

  if (oldminuto2!=time2)
  {
    if((PHA < 1.00) || (PHA > 9.99))
    {
      file.print("0.00");
      file.write((uint8_t*)"\0", 1);
      writeCRLF(file);
    }
    else
    {
      file.open(&root, "LOGPDIA.TXT", O_CREAT | O_APPEND | O_WRITE);   
      file.print(PHA);
      file.write((uint8_t*)"\0", 1);
      writeCRLF(file);
    }
  }
  file.close();

  if ((t.hour == 23) && (t.min > 58))
  {
    file.open(&root, "LOGPDIA.TXT", O_WRITE);
    file.remove();
  } 
  digitalWrite (4, HIGH); 
}

void logphrgraf() //Grava dados no SD CARD para gerar  grafico de PH do reator de calcio.
{
  t = rtc.getTime();
  char oldminuto3;
  oldminuto3 = time3;
  time3 = t.min;

  digitalWrite (4, LOW);

  if (oldminuto3!=time3)
  {
    if((PHR < 1.00) || (PHR > 9.99))
    {
      file.print("0.00");
      file.write((uint8_t*)"\0", 1);
      writeCRLF(file);
    }
    else
    {
      file.open(&root, "LOGRDIA.TXT", O_CREAT | O_APPEND | O_WRITE);   
      file.print(PHR);
      file.write((uint8_t*)"\0", 1);
      writeCRLF(file);
    }
  }
  file.close();

  if ((t.hour == 23) && (t.min > 58))
  {
    file.open(&root, "LOGRDIA.TXT", O_WRITE);
    file.remove();
  }
  digitalWrite (4, HIGH);
}

void logorpgraf() //Grava dados no SD CARD para gerar  grafico de ORP.
{
  t = rtc.getTime();
  char oldminuto4;
  oldminuto4 = time4;
  time4 = t.min;

  digitalWrite (4, LOW);

  if (oldminuto4!=time4)
  {

    if ((ORP<=100) || (tempC>999))
    {
      file.print("000");
      file.write((uint8_t*)"\0", 1);
      writeCRLF(file);
    }
    else
    {
      file.open(&root, "LOGODIA.TXT", O_CREAT | O_APPEND | O_WRITE);   
      file.print(ORP);
      file.write((uint8_t*)"\0", 1);
      writeCRLF(file);
    }
  }
  file.close();

  if ((t.hour == 23) && (t.min > 58))
  {
    file.open(&root, "LOGODIA.TXT", O_WRITE);
    file.remove();
  } 
  digitalWrite (4, HIGH); 
}

void logdengraf() //Grava dados no SD CARD para gerar  grafico de PH do aquario.
{
  t = rtc.getTime();
  char oldminuto5;
  oldminuto5 = time5;
  time5  = t.min;

  digitalWrite (4, LOW);

  if (oldminuto5!=time5)
  {
    if( (DEN<1000) || (DEN>9999))
    {
      file.print("0000");
      file.write((uint8_t*)"\0", 1);
      writeCRLF(file);
    }
    else
    {    
      file.open(&root, "LOGDDIA.TXT", O_CREAT | O_APPEND | O_WRITE);   
      file.print(DEN);
      file.write((uint8_t*)"\0", 1);
      writeCRLF(file);
    }
  }
  file.close();

  if ((t.hour == 23) && (t.min > 58))
  {
    file.open(&root, "LOGDDIA.TXT", O_WRITE);
    file.remove();
  }
  digitalWrite (4, HIGH);   
}


void logparametros() //Grava parametros no SD CARD para consultas posteriores
{
  t = rtc.getTime();

  digitalWrite (4, LOW);

  file.open(&root, "LOGPAR.TXT", O_CREAT | O_APPEND | O_WRITE);
  file.print(rtc.getDateStr(FORMAT_SHORT)); 
  writeCRLF(file);
  file.print(rtc.getTimeStr(FORMAT_LONG));
  writeCRLF(file);
  file.print(tempC);
  writeCRLF(file);
  file.print(PHA);
  writeCRLF(file);
  file.print(PHR);
  writeCRLF(file);
  file.print(DEN);
  writeCRLF(file);
  file.print(ORP);
  writeCRLF(file);
  file.close();

  digitalWrite (4, HIGH);
}

void check_status()
{

  if (tempCflag==true)
  {
    chiller_status = 100;
  }
  else if (tempCflag==false)
  {
    chiller_status = 0;
  }

  if (tempHflag==true)
  {
    aquecedor_status = 100;
  }
  else if (tempHflag==false)
  {
    aquecedor_status = 0;
  }
  if (PHRflag==true)
  {
    reator_status = 100;
  }
  else if (PHRflag==false)
  {
    reator_status =0;
  }
  if (ORPflag==true)
  {
    ozonio_status = 100;
  }
  else if (ORPflag==false)
  {
    ozonio_status = 0;
  }
  if (ato==true)
  {
    reposicao_status = 100;
  }
  else if (ato==false)
  {
    reposicao_status = 0;
  }
  if (nivel_status==false)
  {
    niveis_status = 100;
  }
  else if (nivel_status==true)
  {
    niveis_status = 0;
  }
  if (tpa_em_andamento==true)
  {
    tpa_status = 100;
  }
  else if (tpa_em_andamento==false)
  {
    tpa_status = 0;
  }
}

void cosm () //--------------- Envia dados para o cosm.com ------------------------------------
{

  unsigned long current_Millis = millis();

  if (current_Millis - previous_Millis > 60000)    //Envia dados a cada 90s
  {
    previous_Millis = current_Millis;

    ether.dnsLookup(website);

    byte sd = stash.create();
    stash.print("1,"); //Temp. da agua
    stash.println(tempC,DEC);
    stash.print("2,"); //Temp. dissipador
    stash.println(tempH,DEC);
    stash.print("3,"); //PH do aquario
    stash.println(PHA, DEC);
    stash.print("4,"); //PH do reator de calcio
    stash.println(PHR,DEC);
    stash.print("5,"); //Densidade
    stash.println(DEN);
    stash.print("6,"); //ORP
    stash.println(ORP);
    stash.print("7,"); //Status chiller 0 = desligado, 100 = ligado
    stash.println(chiller_status);
    stash.print("8,"); //Status aquecedor 0 = desligado, 100 = ligado
    stash.println(aquecedor_status);
    stash.print("9,"); //Status reator de calcio 0 = desligado, 100 = ligado
    stash.println(reator_status);
    stash.print("10,"); // Status ozonizador 0 = desligado, 100 = ligado
    stash.println(ozonio_status);
    stash.print("11,"); //Status reposicao de agua doce 0 = desligado, 100 = ligado
    stash.println(reposicao_status);
    stash.print("12,"); //Status niveis 0 = baixo, 100 = normaj
    stash.println(niveis_status);
    stash.print("13,"); //Status TPA 0 = desligado, 100 = ligado
    stash.println(tpa_status);
    stash.print("14,"); //Potencia dos leds azuis
    stash.println(LedToPercent(bled_out));
    stash.print("15,"); //Potencia dos leds brancos
    stash.println(LedToPercent(wled_out));

    stash.save();

    // generate the header with payload - note that the stash size is used,
    // and that a "stash descriptor" is passed in as argument using "$H"
    Stash::prepare(PSTR("PUT http://$F/v2/feeds/$F.csv HTTP/1.0" "\r\n"
      "Host: $F" "\r\n"
      "X-PachubeApiKey: $F" "\r\n"
      "Content-Length: $D" "\r\n"
      "\r\n"
      "$H"),
    website, PSTR(FEED), website, PSTR(APIKEY), stash.size(), sd);

    // send the packet - this also releases all stash buffers once done
    ether.tcpSend();
  }
}

void check_PH_reator()
{ 
  if (PHR < (setPHR + offPHR + alarmPHR) && PHR > (setPHR - offPHR - alarmPHR)) 
  {
    PHRAflag = false;
  }
  if (alarmPHR > 0)           // liga o alarme
  {
    if ((PHR > (setPHR + offPHR + alarmPHR)) || (PHR <= (setPHR - offPHR - alarmPHR)))
    {
      PHRAflag=true;
    }
  }
  if (PHR < setPHR)       
  {
    PHRflag = false;
    digitalWrite(reatorPin, LOW);  // Desliga co2 do reator de calcio
  }
  if (offPHR > 0)
  {
    if (PHR > setPHR)    
    {
      PHRflag = true;
      digitalWrite(reatorPin, HIGH); // Liga co2 do reator de calcio
    }
  }
  if ((PHR < 4) || (PHR > 10))
  {
    PHRflag = false;
    digitalWrite(reatorPin, LOW);  // Desliga co2 do reator de calcio
  }     
}

void check_PH_aquario()
{ 
  if (PHA < (setPHA + offPHA + alarmPHA) && PHA > (setPHA - offPHA - alarmPHA)) 
  {
    PHAAflag = false;
  }
  if (alarmPHA > 0)           // liga o alarme
  {
    if ((PHA >= (setPHA + offPHR + alarmPHA)) || (PHA <= (setPHA - offPHA - alarmPHA)))
    {
      PHAAflag=true;
    }
  }
  if (PHA < (setPHA - offPHA)) // Se PH do aquario menor que o desejado menos a variacao permitida. 
  {
    PHRflag = false;
    digitalWrite(reatorPin, LOW);  // Desliga co2 do reator de calcio
  }  
}

void check_densidade()
{ 
  if (DEN < (setDEN + offDEN + alarmDEN) && DEN > (setDEN - offDEN - alarmDEN)) 
  {
    DENAflag = false;
  }
  if (alarmDEN > 0)           // liga o alarme
  {
    if ((DEN >= (setDEN + offPHR + alarmDEN)) || (DEN <= (setDEN - offDEN - alarmDEN)))
    {
      DENAflag=true;
    }
  }   
}

void check_ORP()
{ 
  if (ORP < (setORP + offORP + alarmORP) && ORP > (setORP - offORP - alarmORP)) 
  {
    ORPAflag = false;
  }
  if (alarmORP > 0)            // liga o alarme
  {
    if ((ORP >= (setORP + offORP + alarmORP)) || (ORP <= (setORP - offORP - alarmORP)))
    {
      ORPAflag=true;
    }
  }
  if (ORP > setORP)    
  {
    ORPflag = false;
    digitalWrite(ozonizadorPin, LOW);  // Desliga ozonizador
  }
  if (offORP > 0)
  {
    if (ORP < setORP)    
    {
      ORPflag = true;
      digitalWrite(ozonizadorPin, HIGH); // Liga ozonizador
    }
    if ((ORP < 100) || (ORP > 500))
    {
      ORPflag = false;
      digitalWrite(ozonizadorPin, LOW); // Desliga ozonizador
    }
  }
}
void check_alarme()
{
  if ((PHRAflag == true) || (tempAflag == true) || (PHAAflag == true) || (DENAflag == true) || (ORPAflag == true))
  {
    digitalWrite (alarmPin, HIGH);
  }
  else
  {
    digitalWrite (alarmPin, LOW);
  }
}
static void sendToTwitter () {
  // generate two fake values as payload - by using a separate stash,
  // we can determine the size of the generated message ahead of time
  ether.dnsLookup(website1);
  byte sd = stash.create();
  stash.println("status=@Fernando_GSouza >>>Hello!");
  stash.save();

  // generate the header with payload - note that the stash size is used,
  // and that a "stash descriptor" is passed in as argument using "$H"
  Stash::prepare(PSTR("POST /1/statuses/update.xml HTTP/1.1" "\r\n"
    "Host: $F" "\r\n"
    "Authorization: Basic $F" "\r\n"
    "User-Agent: Arduino EtherCard lib" "\r\n"                        
    "Content-Length: $D" "\r\n"
    "Content-Type: application/x-www-form-urlencoded" "\r\n"
    "\r\n"
    "$H"),
  website1, PSTR(KEY), stash.size(), sd);

  // send the packet - this also releases all stash buffers once done
  ether.tcpSend();
}


//-------------------------------------------Touch screen----------------------------
void processMyTouch()
{
  myTouch.read();
  x=myTouch.getX();
  y=myTouch.getY();
  if ((x>=iniC[0]) && (x<=iniC[2]) && (y>=iniC[1]) && (y<=iniC[3]) && (dispScreen!=0))  // volta ao inicio
  {
    waitForIt(iniC[0], iniC[1], iniC[2], iniC[3]);
    LEDtestTick = false;
    dispScreen=0;
    clearScreen();
    mainScreen(true);
    modo_manual = false;
    modo_automatico = false;
    modo_personalizado = false;
    modo_calibrar = false;
    dosadora_1_selecionada = false;
    dosadora_2_selecionada = false;
    dosadora_3_selecionada = false;    
  } 
  else
  {
    switch (dispScreen) 
    {
    case 0:                       //Tela de inico
      dispScreen=30;
      clearScreen();
      solicitar_senha();
      break;
    case 1:     //------------------------------------Tela de menu-------------------------------------------------
      if ((x>=tanD[0]) && (x<=tanD[2]))               //first column
      {
        if ((y>=tanD[1]) && (y<=tanD[3]))             //press clock
        {
          waitForIt(tanD[0], tanD[1], tanD[2], tanD[3]);
          dispScreen=2;
          clearScreen();
          setClock();
        }

        if ((y>=tesT[1]) && (y<=tesT[3]))              //press LED test
        {
          waitForIt(tesT[0], tesT[1], tesT[2], tesT[3]);
          dispScreen=3;
          clearScreen();
          testScreen(true);
        }  
        if ((y>=temC[1]) && (y<=temC[3]))               //controle de parametros
        {
          waitForIt(temC[0], temC[1], temC[2], temC[3]);
          dispScreen=14;
          clearScreen();
          parametroScreen();
        }
        if ((y>=graF[1]) && (y<=graF[3]))           // seleciona a funcao grafico
        {
          waitForIt(graF[0], graF[1], graF[2], graF[3]);
          dispScreen=9;
          clearScreen();
          graficoScreen();
        } 
      }
      if ((x>=ledW[0]) && (x<=ledW[2]))                 //second column
      {
        if  ((y>=ledW[1]) && (y<=ledW[3]))           //press change LED values
        {
          waitForIt(ledW[0], ledW[1], ledW[2], ledW[3]);
          dispScreen=5;
          WorB=WHITE;
          clearScreen();
          ledSetScreen();
        } 
        if  ((y>=tpaA[1]) && (y<=tpaA[3]))           // seleciona a funcao "TPA automatica"
        {
          waitForIt(tpaA[0], tpaA[1], tpaA[2], tpaA[3]);
          dispScreen=7;
          clearScreen();
          tpaScreen(true);
        }      
        if  ((y>=dosA[1]) && (y<=dosA[3]))           // seleciona a funcao "Bomba dosadora"
        {
          waitForIt(dosA[0], dosA[1], dosA[2], dosA[3]);
          dispScreen=8;
          clearScreen();
          menu_dosadoras();
        } 
        if ((y>=wavM[1]) && (y<=wavM[3]))           // seleciona a funcao "wavemaker"
        {
          waitForIt(wavM[0], wavM[1], wavM[2], wavM[3]);
          dispScreen=10;
          clearScreen();
          waveScreen(true);
        } 
      }
      break;

    case 2:    // -------------------------------------Tela configuracao data e hora---------------------

      if ((y>=houU[1]) && (y<=houU[3])) // Buttons: Time UP
      {
        if((x>=houU[0]) && (x<=houU[2]))
        {
          waitForIt(houU[0], houU[1], houU[2], houU[3]);

          t_temp.hour = (t_temp.hour+1) %24;
          if (t_temp.hour<10)
          {
            myGLCD.printNumI(0, 70, 48);
            myGLCD.printNumI(t_temp.hour, 86, 48);
          }
          else
          {
            myGLCD.printNumI(t_temp.hour, 70, 48);
          }
          if (ct==false)
          {
            ct=true;
            myGLCD.setColor(255, 0, 0);
            myGLCD.setFont(SmallFont);
            myGLCD.print("ALTERADO!", 10, 200);
            myGLCD.setColor(255, 255, 255);
            myGLCD.setFont(BigFont);
          }      
        }
        else if ((x>=minU[0]) && (x<=minU[2]))
        {
          waitForIt(minU[0], minU[1], minU[2], minU[3]);
          t_temp.min = (t_temp.min +1) %60;
          if (t_temp.min<10)
          {
            myGLCD.printNumI(0, 160, 48);
            myGLCD.printNumI(t_temp.min, 176, 48);
          }
          else
          {
            myGLCD.printNumI(t_temp.min, 160, 48);
          }   
          if (ct==false)
          {
            ct=true;
            myGLCD.setColor(255, 0, 0);
            myGLCD.setFont(SmallFont);
            myGLCD.print("ALTERADO!", 10, 200);
            myGLCD.setColor(255, 255, 255);
            myGLCD.setFont(BigFont);
          }
        }
        else if ((x>=segC[0]) && (x<=segC[2]))
        {
          waitForIt(segC[0], segC[1], segC[2], segC[3]);
          t_temp.sec = (t_temp.sec +1) %60;
          if (t_temp.sec==60)
            t_temp.sec=0;
          if (t_temp.sec<10)
          {
            myGLCD.printNumI(0, 250, 48);
            myGLCD.printNumI(t_temp.sec, 266, 48);
          }
          else
          {
            myGLCD.printNumI(t_temp.sec, 250, 48);
          } 
          if (ct==false)
          {
            ct=true;
            myGLCD.setColor(255, 0, 0);
            myGLCD.setFont(SmallFont);
            myGLCD.print("ALTERADO!", 10, 200);
            myGLCD.setColor(255, 255, 255);
            myGLCD.setFont(BigFont);
          }      
        }
      }
      else if ((y>=houD[1]) && (y<=houD[3])) // Buttons: Time DOWN
      {
        if ((x>=houD[0]) && (x<=houD[2]))
        {
          waitForIt(houD[0], houD[1], houD[2], houD[3]);
          t_temp.hour =(t_temp.hour + 23)% 24;
          if (t_temp.hour<10)
          {
            myGLCD.printNumI(0, 70, 48);
            myGLCD.printNumI(t_temp.hour, 86, 48);
          }
          else
          {
            myGLCD.printNumI(t_temp.hour, 70, 48);
          }            
          if (ct==false)
          {
            ct=true;
            myGLCD.setColor(255, 0, 0);
            myGLCD.setFont(SmallFont);
            myGLCD.print("ALTERADO!", 10, 200);
            myGLCD.setColor(255, 255, 255);
            myGLCD.setFont(BigFont);
          }
        }
        else if ((x>=minD[0]) && (x<=minD[2]))
        {
          waitForIt(minD[0], minD[1], minD[2], minD[3]);
          t_temp.min =(t_temp.min +59) %60;
          if (t_temp.min<10)
          {
            myGLCD.printNumI(0, 160, 48);
            myGLCD.printNumI(t_temp.min, 176, 48);
          }
          else
          {
            myGLCD.printNumI(t_temp.min, 160, 48);
          } 
          if (ct==false)
          {
            ct=true;
            myGLCD.setColor(255, 0, 0);
            myGLCD.setFont(SmallFont);
            myGLCD.print("ALTERADO!", 10, 200);
            myGLCD.setColor(255, 255, 255);
            myGLCD.setFont(BigFont);
          }
        }
        else if ((x>=segB[0]) && (x<=segB[2]))
        {
          waitForIt(segB[0], segB[1], segB[2], segB[3]); 
          t_temp.sec = (t_temp.sec +59) %60;
          if (t_temp.sec<10)
          {
            myGLCD.printNumI(0, 250, 48);
            myGLCD.printNumI(t_temp.sec, 266, 48);
          }
          else
          {
            myGLCD.printNumI(t_temp.sec, 250, 48);
          }
          if (ct==false)
          {
            ct=true;
            myGLCD.setColor(255, 0, 0);
            myGLCD.setFont(SmallFont);
            myGLCD.print("ALTERADO!", 10, 200);
            myGLCD.setColor(255, 255, 255);
            myGLCD.setFont(BigFont);
          }
        }
      }

      if ((y>=dayU[1]) && (y<=dayU[3])) // Buttons: Date UP
      {
        if ((x>=dayU[0]) && (x<=dayU[2]))
        {
          waitForIt(dayU[0], dayU[1], dayU[2], dayU[3]);
          t_temp.date+=1;
          t_temp.date=validateDate(t_temp.date, t_temp.mon, t_temp.year);
          if (t_temp.date<10)
          {
            myGLCD.printNumI(0, 70, 132);
            myGLCD.printNumI(t_temp.date, 86, 132);
          }
          else
          {
            myGLCD.printNumI(t_temp.date, 70, 132);
          }
          if (ct==false)
          {
            ct=true;
            myGLCD.setColor(255, 0, 0);
            myGLCD.setFont(SmallFont);
            myGLCD.print("ALTERADO!", 10, 200);
            myGLCD.setColor(255, 255, 255);
            myGLCD.setFont(BigFont);
          }
        }
        else if ((x>=monU[0]) && (x<=monU[2]))
        {
          waitForIt(monU[0], monU[1], monU[2], monU[3]);
          t_temp.mon =(t_temp.mon + 1) %13;
          if (t_temp.mon ==0)
          {
            t_temp.mon = 1;
          }
          if (t_temp.mon<10)
          {
            myGLCD.printNumI(0, 160, 132);
            myGLCD.printNumI(t_temp.mon, 176, 132);
          }
          else
          {
            myGLCD.printNumI(t_temp.mon, 160, 132);
          }

          t_temp.date=validateDateForMonth(t_temp.date, t_temp.mon, t_temp.year);
          if (ct==false)
          {
            ct=true;
            myGLCD.setColor(255, 0, 0);
            myGLCD.setFont(SmallFont);
            myGLCD.print("ALTERADO!", 10, 200);
            myGLCD.setColor(255, 255, 255);
            myGLCD.setFont(BigFont);
          }
        }
        else if ((x>=yeaU[0]) && (x<=yeaU[2]))   
        {
          waitForIt(yeaU[0], yeaU[1], yeaU[2], yeaU[3]);
          t_temp.year+=1;
          if (t_temp.year==2100)
            t_temp.year=2000;
          myGLCD.printNumI(t_temp.year, 230, 132);

          t_temp.date=validateDateForMonth(t_temp.date, t_temp.mon, t_temp.year);
          if (ct==false)
          {
            ct=true;
            myGLCD.setColor(255, 0, 0);
            myGLCD.setFont(SmallFont);
            myGLCD.print("ALTERADO!", 10, 200);
            myGLCD.setColor(255, 255, 255);
            myGLCD.setFont(BigFont);
          }
        }
        t_temp.dow=calcDOW(t_temp.date, t_temp.mon, t_temp.year);
      }
      else if ((y>=dayD[1]) && (y<=dayD[3]))  // Buttons: Date DOWN
      {
        if ((x>=dayD[0]) && (x<=dayD[2]))
        {
          waitForIt(dayD[0], dayD[1], dayD[2], dayD[3]);
          t_temp.date-=1;
          t_temp.date=validateDate(t_temp.date, t_temp.mon, t_temp.year);
          if (t_temp.date<10)
          {
            myGLCD.printNumI(0, 70, 132);
            myGLCD.printNumI(t_temp.date, 86, 132);
          }
          else
          {
            myGLCD.printNumI(t_temp.date, 70, 132);
          }
          if (ct==false)
          {
            ct=true;
            myGLCD.setColor(255, 0, 0);
            myGLCD.setFont(SmallFont);
            myGLCD.print("ALTERADO!", 10, 200);
            myGLCD.setColor(255, 255, 255);
            myGLCD.setFont(BigFont);
          }
        }
        else if ((x>=monD[0]) && (x<=monD[2]))   
        {
          waitForIt(monD[0], monD[1], monD[2], monD[3]);
          t_temp.mon =(t_temp.mon +12) %13;
          if (t_temp.mon ==0)
          {
            t_temp.mon = 12;
          }
          if (t_temp.mon<10)
          {
            myGLCD.printNumI(0, 160, 132);
            myGLCD.printNumI(t_temp.mon, 176, 132);
          }
          else
          {
            myGLCD.printNumI(t_temp.mon, 160, 132);
          }
          t_temp.date=validateDateForMonth(t_temp.date, t_temp.mon, t_temp.year);
          if (ct==false)
          {
            ct=true;
            myGLCD.setColor(255, 0, 0);
            myGLCD.setFont(SmallFont);
            myGLCD.print("ALTERADO!", 10, 200);
            myGLCD.setColor(255, 255, 255);
            myGLCD.setFont(BigFont);
          }
        }

        else if ((x>=yeaD[0]) && (x<=yeaD[2]))
        {
          waitForIt(yeaD[0], yeaD[1], yeaD[2], yeaD[3]);
          t_temp.year = (t_temp.year +2099) %2100;

          myGLCD.printNumI(t_temp.year, 230, 132);
          t_temp.date=validateDateForMonth(t_temp.date, t_temp.mon, t_temp.year);
          if (ct==false)
          {
            ct=true;
            myGLCD.setColor(255, 0, 0);
            myGLCD.setFont(SmallFont);
            myGLCD.print("ALTERADO!", 10, 200);
            myGLCD.setColor(255, 255, 255);
            myGLCD.setFont(BigFont);
          }          
        }
        t_temp.dow=calcDOW(t_temp.date, t_temp.mon, t_temp.year);
      }
      if ((y>=prOK[1]) && (y<=prOK[3]) && (x>=prOK[0]) && (x<=prOK[2]))
      {
        waitForIt(prOK[0], prOK[1], prOK[2], prOK[3]); //funcao salvar
        rtc.halt(true);
        rtc.setTime(t_temp.hour, t_temp.min, t_temp.sec); 
        rtc.setDate(t_temp.date, t_temp.mon, t_temp.year);
        rtc.setDOW(t_temp.dow);
        rtc.halt(false);
        dispScreen=0;
        clearScreen();
        mainScreen(true);
      }
      if ((y>=iniC[1]) && (y<=iniC[3]) && (x>=iniC[0]) && (x<=iniC[2]))
      {
        waitForIt(iniC[0], iniC[1], iniC[2], iniC[3]); //volta ao inicio
        dispScreen=0;
        clearScreen();
        mainScreen(true);
      }
      if ((y>=menU[1]) && (y<=menU[3]) && (x>=menU[0]) && (x<=menU[2]))
      {
        waitForIt(menU[0], menU[1], menU[2], menU[3]); //volta ao menu
        dispScreen=1;
        clearScreen();
        menuScreen();
      }     
      break;
    case 3:                    // -------------------Tela testar led------------------------------------------
      if ((x>=stsT[0]) && (x<=stsT[2]) && (y>=stsT[1]) && (y<=stsT[3]))     //press start/stop test
      {
        waitForIt(stsT[0], stsT[1], stsT[2], stsT[3]); 

        if (LEDtestTick) {
          LEDtestTick = false;
          testScreen(true);
        }
        else {
          LEDtestTick = true;             
          testScreen(); 
        }
      } 
      else
      {
        if ((x>=tenM[0]) && (x<=tenM[2]) && (y>=tenM[1]) && (y<=tenM[3]))      //press -10s
        {
          min_cnt -= 10;
          if (min_cnt<0) {
            min_cnt= 0; 
          }

        }
        if ((x>=tenP[0]) && (x<=tenP[2]) && (y>=tenP[1]) && (y<=tenP[2]))    //press +10s
        {
          min_cnt += 10;
          if (min_cnt>1440) {
            min_cnt = 1440; 
          }

        }
        else if ((x>=menU[0]) && (x<=menU[2]) && (y>=menU[1]) && (y<=menU[3]))           // volta ao menu
        {
          waitForIt(menU[0], menU[1], menU[2], menU[3]);
          dispScreen=1;
          LEDtestTick = false;
          clearScreen();
          menuScreen(); 
        } 
      }
      break;
    case 4:             //---------------------------------------Tela controle de temperatura----------------------------------
      if ((x>=prOK[0]) && (x<=prOK[2]) && (y>=prOK[1]) && (y<=prOK[3]))       //Funcao salvar
      {
        waitForIt(prOK[0], prOK[1], prOK[2], prOK[3]);
        setTempC = temp2beS;
        offTempC = temp2beO;
        alarmTempC = temp2beA;
        dispScreen=0;
        SaveTempToEEPROM();
        clearScreen();
        mainScreen(true);
      } 
      else
      {
        if ((x>=temM[0]) && (x<=temM[2]))                         // Primeira coluna
        {
          if ((y>=temM[1]) && (y<=temM[3]))                      //press temp minus
          {
            waitForIt(temM[0], temM[1], temM[2], temM[3]);
            temp2beS -= 0.1;
            if (temp2beS<10) {
              temp2beS = 10; 
            }
            tempScreen();
          }
          if ((y>=offM[1]) && (y<=offM[3]))                       //press offset minus
          {
            waitForIt(offM[0], offM[1], offM[2], offM[3]);
            temp2beO -= 0.1;
            if (temp2beO <= 0.1) {
              temp2beO = 0.0; 
            }
            tempScreen();
          }          
          if ((y>=almM[1]) && (y<=almM[3]))                        //press alarm minus
          {
            waitForIt(almM[0], almM[1], almM[2], almM[3]);
            temp2beA -= 0.1;
            if (temp2beA < 0.1) {
              temp2beA = 0.0;  
            }
            tempScreen();
          }
        }
        if ((x>=temP[0]) && (x<=temP[2]))                             //Segunda coluna
        {
          if ((y>=temP[1]) && (y<=temP[3]))                      //press temp plus
          {
            waitForIt(temP[0], temP[1], temP[2], temP[3]);
            temp2beS += 0.1;
            if (temp2beS >= 40) {
              temp2beS = 40; 
            }
            tempScreen();
          }
          if ((y>=offP[1]) && (y<=offP[3]))                           //press offset plus
          {
            waitForIt(offP[0], offP[1], offP[2], offP[3]);
            temp2beO += 0.1;
            if (temp2beO >= 10) {
              temp2beO = 9.9; 
            }
            tempScreen();
          }
          if ((y>=almP[1]) && (y<=almP[3]))                           //press alarm plus
          {
            waitForIt(almP[0], almP[1], almP[2], almP[3]);
            temp2beA += 0.1;
            if (temp2beA >= 10) {
              temp2beA = 9.9;  
            }
            tempScreen();
          }
        }
        if ((x>=menU[0]) && x<=menU[2] && (y>=menU[1]) && (y<=menU[3]))           // volta ao menu
        {
          waitForIt(menU[0], menU[1], menU[2], menU[3]);
          dispScreen=14;
          clearScreen();
          parametroScreen();
        } 

      }
      break;
    case 5:         // --------------------------------Tela alterar valores led------------------------------------------------------------
      if ((x>=menU[0]) && (x<=menU[2]) && (y>=menU[1]) && (y<=menU[3]))           // volta ao menu
      {
        waitForIt(menU[0], menU[1], menU[2], menU[3]);
        dispScreen=1;
        clearScreen();
        menuScreen();
      }

      if ((x>=leWB[0]) && (x<=leWB[2]) && (y>=leWB[1]) && (y<=leWB[3]))       //press show white/blue
      {
        waitForIt(leWB[0], leWB[1], leWB[2], leWB[3]);
        if (WorB)
          WorB = false;
        else
          WorB = true;
        clearScreen();
        ledSetScreen();
      } 
      else if ((x>=leST[0]) && (x<=leST[2]) && (y>=leST[1]) && (y<=leST[3]))       //press change
      {
        waitForIt(leST[0], leST[1], leST[2], leST[3]);
        dispScreen=6;
        clearScreen();
        ledChangeScreen();
      }
      else if ((x>=savE[0]) && (x<=savE[2]) && (y>=savE[1]) && (y<=savE[3]))      //press save to EEPROM
      {
        waitForIt(savE[0], savE[1], savE[2], savE[3]);
        SaveLEDToEEPROM();
        dispScreen=0;
        clearScreen();
        mainScreen(true);
      }


      break;
    case 6:             //----------------------------------Tela alterar potencia dos leds---------------------
      if ((x>=leSh[0]) && (x<=leSh[2]) && (y>=leSh[1]) && (y<=leSh[3]))       //press OK
      {
        waitForIt(leSh[0], leSh[1], leSh[2], leSh[3]);
        dispScreen=5;
        if (WorB) {
          for (int i; i<88; i++) {
            wled[i]=tled[i]; 
          }
        } 
        else {
          for (int i; i<88; i++) {
            bled[i]=tled[i]; 
          }
        }
        clearScreen();
        ledSetScreen();
      }
      else if ((y>=15) && (y<=40))                                    //top row with times was touched
      {
        if ((x>=4) && (x<=316))
        {
          int oldLCT = LedChangTime;
          LedChangTime = map(x, 3, 320, 0, 12);                

          if (oldLCT != LedChangTime)                        //highlight touched time
          {
            myGLCD.setColor(0, 0, 0);
            myGLCD.fillRect((oldLCT*26)+5, 21, (oldLCT*26)+29, 45);
            setFont(SMALL, 0, 255, 255, 0, 0, 0);
            myGLCD.printNumI((oldLCT*2), (oldLCT*26)+10, 22);
            myGLCD.printNumI(((oldLCT*2)+2), (oldLCT*26)+10, 33);
            myGLCD.setColor(255, 0, 0);
            myGLCD.fillRect((LedChangTime*26)+5, 21, (LedChangTime*26)+29, 45);
            setFont(SMALL, 255, 255, 255, 255, 0, 0);
            myGLCD.printNumI((LedChangTime*2), (LedChangTime*26)+10, 22);
            myGLCD.printNumI(((LedChangTime*2)+2), (LedChangTime*26)+10, 33);

            for (int i=0; i<8; i++)                          //print led values for highlighted time
            {
              int k=(LedChangTime*8)+i;

              setFont(SMALL, 255, 255, 255, 0, 0, 0);
              myGLCD.print( "   ", (i*38)+12, 105);
              myGLCD.printNumI( tled[k], (i*38)+12, 105);
            }
          }
        }
      } 
      else if ((y>=70) && (y<=95))       //plus buttons were touched
      {
        for (int i=0; i<8; i++) {                
          if ((x>=(i*38)+10) && (x<=(i*38)+35)) {
            int k= (LedChangTime*8)+i;
            tled[k]++;
            if (tled[k]>255) {
              tled[k]=255; 
            }
            myGLCD.printNumI( tled[k], (i*38)+12, 105);
          }
        }
      }
      else if ((y>=125) && (y<=150))     //minus buttons were touched
      {
        for (int i=0; i<8; i++) {                
          if ((x>=(i*38)+10) && (x<=(i*38)+35)) {
            int k= (LedChangTime*8)+i;
            tled[k]--;
            if (tled[k]<0) {
              tled[k]=0; 
            }
            myGLCD.print( "  ", (i*38)+20, 105);
            myGLCD.printNumI( tled[k], (i*38)+12, 105);
          }
        }  
      }
      if ((x>=menU[0]) && x<=menU[2] && (y>=menU[1]) && (y<=menU[3]))           /// volta ao menu
      {
        waitForIt(menU[0], menU[1], menU[2], menU[3]);
        dispScreen=1;
        clearScreen();
        menuScreen(); 
      }

      break;
    case 7: //--------------------------------------------- configurar tpa autom.-----------------------------------
      if ((y >= houU[1]) && (y <= houU[3])) // Buttons: Time UP
      {
        if ((x >= houU[0]) && (x <= houU[2])) {
          waitForIt(houU[0], houU[1], houU[2], houU[3]);
          temp2hora = (temp2hora + 1) % 24;
          tpaScreen();
        } 
        if ((x >= minUT[0]) && (x <= minUT[2])) {
          waitForIt(minUT[0], minUT[1], minUT[2], minUT[3]);
          temp2minuto = (temp2minuto + 1) % 60;
          tpaScreen();
        } 
        if ((x >= durC[0]) && (x <= durC[2])) {
          waitForIt(durC[0], durC[1], durC[2], durC[3]); 
          temp2duracaomaximatpa = (temp2duracaomaximatpa + 1) % 60;
          tpaScreen();
        }
      } 
      if ((y >= houD[1]) && (y <= houD[3])) // Buttons: Time DOWN
      {
        if ((x >= houD[0]) && (x <= houD[2])) {
          waitForIt(houD[0], houD[1], houD[2], houD[3]);
          temp2hora = (temp2hora + 23) % 24;
          tpaScreen();
        } 
        if ((x >= minDT[0]) && (x <= minDT[2])) {
          waitForIt(minDT[0], minDT[1], minDT[2], minDT[3]);
          temp2minuto = (temp2minuto + 59) % 60;
          tpaScreen();
        } 
        if ((x >= durB[0]) && (x <= durB[2])) {
          waitForIt(durB[0], durB[1], durB[2], durB[3]);
          temp2duracaomaximatpa = (temp2duracaomaximatpa + 59) % 60;
          tpaScreen();          
        }
      }
      if ((y >= prOK[1]) && (y <= prOK[3]) && (x >= prOK[0]) && (x <= prOK[2])) {
        waitForIt(prOK[0], prOK[1], prOK[2], prOK[3]); //funcao salvar
        hora = temp2hora;
        minuto = temp2minuto;
        duracaomaximatpa = temp2duracaomaximatpa;
        segunda = temp2segunda;
        terca = temp2terca;
        quarta = temp2quarta;
        quinta = temp2quinta;
        sexta = temp2sexta;
        sabado = temp2sabado;
        domingo =temp2domingo;
        SalvartpaEEPROM();
        dispScreen = 0;
        clearScreen();
        mainScreen(true);
      }
      if ((y >= menU[1]) && (y <= menU[3]) && (x >= menU[0]) && (x <= menU[2])) {
        waitForIt(menU[0], menU[1], menU[2], menU[3]); //volta ao menu
        dispScreen = 1;
        clearScreen();
        menuScreen();
      }
      if ((x >= segU[0]) && (x <= segU[2]) && (y >= segU[1]) && (y <= segU[3])) {
        if (temp2segunda == 1) {
          temp2segunda = 0;
          tpaScreen();
        } 
        else {
          temp2segunda = 1;
          tpaScreen();
        }
      }
      if ((x >= terC[0]) && (x <= terC[2]) && (y >= terC[1]) && (y <= terC[3])) {
        if (temp2terca == 2) {
          temp2terca = 0;
          tpaScreen();
        } 
        else {
          temp2terca = 2;
          tpaScreen();
        }
      }
      if ((x >= quaR[0]) && (x <= quaR[2]) && (y >= quaR[1]) && (y <= quaR[3])) {

        if (temp2quarta == 3) {
          temp2quarta = 0;
          tpaScreen();
        } 
        else {
          temp2quarta = 3;
          tpaScreen();
        }
      }
      if ((x >= quiN[0]) && (x <= quiN[2]) && (y >= quiN[1]) && (y <= quiN[3])) {

        if (temp2quinta == 4) {
          temp2quinta = 0;
          tpaScreen();
        } 
        else {
          temp2quinta = 4;
          tpaScreen();
        }
      }
      if ((x >= sexT[0]) && (x <= sexT[2]) && (y >= sexT[1]) && (y <= sexT[3])) {
        if (temp2sexta == 5) {
          temp2sexta = 0;
          tpaScreen();
        } 
        else {
          temp2sexta = 5;
          tpaScreen();
        }
      }
      if ((x >= sabA[0]) && (x <= sabA[2]) && (y >= sabA[1]) && (y <= sabA[3])) {
        if (temp2sabado == 6) {
          temp2sabado = 0;
          tpaScreen();
        } 
        else {
          temp2sabado = 6;
          tpaScreen();
        }
      }
      if ((x >= domI[0]) && (x <= domI[2]) && (y >= domI[1]) && (y <= domI[3])) {
        if (temp2domingo == 7) {
          temp2domingo = 0;
          tpaScreen();
        } 
        else {
          temp2domingo = 7;
          tpaScreen();
        }
      }
      break;
    case 8: //--------------------------------------------- Escolher dosadora -----------------------------------

      if ((x>=manU[0]) && x<=manU[2] && (y>=manU[1]) && (y<=manU[3]))
      {
        waitForIt(manU[0], manU[1], manU[2], manU[3]);
        modo_manual = true;
        modo_automatico = false;
        modo_personalizado = false;
        modo_calibrar = false;
        dispScreen = 21;
        clearScreen();
        selecionar_dosadora(true);
        setFont(SMALL, 255, 255, 255, 0, 0, 0);
        myGLCD.print("MODO MANUAL SELECIONADO", 15, 220);
      }
      if ((x>=autO[0]) && x<=autO[2] && (y>=autO[1]) && (y<=autO[3]))
      {
        waitForIt(autO[0], autO[1], autO[2], autO[3]);
        modo_manual = false;
        modo_automatico = true;
        modo_personalizado = false;
        modo_calibrar = false;
        dispScreen = 21;
        clearScreen();
        selecionar_dosadora(true);
        setFont(SMALL, 255, 255, 255, 0, 0, 0);
        myGLCD.print("MODO AUTOMATICO SELECIONADO", 15, 220);      
      } 
      if ((x>=perS[0]) && x<=perS[2] && (y>=perS[1]) && (y<=perS[3]))
      {
        waitForIt(perS[0], perS[1], perS[2], perS[3]);
        modo_manual = false;
        modo_automatico = false;
        modo_personalizado = true;
        modo_calibrar = false;
        dispScreen = 21;
        clearScreen();
        selecionar_dosadora(true);
        setFont(SMALL, 255, 255, 255, 0, 0, 0);
        myGLCD.print("MODO PERSONALIZADO SELECIONADO", 15, 220);      
      }
      if ((x>=caliB[0]) && x<=caliB[2] && (y>=caliB[1]) && (y<=caliB[3]))
      {
        waitForIt(caliB[0], caliB[1], caliB[2], caliB[3]);
        modo_manual = false;
        modo_automatico = false;
        modo_personalizado = false;
        modo_calibrar = true;
        dispScreen=21;
        clearScreen();
        selecionar_dosadora(true);
        setFont(SMALL, 255, 255, 255, 0, 0, 0);
        myGLCD.print("MODO CALIBRACAO SELECIONADO", 15, 220);      
      }    
      if ((x>=menU[0]) && x<=menU[2] && (y>=menU[1]) && (y<=menU[3]))           /// volta ao menu
      {
        waitForIt(menU[0], menU[1], menU[2], menU[3]);
        dispScreen=1;
        clearScreen();
        menuScreen();
        modo_manual = false;
        modo_automatico = false;
        modo_personalizado = false;
        modo_calibrar = false; 
      }          
      if ((x>=reV[0]) && x<=reV[2] && (y>=reV[1]) && (y<=reV[3]))           /// volta ao menu
      {
        waitForIt(reV[0], reV[1], reV[2], reV[3]);
        dispScreen=32;
        clearScreen();
        rever_dosagem_personalizada();
      }
      break;    

    case 9: //  -----------------------------------------Tela escolher graficos-----------------------------------------
      if ((x>=orP[0]) && x<=orP[2] && (y>=orP[1]) && (y<=orP[3]))           
      {
        waitForIt(orP[0], orP[1], orP[2], orP[3]);
        dispScreen=12;
        clearScreen();
        orpScreen(); 
      } 
      if ((x>=phR[0]) && x<=phR[2] && (y>=phR[1]) && (y<=phR[3]))           
      {
        waitForIt(phR[0], phR[1], phR[2], phR[3]);
        dispScreen=13;
        clearScreen();
        PHRScreen(); 
      } 
      if ((x>=tempG[0]) && x<=tempG[2] && (y>=tempG[1]) && (y<=tempG[3]))           
      {
        waitForIt(tempG[0], tempG[1], tempG[2], tempG[3]);
        dispScreen=13;
        clearScreen();
        tempgScreen(); 
      }
      if ((x>=phA[0]) && x<=phA[2] && (y>=phA[1]) && (y<=phA[3]))           
      {
        waitForIt(phA[0], phA[1], phA[2], phA[3]);
        dispScreen=17;
        clearScreen();
        PHAScreen(); 
      } 
      if ((x>=denS[0]) && x<=denS[2] && (y>=denS[1]) && (y<=denS[3]))           
      {
        waitForIt(denS[0], denS[1], denS[2], denS[3]);
        dispScreen=19;
        clearScreen();
        densidadeScreen(); 
      }       

      if ((x>=menU[0]) && x<=menU[2] && (y>=menU[1]) && (y<=menU[3]))           /// volta ao menu
      {
        waitForIt(menU[0], menU[1], menU[2], menU[3]);
        dispScreen=1;
        clearScreen();
        menuScreen(); 
      }          
      break;

    case 10: //--------------------------------- Tela wavemaker ----------------------------
      if ((x>=menU[0]) && x<=menU[2] && (y>=menU[1]) && (y<=menU[3]))           // volta ao menu
      {
        waitForIt(menU[0], menU[1], menU[2], menU[3]);
        dispScreen = 1;
        clearScreen();
        menuScreen(); 
      }
      break;

    case 11:  //----------------------------- Tela grafico de temperatura ------------------------------
      if ((x>=menU[0]) && x<=menU[2] && (y>=menU[1]) && (y<=menU[3]))           /// volta ao menu
      {
        waitForIt(menU[0], menU[1], menU[2], menU[3]);
        dispScreen=1;
        clearScreen();
        menuScreen(); 
      }
      if ((x>=volT[0]) && x<=volT[2] && (y>=volT[1]) && (y<=volT[3]))           // volta a tela de graficos
      {
        waitForIt(volT[0], volT[1], volT[2], volT[3]);
        dispScreen=9;
        clearScreen();
        graficoScreen(); 
      }           
      break;

    case 12:  //--------------------------- Tela grafico de orp---------------------------------------
      if ((x>=menU[0]) && x<=menU[2] && (y>=menU[1]) && (y<=menU[3]))           /// volta ao menu
      {
        waitForIt(menU[0], menU[1], menU[2], menU[3]);
        dispScreen=1;
        clearScreen();
        menuScreen(); 
      }
      if ((x>=volT[0]) && x<=volT[2] && (y>=volT[1]) && (y<=volT[3]))           // volta a tela de graficos
      {
        waitForIt(volT[0], volT[1], volT[2], volT[3]);
        dispScreen=9;
        clearScreen();
        graficoScreen(); 
      }  
      break;           

    case 13:   //-----------------Tela grafico de ph do aquario----------------------------------
      if ((x>=menU[0]) && x<=menU[2] && (y>=menU[1]) && (y<=menU[3]))           // volta ao menu
      {
        waitForIt(menU[0], menU[1], menU[2], menU[3]);
        dispScreen=1;
        clearScreen();
        menuScreen(); 
      }
      if ((x>=volT[0]) && x<=volT[2] && (y>=volT[1]) && (y<=volT[3]))         // volta a tela de graficos
      {
        waitForIt(volT[0], volT[1], volT[2], volT[3]);
        dispScreen=9;
        clearScreen();
        graficoScreen(); 
      } 
      break; 

    case 14:  //--------------------------------Tela escolher parametro para configurar-----------------------------------
      if ((x>=orP[0]) && x<=orP[2] && (y>=orP[1]) && (y<=orP[3]))           
      {
        waitForIt(orP[0], orP[1], orP[2], orP[3]);
        dispScreen=16;
        clearScreen();
        config_orp_Screen(true); 
      } 
      if ((x>=phR[0]) && x<=phR[2] && (y>=phR[1]) && (y<=phR[3]))           
      {
        waitForIt(phR[0], phR[1], phR[2], phR[3]);
        dispScreen=15;
        clearScreen();
        config_phR_Screen(true); 
      }
      if ((x>=phA[0]) && x<=phA[2] && (y>=phA[1]) && (y<=phA[3]))           
      {
        waitForIt(phA[0], phA[1], phA[2], phA[3]);
        dispScreen=18;
        clearScreen();
        config_phA_Screen(true); 
      } 
      if ((x>=tempG[0]) && x<=tempG[2] && (y>=tempG[1]) && (y<=tempG[3]))           
      {
        waitForIt(tempG[0], tempG[1], tempG[2], tempG[3]);
        dispScreen=4;
        clearScreen();
        tempScreen(true); 
      }
      if ((x>=caliB[0]) && x<=caliB[2] && (y>=caliB[1]) && (y<=caliB[3]))           
      {
        waitForIt(caliB[0], caliB[1], caliB[2], caliB[3]);
        dispScreen=0;
        clearScreen();
        mainScreen(true); 
      }
      if ((x>=denS[0]) && x<=denS[2] && (y>=denS[1]) && (y<=denS[3]))           
      {
        waitForIt(denS[0], denS[1], denS[2], denS[3]);
        dispScreen=20;
        clearScreen();
        config_dens_Screen(true); 
      }  
      if ((x>=menU[0]) && x<=menU[2] && (y>=menU[1]) && (y<=menU[3]))           /// volta ao menu
      {
        waitForIt(menU[0], menU[1], menU[2], menU[3]);
        dispScreen=1;
        clearScreen();
        menuScreen(); 
      }          
      break;
    case 15:             //---------------------------------------Tela controle de PH do reator--------
      if ((x>=prOK[0]) && (x<=prOK[2]) && (y>=prOK[1]) && (y<=prOK[3]))       //Funcao salvar
      {
        waitForIt(prOK[0], prOK[1], prOK[2], prOK[3]);
        setPHR = PHR2beS;
        offPHR = PHR2beO;
        alarmPHR = PHR2beA;
        dispScreen=0;
        SavePHRToEEPROM();
        clearScreen();
        mainScreen(true);
      } 
      else
      {
        if ((x>=temM[0]) && (x<=temM[2]))                         // Primeira coluna
        {
          if ((y>=temM[1]) && (y<=temM[3]))                      //press ph minus
          {
            waitForIt(temM[0], temM[1], temM[2], temM[3]);
            PHR2beS -= 0.1;
            config_phR_Screen();
          }
          if ((y>=offM[1]) && (y<=offM[3]))                       //press offset minus
          {
            waitForIt(offM[0], offM[1], offM[2], offM[3]);
            PHR2beO -= 0.1;
            if (PHR2beO <= 0.1) {
              PHR2beO = 0.0; 
            }
            config_phR_Screen();
          }          
          if ((y>=almM[1]) && (y<=almM[3]))                        //press alarm minus
          {
            waitForIt(almM[0], almM[1], almM[2], almM[3]);
            PHR2beA -= 0.1;
            if (PHR2beA < 0.1) {
              PHR2beA = 0.0;  
            }
            config_phR_Screen();
          }
        }
        if ((x>=temP[0]) && (x<=temP[2]))                             //Segunda coluna
        {
          if ((y>=temP[1]) && (y<=temP[3]))                      //press ph plus
          {
            waitForIt(temP[0], temP[1], temP[2], temP[3]);
            PHR2beS += 0.1;
            if (PHR2beS > 9.9)
            {
              PHR2beS = 9.9;
            }
            config_phR_Screen();            
          }
          if ((y>=offP[1]) && (y<=offP[3]))                           //press offset plus
          {
            waitForIt(offP[0], offP[1], offP[2], offP[3]);
            PHR2beO += 0.1;
            if (PHR2beO > 9.9)
            {
              PHR2beO = 9.9;
            }
            config_phR_Screen();

          }
          if ((y>=almP[1]) && (y<=almP[3]))                           //press alarm plus
          {
            waitForIt(almP[0], almP[1], almP[2], almP[3]);
            PHR2beA += 0.1;
            if (PHR2beA > 9.9)
            {
              PHR2beA = 9.9;
            }
            config_phR_Screen();
          }
        }
        if ((x>=menU[0]) && x<=menU[2] && (y>=menU[1]) && (y<=menU[3]))           // volta ao menu
        {
          waitForIt(menU[0], menU[1], menU[2], menU[3]);
          dispScreen=14;
          clearScreen();
          parametroScreen(); 
        } 

      }
      break;
    case 16:             //---------------------------------------Tela controle de ORP---------------------------------
      if ((x>=prOK[0]) && (x<=prOK[2]) && (y>=prOK[1]) && (y<=prOK[3]))       //Funcao salvar
      {
        waitForIt(prOK[0], prOK[1], prOK[2], prOK[3]);
        setORP = ORP2beS;
        offORP = ORP2beO;
        alarmORP = ORP2beA;
        dispScreen=0;
        SaveORPToEEPROM();
        clearScreen();
        mainScreen(true);
      } 
      else
      {
        if ((x>=temM[0]) && (x<=temM[2]))                         // Primeira coluna
        {
          if ((y>=temM[1]) && (y<=temM[3]))                      //press orp minus
          {
            waitForIt(temM[0], temM[1], temM[2], temM[3]);
            ORP2beS -= 10;
            if (ORP2beS < 100)
            {
              ORP2beS =100;
            }
            config_orp_Screen();
          }
          if ((y>=offM[1]) && (y<=offM[3]))                       //press offset minus
          {
            waitForIt(offM[0], offM[1], offM[2], offM[3]);
            ORP2beO -= 10;
            if (ORP2beO < 10)
            {
              ORP2beO = 10;
            }
            config_orp_Screen();
          }          
          if ((y>=almM[1]) && (y<=almM[3]))                        //press alarm minus
          {
            waitForIt(almM[0], almM[1], almM[2], almM[3]);
            ORP2beA -= 10;
            if (ORP2beA < 10)
            {
              ORP2beA = 10;
            }
            config_orp_Screen();
          }
        }
        if ((x>=temP[0]) && (x<=temP[2]))                             //Segunda coluna
        {
          if ((y>=temP[1]) && (y<=temP[3]))                      //press orp plus
          {
            waitForIt(temP[0], temP[1], temP[2], temP[3]);
            ORP2beS += 10;
            if (ORP2beS >999)
            {
              ORP2beS = 990;
            }
            config_orp_Screen();
          }
          if ((y>=offP[1]) && (y<=offP[3]))                           //press offset plus
          {
            waitForIt(offP[0], offP[1], offP[2], offP[3]);
            ORP2beO += 10;
            if (ORP2beO >999)
            {
              ORP2beO = 990;
            }
            config_orp_Screen();
          }
          if ((y>=almP[1]) && (y<=almP[3]))                           //press alarm plus
          {
            waitForIt(almP[0], almP[1], almP[2], almP[3]);
            ORP2beA += 10;
            if (ORP2beA >999)
            {
              ORP2beA = 990;
            }
            config_orp_Screen();
          }
        }
        if ((x>=menU[0]) && x<=menU[2] && (y>=menU[1]) && (y<=menU[3]))           // volta ao menu
        {
          waitForIt(menU[0], menU[1], menU[2], menU[3]);
          dispScreen=14;
          clearScreen();
          parametroScreen();
        } 

      }
      break;
    case 17:   //---------------------Tela grafico de ph do reator de calcio-------------------------------------
      if ((x>=menU[0]) && x<=menU[2] && (y>=menU[1]) && (y<=menU[3]))           /// volta ao menu
      {
        waitForIt(menU[0], menU[1], menU[2], menU[3]);
        dispScreen=1;
        clearScreen();
        menuScreen(); 
      }
      if ((x>=volT[0]) && x<=volT[2] && (y>=volT[1]) && (y<=volT[3]))           // volta a tela de graficos
      {
        waitForIt(volT[0], volT[1], volT[2], volT[3]);
        dispScreen=9;
        clearScreen();
        graficoScreen(); 
      }  
      break; 

    case 18: //--------------------------Tela configuracao de ph do aquario-----------------------------------
      if ((x>=prOK[0]) && (x<=prOK[2]) && (y>=prOK[1]) && (y<=prOK[3]))       //Funcao salvar
      {
        waitForIt(prOK[0], prOK[1], prOK[2], prOK[3]);
        setPHA = PHA2beS;
        offPHA = PHA2beO;
        alarmPHA = PHA2beA;
        dispScreen=0;
        SavePHAToEEPROM();
        clearScreen();
        mainScreen(true);
      } 
      else
      {
        if ((x>=temM[0]) && (x<=temM[2]))                         // Primeira coluna
        {
          if ((y>=temM[1]) && (y<=temM[3]))                      //press ph minus
          {
            waitForIt(temM[0], temM[1], temM[2], temM[3]);
            PHA2beS -= 0.1;
            config_phA_Screen();
            if (PHA2beS <0.1)
            {
              PHA2beS = 0.0;
            }
          }
          if ((y>=offM[1]) && (y<=offM[3]))                       //press offset minus
          {
            waitForIt(offM[0], offM[1], offM[2], offM[3]);
            PHA2beO -= 0.1;
            if (PHA2beO < 0.1) {
              PHA2beO = 0.0; 
            }
            config_phA_Screen();
          }          
          if ((y>=almM[1]) && (y<=almM[3]))                        //press alarm minus
          {
            waitForIt(almM[0], almM[1], almM[2], almM[3]);
            PHA2beA -= 0.1;
            if (PHA2beA < 0.1) {
              PHA2beA = 0.0;  
            }
            config_phA_Screen();
          }
        }
        if ((x>=temP[0]) && (x<=temP[2]))                             //Segunda coluna
        {
          if ((y>=temP[1]) && (y<=temP[3]))                      //press temp plus
          {
            waitForIt(temP[0], temP[1], temP[2], temP[3]);
            PHA2beS += 0.1;
            if (PHA2beS > 9.9)
            {
              PHA2beS = 9.9;
            }            
            config_phA_Screen();
          }
          if ((y>=offP[1]) && (y<=offP[3]))                           //press offset plus
          {
            waitForIt(offP[0], offP[1], offP[2], offP[3]);
            PHA2beO += 0.1;
            if (PHA2beO > 9.9)
            {
              PHA2beO = 9.9;
            }
            config_phA_Screen();
          }
          if ((y>=almP[1]) && (y<=almP[3]))                           //press alarm plus
          {
            waitForIt(almP[0], almP[1], almP[2], almP[3]);
            PHA2beA += 0.1;
            if (PHA2beA > 9.9)
            {
              PHA2beA = 9.9;
            }
            config_phA_Screen();
          }
        }
        if ((x>=menU[0]) && x<=menU[2] && (y>=menU[1]) && (y<=menU[3]))           // volta ao menu
        {
          waitForIt(menU[0], menU[1], menU[2], menU[3]);
          dispScreen=14;
          clearScreen();
          parametroScreen(); 
        } 

      }
      break;

    case 19://----------------------Tela grafico de densidade----------------------------------
      if ((x>=menU[0]) && x<=menU[2] && (y>=menU[1]) && (y<=menU[3]))           /// volta ao menu
      {
        waitForIt(menU[0], menU[1], menU[2], menU[3]);
        dispScreen=1;
        clearScreen();
        menuScreen(); 
      }
      if ((x>=volT[0]) && x<=volT[2] && (y>=volT[1]) && (y<=volT[3]))           // volta a tela de graficos
      {
        waitForIt(volT[0], volT[1], volT[2], volT[3]);
        dispScreen=9;
        clearScreen();
        graficoScreen(); 
      }  
      break;

    case 20: //--------------------------Tela configuração densidade  -----------------------------------------------------
      if ((x>=prOK[0]) && (x<=prOK[2]) && (y>=prOK[1]) && (y<=prOK[3]))       //Funcao salvar
      {
        waitForIt(prOK[0], prOK[1], prOK[2], prOK[3]);
        setDEN = DEN2beS;
        offDEN = DEN2beO;
        alarmDEN = DEN2beA;
        dispScreen=0;
        SaveDENToEEPROM();
        clearScreen();
        mainScreen(true);
      } 
      else
      {
        if ((x>=temM[0]) && (x<=temM[2]))                         // Primeira coluna
        {
          if ((y>=temM[1]) && (y<=temM[3]))                      //press densidade minus
          {
            waitForIt(temM[0], temM[1], temM[2], temM[3]);
            DEN2beS -= 1;
            if (DEN2beS < 1000)
            {
              DEN2beS = 1000;
            }
            config_dens_Screen();
          }
          if ((y>=offM[1]) && (y<=offM[3]))                       //press offset minus
          {
            waitForIt(offM[0], offM[1], offM[2], offM[3]);
            DEN2beO -= 1;
            if (DEN2beO < 1)
            {
              DEN2beO = 0;
            }
            config_dens_Screen();
          }          
          if ((y>=almM[1]) && (y<=almM[3]))                        //press alarm minus
          {
            waitForIt(almM[0], almM[1], almM[2], almM[3]);
            DEN2beA -= 1;
            if (DEN2beA < 1)
            {
              DEN2beA =0;
            }
            config_dens_Screen();
          }
        }
        if ((x>=temP[0]) && (x<=temP[2]))                             //Segunda coluna
        {
          if ((y>=temP[1]) && (y<=temP[3]))                      //press densidade plus
          {
            waitForIt(temP[0], temP[1], temP[2], temP[3]);
            DEN2beS += 1;
            if (DEN2beS > 9999)
            {
              DEN2beS = 9999;
            }
            config_dens_Screen();
          }
          if ((y>=offP[1]) && (y<=offP[3]))                           //press offset plus
          {
            waitForIt(offP[0], offP[1], offP[2], offP[3]);
            DEN2beO += 1;
            if (DEN2beO > 9999)
            {
              DEN2beO = 9999;
            }
            config_dens_Screen();
          }
          if ((y>=almP[1]) && (y<=almP[3]))                           //press alarm plus
          {
            waitForIt(almP[0], almP[1], almP[2], almP[3]);
            DEN2beA += 1;
            if (DEN2beA > 9999)
            {
              DEN2beA = 9999;
            }
            config_dens_Screen();
          }
        }
        if ((x>=menU[0]) && x<=menU[2] && (y>=menU[1]) && (y<=menU[3]))           // volta ao menu
        {
          waitForIt(menU[0], menU[1], menU[2], menU[3]);
          dispScreen=14;
          clearScreen();
          parametroScreen(); 
        } 
      }
      break;
    case 21: // ------------------------------------------------ Escolher dosadora -----------------------------------

      if ((x>=dosa1[0]) && x<=dosa1[2] && (y>=dosa1[1]) && (y<=dosa1[3]))         
      {
        waitForIt(dosa1[0], dosa1[1], dosa1[2], dosa1[3]);
        if (modo_manual == true)
        {
          dosadora_1_selecionada = true;
          dosadora_2_selecionada = false;
          dosadora_3_selecionada = false;
          dispScreen = 27;
          clearScreen();
          config_dosagem_manual(true);
        }
        if (modo_automatico == true)
        {
          dosadora_1_selecionada = true;
          dosadora_2_selecionada = false;
          dosadora_3_selecionada = false;
          dispScreen = 28;
          clearScreen();
          config_dosagem_automatica(true);
        }          
        if (modo_personalizado == true)
        {
          dosadora_1_selecionada = true;
          dosadora_2_selecionada = false;
          dosadora_3_selecionada = false;
          dispScreen = 29;
          clearScreen();
          config_dosagem_personalizada(true);
        }

        if (modo_calibrar == true)
        {
          dosadora_1_selecionada = true;
          dosadora_2_selecionada = false;
          dosadora_3_selecionada = false;
          dispScreen = 26;
          clearScreen();
          calibrar_dosadoras(true);
        }           
      }
      if ((x>=dosa2[0]) && x<=dosa2[2] && (y>=dosa2[1]) && (y<=dosa2[3]))         
      {
        waitForIt(dosa2[0], dosa2[1], dosa2[2], dosa2[3]);
        if (modo_manual == true)
        {
          dosadora_2_selecionada = true;
          dosadora_1_selecionada = false;
          dosadora_3_selecionada = false;
          dispScreen = 27;
          clearScreen();
          config_dosagem_manual(true);
        }
        if (modo_automatico == true)
        {
          dosadora_2_selecionada = true;
          dosadora_1_selecionada = false;
          dosadora_3_selecionada = false;
          dispScreen = 28;
          clearScreen();
          config_dosagem_automatica(true);
        }          
        if (modo_personalizado == true)
        {
          dosadora_2_selecionada = true;
          dosadora_1_selecionada = false;
          dosadora_3_selecionada = false;
          dispScreen = 29;
          clearScreen();
          config_dosagem_personalizada(true);
        }

        if (modo_calibrar == true)
        {
          dosadora_2_selecionada = true;
          dosadora_1_selecionada = false;
          dosadora_3_selecionada = false;
          dispScreen = 26;
          clearScreen();
          calibrar_dosadoras(true);
        } 
      }
      if ((x>=dosa3[0]) && x<=dosa3[2] && (y>=dosa3[1]) && (y<=dosa3[3]))         
      {
        waitForIt(dosa3[0], dosa3[1], dosa3[2], dosa3[3]);
        if (modo_manual == true)
        {
          dosadora_3_selecionada = true;
          dosadora_1_selecionada = false;
          dosadora_2_selecionada = false;
          dispScreen = 27;
          clearScreen();
          config_dosagem_manual(true);
        }
        if (modo_automatico == true)
        {
          dosadora_3_selecionada = true;
          dosadora_1_selecionada = false;
          dosadora_2_selecionada = false;
          dispScreen = 28;
          clearScreen();
          config_dosagem_automatica(true);
        }          
        if (modo_personalizado == true)
        {
          dosadora_3_selecionada = true;
          dosadora_1_selecionada = false;
          dosadora_2_selecionada = false;
          dispScreen = 29;
          clearScreen();
          config_dosagem_personalizada(true);
        }

        if (modo_calibrar == true)
        {
          dosadora_3_selecionada = true;
          dosadora_1_selecionada = false;
          dosadora_2_selecionada = false;
          dispScreen = 26;
          clearScreen();
          calibrar_dosadoras(true);
        }  
      }        
      if ((x>=menU[0]) && x<=menU[2] && (y>=menU[1]) && (y<=menU[3]))           // volta ao menu
      {
        waitForIt(menU[0], menU[1], menU[2], menU[3]);
        dispScreen = 1;
        clearScreen();
        menuScreen(); 
        modo_manual = false;
        modo_automatico = false;
        modo_personalizado = false;
        modo_calibrar = false;
        dosadora_1_selecionada = false;
        dosadora_2_selecionada = false;
        dosadora_3_selecionada = false; 
      }
      if ((x>=volT[0]) && x<=volT[2] && (y>=volT[1]) && (y<=volT[3]))           // volta a tela de escolha da dosadora
      {
        waitForIt(volT[0], volT[1], volT[2], volT[3]);
        dispScreen = 8;
        clearScreen();
        menu_dosadoras();
        modo_manual = false;
        modo_automatico = false;
        modo_personalizado = false;
        modo_calibrar = false;
        dosadora_1_selecionada = false;
        dosadora_2_selecionada = false;
        dosadora_3_selecionada = false; 
      }
      break;

    case 26: //------------------------------------ calibrar dosadoras -------------------------------------------
      if ((x>=almP[0]) && x<=almP[2] && (y>=almP[1]) && (y<=almP[3]) && (dosadora_1_selecionada == true))            //fator calibracao mais.
      {
        waitForIt(almP[0], almP[1], almP[2], almP[3]);
        fator_calib_dosadora_1_temp2 += 0.1;
        if (fator_calib_dosadora_1_temp2 > 99.9)
        {
          fator_calib_dosadora_1_temp2 = 0.0;
        }
        calibrar_dosadoras();
      }
      if ((x>=almM[0]) && x<=almM[2] && (y>=almM[1]) && (y<=almM[3]) && (dosadora_1_selecionada == true))            //fator calibracao menos.
      {
        waitForIt(almM[0], almM[1], almM[2], almM[3]);
        fator_calib_dosadora_1_temp2 -= 0.1;
        if (fator_calib_dosadora_1_temp2 < 0.1)
        {
          fator_calib_dosadora_1_temp2 = 99.9;
        }
        calibrar_dosadoras();
      }
      if ((x>=almP[0]) && x<=almP[2] && (y>=almP[1]) && (y<=almP[3]) && (dosadora_2_selecionada == true))            //fator calibracao mais.
      {
        waitForIt(almP[0], almP[1], almP[2], almP[3]);
        fator_calib_dosadora_2_temp2 += 0.1;
        if (fator_calib_dosadora_2_temp2 > 99.9)
        {
          fator_calib_dosadora_2_temp2 = 0.0;
        }
        calibrar_dosadoras();
      }
      if ((x>=almM[0]) && x<=almM[2] && (y>=almM[1]) && (y<=almM[3]) && (dosadora_2_selecionada == true))            //fator calibracao menos.
      {
        waitForIt(almM[0], almM[1], almM[2], almM[3]);
        fator_calib_dosadora_2_temp2 -= 0.1;
        if (fator_calib_dosadora_2_temp2 < 0.1)
        {
          fator_calib_dosadora_2_temp2 = 99.9;
        }
        calibrar_dosadoras();
      }          
      if ((x>=almP[0]) && x<=almP[2] && (y>=almP[1]) && (y<=almP[3]) && (dosadora_3_selecionada == true))            //fator calibracao mais.
      {
        waitForIt(almP[0], almP[1], almP[2], almP[3]);
        fator_calib_dosadora_3_temp2 += 0.1;
        if (fator_calib_dosadora_3_temp2 > 99.9)
        {
          fator_calib_dosadora_3_temp2 = 0.0;
        }
        calibrar_dosadoras();
      }
      if ((x>=almM[0]) && x<=almM[2] && (y>=almM[1]) && (y<=almM[3]) && (dosadora_3_selecionada == true))            //fator calibracao menos.
      {
        waitForIt(almM[0], almM[1], almM[2], almM[3]);
        fator_calib_dosadora_3_temp2 -= 0.1;
        if (fator_calib_dosadora_3_temp2 < 0.1)
        {
          fator_calib_dosadora_3_temp2 = 99.9;
        }
        calibrar_dosadoras();
      }    
      if ((x>=salV[0]) && x<=salV[2] && (y>=salV[1]) && (y<=salV[3]))
      {
        if(dosadora_1_selecionada == true)
        {
          fator_calib_dosadora_1 = fator_calib_dosadora_1_temp2;
          Salvar_dosadora_EEPROM();
          dispScreen = 21;
          clearScreen();
          selecionar_dosadora(true);
          setFont(SMALL, 255, 255, 255, 0, 0, 0);
          myGLCD.print("MODO CALIBRACAO SELECIONADO", 15, 220);
          modo_manual = false;
          modo_automatico = false;
          modo_personalizado = false;
          modo_calibrar = true;
          dosadora_1_selecionada = false;
          dosadora_2_selecionada = false;
          dosadora_3_selecionada = false;
        }        
        if(dosadora_2_selecionada == true)
        {
          fator_calib_dosadora_2 = fator_calib_dosadora_2_temp2;
          Salvar_dosadora_EEPROM();
          dispScreen = 21;
          clearScreen();
          selecionar_dosadora(true);
          setFont(SMALL, 255, 255, 255, 0, 0, 0);
          myGLCD.print("MODO CALIBRACAO SELECIONADO", 15, 220);
          modo_manual = false;
          modo_automatico = false;
          modo_personalizado = false;
          modo_calibrar = true;
          dosadora_1_selecionada = false;
          dosadora_2_selecionada = false;
          dosadora_3_selecionada = false;
        }
        if(dosadora_3_selecionada == true)
        {
          fator_calib_dosadora_3 = fator_calib_dosadora_3_temp2;
          Salvar_dosadora_EEPROM();
          dispScreen = 21;
          clearScreen();
          selecionar_dosadora(true);
          setFont(SMALL, 255, 255, 255, 0, 0, 0);
          myGLCD.print("MODO CALIBRACAO SELECIONADO", 15, 220);
          modo_manual = false;
          modo_automatico = false;
          modo_personalizado = false;
          modo_calibrar = true;
          dosadora_1_selecionada = false;
          dosadora_2_selecionada = false;
          dosadora_3_selecionada = false;
        }
      }      
      if ((x>=volT[0]) && x<=volT[2] && (y>=volT[1]) && (y<=volT[3]))           // Volta a tela altera configuracao das dosadoras
      {
        waitForIt(volT[0], volT[1], volT[2], volT[3]);
        dispScreen = 21;
        clearScreen();
        selecionar_dosadora(true);
        setFont(SMALL, 255, 255, 255, 0, 0, 0);
        myGLCD.print("MODO CALIBRACAO SELECIONADO", 15, 220);
        modo_manual = false;
        modo_automatico = false;
        modo_personalizado = false;
        modo_calibrar = true;
        dosadora_1_selecionada = false;
        dosadora_2_selecionada = false;
        dosadora_3_selecionada = false; 
      }
      if ((x>=iniciaR[0]) && x<=iniciaR[2] && (y>=iniciaR[1]) && (y<=iniciaR[3]))
      {
        waitForIt(iniciaR[0], iniciaR[1], iniciaR[2], iniciaR[3]);
        if((modo_calibrar == true) && (dosadora_1_selecionada == true))
        {
          printButton_verde("INICIAR", iniciaR[0], iniciaR[1], iniciaR[2], iniciaR[3]);
          delay(10000);
          digitalWrite(dosadora1, HIGH);
          delay(60000);
          digitalWrite(dosadora1, LOW);
          printButton("INICIAR", iniciaR[0], iniciaR[1], iniciaR[2], iniciaR[3]);
        }
        if((modo_calibrar == true) && (dosadora_2_selecionada == true))
        {
          printButton_verde("INICIAR", iniciaR[0], iniciaR[1], iniciaR[2], iniciaR[3]);
          delay(10000);
          digitalWrite(dosadora2, HIGH);
          delay(60000);
          digitalWrite(dosadora2, LOW);
          printButton("INICIAR", iniciaR[0], iniciaR[1], iniciaR[2], iniciaR[3]);
        }
        if((modo_calibrar == true) && (dosadora_3_selecionada == true))
        {
          printButton_verde("INICIAR", iniciaR[0], iniciaR[1], iniciaR[2], iniciaR[3]);
          delay(10000);
          digitalWrite(dosadora3, HIGH);
          delay(60000);
          digitalWrite(dosadora3, LOW);
          printButton("INICIAR", iniciaR[0], iniciaR[1], iniciaR[2], iniciaR[3]);
        }
      }      
      break;
    case 27:   // ----------------------------------------- Config dosagem manual --------------------------------------
      if ((x>=almP[0]) && x<=almP[2] && (y>=almP[1]) && (y<=almP[3]) && (dosadora_1_selecionada == true))            //dose manual mais.
      {
        waitForIt(almP[0], almP[1], almP[2], almP[3]);
        dose_dosadora_1_manual += 0.5;
        if (dose_dosadora_1_manual > 99.5)
        {
          dose_dosadora_1_manual = 0.0;
        }
        config_dosagem_manual();
      }
      if ((x>=almM[0]) && x<=almM[2] && (y>=almM[1]) && (y<=almM[3]) && (dosadora_1_selecionada == true))            //dose manual menos.
      {
        waitForIt(almM[0], almM[1], almM[2], almM[3]);
        dose_dosadora_1_manual -= 0.5;
        if (dose_dosadora_1_manual < 0.5)
        {
          dose_dosadora_1_manual = 99.5;
        }
        config_dosagem_manual();
      }
      if ((x>=almP[0]) && x<=almP[2] && (y>=almP[1]) && (y<=almP[3]) && (dosadora_2_selecionada == true))            //dose manual mais.
      {
        waitForIt(almP[0], almP[1], almP[2], almP[3]);
        dose_dosadora_2_manual += 0.5;
        if (dose_dosadora_2_manual > 99.5)
        {
          dose_dosadora_2_manual = 0.0;
        }
        config_dosagem_manual();
      }
      if ((x>=almM[0]) && x<=almM[2] && (y>=almM[1]) && (y<=almM[3]) && (dosadora_2_selecionada == true))            //dose manual menos.
      {
        waitForIt(almM[0], almM[1], almM[2], almM[3]);
        dose_dosadora_2_manual -= 0.5;
        if (dose_dosadora_2_manual < 0.5)
        {
          dose_dosadora_2_manual = 99.5;
        }
        config_dosagem_manual();
      }          
      if ((x>=almP[0]) && x<=almP[2] && (y>=almP[1]) && (y<=almP[3]) && (dosadora_3_selecionada == true))            //dose manual mais.
      {
        waitForIt(almP[0], almP[1], almP[2], almP[3]);
        dose_dosadora_3_manual += 0.5;
        if (dose_dosadora_3_manual > 99.5)
        {
          dose_dosadora_3_manual = 0.5;
        }
        config_dosagem_manual();
      }
      if ((x>=almM[0]) && x<=almM[2] && (y>=almM[1]) && (y<=almM[3]) && (dosadora_3_selecionada == true))            //dose manual menos.
      {
        waitForIt(almM[0], almM[1], almM[2], almM[3]);
        dose_dosadora_3_manual -= 0.5;
        if (dose_dosadora_3_manual < 0.5)
        {
          dose_dosadora_3_manual = 99.5;
        }
        config_dosagem_manual();
      }    

      if ((x>=volT[0]) && x<=volT[2] && (y>=volT[1]) && (y<=volT[3]))           // Volta a tela altera configuracao das dosadoras
      {
        waitForIt(volT[0], volT[1], volT[2], volT[3]);
        dispScreen = 21;
        clearScreen();
        selecionar_dosadora(true);
        setFont(SMALL, 255, 255, 255, 0, 0, 0);
        myGLCD.print("MODO CALIBRACAO SELECIONADO", 15, 220);
        modo_manual = true;
        modo_automatico = false;
        modo_personalizado = false;
        modo_calibrar = false;
        dosadora_1_selecionada = false;
        dosadora_2_selecionada = false;
        dosadora_3_selecionada = false; 
      }
      if ((x>=iniciaR[0]) && x<=iniciaR[2] && (y>=iniciaR[1]) && (y<=iniciaR[3]))
      {
        waitForIt(iniciaR[0], iniciaR[1], iniciaR[2], iniciaR[3]);
        if((modo_manual == true) && (dosadora_1_selecionada == true))
        {
          if(fator_calib_dosadora_1 > 10)
          {
            printButton_verde("INICIAR", iniciaR[0], iniciaR[1], iniciaR[2], iniciaR[3]);  
            tempo_dosagem_1 = map ((dose_dosadora_1_manual*2), 0, fator_calib_dosadora_1, 0, 60000);
            tempo_dosagem_1 /= 2;                 
            delay(10000);
            digitalWrite(dosadora1, HIGH);
            delay(tempo_dosagem_1);
            digitalWrite(dosadora1, LOW);
            printButton("INICIAR", iniciaR[0], iniciaR[1], iniciaR[2], iniciaR[3]);
          }
        }
        if((modo_manual == true) && (dosadora_2_selecionada == true))
        {
          if(fator_calib_dosadora_2 > 10)
          {
            printButton_verde("INICIAR", iniciaR[0], iniciaR[1], iniciaR[2], iniciaR[3]);
            tempo_dosagem_2 = map ((dose_dosadora_2_manual*2), 0, fator_calib_dosadora_2, 0, 60000);
            tempo_dosagem_2 /= 2;
            delay(10000);
            digitalWrite(dosadora2, HIGH);
            delay(tempo_dosagem_2);
            digitalWrite(dosadora2, LOW);
            printButton("INICIAR", iniciaR[0], iniciaR[1], iniciaR[2], iniciaR[3]);
          }
        }
        if((modo_manual == true) && (dosadora_3_selecionada == true))
        {
          if(fator_calib_dosadora_3 > 10)
          {
            printButton_verde("INICIAR", iniciaR[0], iniciaR[1], iniciaR[2], iniciaR[3]);
            tempo_dosagem_3 = map ((dose_dosadora_3_manual*2), 0, fator_calib_dosadora_3, 0, 60000);
            tempo_dosagem_3 /= 2;
            delay(10000);
            digitalWrite(dosadora3, HIGH);
            delay(tempo_dosagem_3);
            digitalWrite(dosadora3, LOW);
            printButton("INICIAR", iniciaR[0], iniciaR[1], iniciaR[2], iniciaR[3]);
          }
        }
      }      
      break;
    case 28:   // ----------------------------------------- Config dosagem automatica --------------------------------------

      if ((x>=volT[0]) && x<=volT[2] && (y>=volT[1]) && (y<=volT[3]))           // // Volta a tela altera configuracao das dosadoras
      {
        waitForIt(volT[0], volT[1], volT[2], volT[3]);
        dispScreen = 21;
        clearScreen();
        selecionar_dosadora(true);
        setFont(SMALL, 255, 255, 255, 0, 0, 0);
        myGLCD.print("MODO AUTOMATICO SELECIONADO", 15, 220);
        modo_manual = false;
        modo_automatico = true;
        modo_personalizado = false;
        modo_calibrar = false;
        dosadora_1_selecionada = false;
        dosadora_2_selecionada = false;
        dosadora_3_selecionada = false; 
      }
      if(dosadora_1_selecionada == true)
      {
        if ((y >= houU[1]) && (y <= houU[3])) // Buttons: Time UP
        {
          if ((x >= houU[0]) && (x <= houU[2])) {
            waitForIt(houU[0], houU[1], houU[2], houU[3]);
            hora_inicial_dosagem_automatica_1_temp2 = (hora_inicial_dosagem_automatica_1_temp2 + 1) % 24;
            config_dosagem_automatica();
          } 
          if ((x >= minUT[0]) && (x <= minUT[2])) {
            waitForIt(minUT[0], minUT[1], minUT[2], minUT[3]);
            minuto_inicial_dosagem_automatica_1_temp2 = (minuto_inicial_dosagem_automatica_1_temp2 + 1) % 60;
            config_dosagem_automatica();
          } 


          if ((x >= houU[0] + deslocamento_botao_x) && (x <= houU[2] + deslocamento_botao_x)) {
            waitForIt(houU[0] + deslocamento_botao_x, houU[1], houU[2] + deslocamento_botao_x, houU[3]);
            hora_final_dosagem_automatica_1_temp2 = (hora_final_dosagem_automatica_1_temp2 + 1) % 24;
            config_dosagem_automatica();
          } 
          if ((x >= minUT[0] + deslocamento_botao_x) && (x <= minUT[2] + deslocamento_botao_x)) {
            waitForIt(minUT[0] + deslocamento_botao_x, minUT[1], minUT[2] + deslocamento_botao_x, minUT[3]);
            minuto_final_dosagem_automatica_1_temp2 = (minuto_final_dosagem_automatica_1_temp2 + 1) % 60;
            config_dosagem_automatica();
          }

        } 
        if ((y >= houD[1]) && (y <= houD[3])) // Buttons: Time DOWN
        {
          if ((x >= houD[0]) && (x <= houD[2])) {
            waitForIt(houD[0], houD[1], houD[2], houD[3]);
            hora_inicial_dosagem_automatica_1_temp2 = (hora_inicial_dosagem_automatica_1_temp2 + 23) % 24;
            config_dosagem_automatica();
          } 
          if ((x >= minDT[0]) && (x <= minDT[2])) {
            waitForIt(minDT[0], minDT[1], minDT[2], minDT[3]);
            minuto_inicial_dosagem_automatica_1_temp2 = (minuto_inicial_dosagem_automatica_1_temp2 + 59) % 60;
            config_dosagem_automatica();
          } 

          if ((x >= houD[0] + deslocamento_botao_x) && (x <= houD[2] + deslocamento_botao_x)) {
            waitForIt(houD[0] + deslocamento_botao_x, houD[1], houD[2] + deslocamento_botao_x, houD[3]);
            hora_final_dosagem_automatica_1_temp2 = (hora_final_dosagem_automatica_1_temp2 + 23) % 24;
            config_dosagem_automatica();
          } 
          if ((x >= minDT[0] + deslocamento_botao_x) && (x <= minDT[2] + deslocamento_botao_x)) {
            waitForIt(minDT[0] + deslocamento_botao_x, minDT[1], minDT[2] + deslocamento_botao_x, minDT[3]);
            minuto_final_dosagem_automatica_1_temp2 = (minuto_final_dosagem_automatica_1_temp2 + 59) % 60;
            config_dosagem_automatica();
          }
        }
        if ((x >= minUT[0]) && (x <= minUT[2]) && (y >= minUT[1]+ deslocamento_botao_y) && (y <= minUT[3] + deslocamento_botao_y)) // Dose diaria mais
        {
          waitForIt(minUT[0], minUT[1] + deslocamento_botao_y, minUT[2], minUT[3] + deslocamento_botao_y);
          dose_dosadora_1_automatica_temp2 += 0.5;
          if(dose_dosadora_1_automatica_temp2 > 999.5)
          {
            dose_dosadora_1_automatica_temp2 = 0.5;
          }
          if(dose_dosadora_1_automatica_temp2 <= 9.5)
          {
            myGLCD.setColor(0, 0, 0);                      
            myGLCD.fillRect(100, 45 + deslocamento_botao_y, 185, 67 + deslocamento_botao_y);
          }           

          config_dosagem_automatica();
        }
        if ((x >= minDT[0]) && (x <= minDT[2]) && (y >= minDT[1] + deslocamento_botao_y) && (y <= minDT[3] + deslocamento_botao_y)) // Dose diaria menos
        {
          waitForIt(minDT[0], minDT[1] + deslocamento_botao_y, minDT[2], minDT[3] + deslocamento_botao_y);
          dose_dosadora_1_automatica_temp2 -= 0.5;
          if(dose_dosadora_1_automatica_temp2 <0.5)
          {
            dose_dosadora_1_automatica_temp2 = 999.5;
          }
          if(dose_dosadora_1_automatica_temp2 <= 9.5)
          {
            myGLCD.setColor(0, 0, 0);                      
            myGLCD.fillRect(100, 45 + deslocamento_botao_y, 185, 67 + deslocamento_botao_y);
          }
          config_dosagem_automatica();
        }
        if ((x >= durC[0]) && (x <= durC[2]) && (y >= durC[1] + deslocamento_botao_y) && (y <= durC[3] + deslocamento_botao_y)) 
        {
          waitForIt(durC[0], durC[1] + deslocamento_botao_y, durC[2], durC[3] + deslocamento_botao_y); 
          quantidade_dose_dosadora_1_automatica_temp2 += 1;
          if(quantidade_dose_dosadora_1_automatica_temp2 > 24)
          {
            quantidade_dose_dosadora_1_automatica_temp2 = 1;
          }
          config_dosagem_automatica();
        }

        if ((x >= durB[0]) && (x <= durB[2]) && (y >= durB[1] + deslocamento_botao_y) && (y <= durB[3] + deslocamento_botao_y)) 
        {
          waitForIt(durB[0], durB[1] + deslocamento_botao_y, durB[2], durB[3] + deslocamento_botao_y);
          quantidade_dose_dosadora_1_automatica_temp2 -= 1;
          if(quantidade_dose_dosadora_1_automatica_temp2 < 1)
          {
            quantidade_dose_dosadora_1_automatica_temp2 = 24;
          }
          config_dosagem_automatica();        
        }
        if ((x >= domI[0]) && (x<= domI[2]) && (y >= domI [1]) && (y <= domI[3])) // Ativar ou desativar modo automatico
        {
          waitForIt(domI[0], domI[1], domI[2], domI[3]);
          if(modo_automatico_on_1_temp2 == 0)
          {
            modo_automatico_on_1_temp2 = 1;
            config_dosagem_automatica();
          }
          else
          {
            modo_automatico_on_1_temp2 = 0;
            config_dosagem_automatica();
          }
        }
        if ((y >= salV[1]) && (y <= salV[3]) && (x >= salV[0]) && (x <= salV[2])) 
        {
          waitForIt(salV[0], salV[1], salV[2], salV[3]); //funcao salvar
          dose_dosadora_1_automatica = dose_dosadora_1_automatica_temp2;
          quantidade_dose_dosadora_1_automatica = quantidade_dose_dosadora_1_automatica_temp2;
          modo_automatico_on_1 = modo_automatico_on_1_temp2;
          hora_inicial_dosagem_automatica_1 = hora_inicial_dosagem_automatica_1_temp2;
          minuto_inicial_dosagem_automatica_1 = minuto_inicial_dosagem_automatica_1_temp2;
          hora_final_dosagem_automatica_1 = hora_final_dosagem_automatica_1_temp2;
          minuto_final_dosagem_automatica_1 = minuto_final_dosagem_automatica_1_temp2;

          if((hora_final_dosagem_automatica_1_temp2 == hora_inicial_dosagem_automatica_1) && (minuto_final_dosagem_automatica_1_temp2 < (minuto_inicial_dosagem_automatica_1+10)))
          {
            setFont(SMALL, 255, 0, 0, 0, 0, 0);
            myGLCD.print("INTERVALO ", 225, 198);
            myGLCD.print("ERRADO!", 225, 218);

          }
          if(hora_final_dosagem_automatica_1_temp2 < hora_inicial_dosagem_automatica_1)
          {
            setFont(SMALL, 255, 0, 0, 0, 0, 0);
            myGLCD.print("HORA FINAL", 225, 198);
            myGLCD.print("ERRADA!", 225, 218);
          }
          if((hora_final_dosagem_automatica_1_temp2 == hora_inicial_dosagem_automatica_1) && (minuto_final_dosagem_automatica_1_temp2 >= (minuto_inicial_dosagem_automatica_1+10)))
          {
            Salvar_dosadora_EEPROM();
            dispScreen = 0;
            clearScreen();
            mainScreen(true);
            digitalWrite (4, LOW); 
            file.open(&root, "HDA1.TXT", O_WRITE);
            file.remove();       

            minuto01 = (((hora_final_dosagem_automatica_1 * 60) + (minuto_final_dosagem_automatica_1)) - ((hora_inicial_dosagem_automatica_1 * 60) + (minuto_inicial_dosagem_automatica_1))); 
            minuto01 /= 1 + quantidade_dose_dosadora_1_automatica; 
            minuto11 = minuto01 % 60; 
            hora11 = minuto01 - minuto11; 
            hora11 /= 60;   
            for(int i = 1; i <= quantidade_dose_dosadora_1_automatica; i++)
            { 
              contador += 1;  
              if(contador == 1)
              {
                minuto01 = minuto_inicial_dosagem_automatica_1 + minuto11;
                hora01 = hora_inicial_dosagem_automatica_1 + hora11; 
              }
              if(contador > 1)
              {
                minuto01 += minuto11;
                hora01 += hora11;  
              }

              if((quantidade_dose_dosadora_1_automatica == quantidade_dose_dosadora_2_automatica) || (quantidade_dose_dosadora_1_automatica == quantidade_dose_dosadora_3_automatica))
              {
                if((hora_inicial_dosagem_automatica_1 == hora_inicial_dosagem_automatica_2) || (hora_inicial_dosagem_automatica_1 == hora_inicial_dosagem_automatica_3))
                {
                  minuto01 += 10;
                }
              }

              if(minuto01 >= 60)
              {
                minuto01 -= 60;
                hora01 +=1;
              }
              file.open(&root, "HDA1.TXT", O_CREAT | O_APPEND | O_WRITE);

              if(hora01 <10)
              {
                file.print(0);
                file.print(hora01);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }
              else
              {
                file.print(hora01);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }    
            }
            contador = 0;
            file.open(&root, "MDA1.TXT", O_WRITE);
            file.remove(); 
            minuto01 = (((hora_final_dosagem_automatica_1 * 60) + (minuto_final_dosagem_automatica_1)) - ((hora_inicial_dosagem_automatica_1 * 60) + (minuto_inicial_dosagem_automatica_1)));
            minuto01 /= 1 + quantidade_dose_dosadora_1_automatica; 

            for(int j = 1; j <= quantidade_dose_dosadora_1_automatica; j++)
            { 
              contador += 1;   
              if(contador == 1)
              {
                minuto01 = minuto_inicial_dosagem_automatica_1 + minuto11;
              }
              if(contador > 1)
              {
                minuto01 += minuto11;  
              }
              if((quantidade_dose_dosadora_1_automatica == quantidade_dose_dosadora_2_automatica) || (quantidade_dose_dosadora_1_automatica == quantidade_dose_dosadora_3_automatica))
              {
                if((hora_inicial_dosagem_automatica_1 == hora_inicial_dosagem_automatica_2) || (hora_inicial_dosagem_automatica_1 == hora_inicial_dosagem_automatica_3))
                {
                  minuto01 += 10;
                }
              }  
              if(minuto01 >= 60)
              {
                minuto01 -= 60;
                hora01 += 1;
              }
              file.open(&root, "MDA1.TXT", O_CREAT | O_APPEND | O_WRITE);
              if(minuto01 <10)
              {
                file.print(0);
                file.print(minuto01);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }
              else
              {
                file.print(minuto01);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }    
            }
            contador = 0;
            digitalWrite (4, HIGH);    
          }
          if(hora_final_dosagem_automatica_1_temp2 > hora_inicial_dosagem_automatica_1)
          {
            Salvar_dosadora_EEPROM();
            dispScreen = 0;
            clearScreen();
            mainScreen(true);
            digitalWrite (4, LOW); 
            file.open(&root, "HDA1.TXT", O_WRITE);
            file.remove();       

            minuto01 = (((hora_final_dosagem_automatica_1 * 60) + (minuto_final_dosagem_automatica_1)) - ((hora_inicial_dosagem_automatica_1 * 60) + (minuto_inicial_dosagem_automatica_1)));
            minuto01 /= 1 + quantidade_dose_dosadora_1_automatica; 
            minuto11 = minuto01 % 60; 
            hora11 = minuto01 - minuto11; 
            hora11 /= 60;   
            for(int i = 1; i <= quantidade_dose_dosadora_1_automatica; i++)
            { 
              contador += 1;  
              if(contador == 1)
              {
                minuto01 = minuto_inicial_dosagem_automatica_1 + minuto11;
                hora01 = hora_inicial_dosagem_automatica_1 + hora11; //0 + 5 = 5 horas
              }
              if(contador > 1)
              {
                minuto01 += minuto11;
                hora01 += hora11;  //11 horas
              }
              if((quantidade_dose_dosadora_1_automatica == quantidade_dose_dosadora_2_automatica) || (quantidade_dose_dosadora_1_automatica == quantidade_dose_dosadora_3_automatica))
              {
                if((hora_inicial_dosagem_automatica_1 == hora_inicial_dosagem_automatica_2) || (hora_inicial_dosagem_automatica_1 == hora_inicial_dosagem_automatica_3))
                {
                  minuto01 += 10;
                }
              }
              if(minuto01 >= 60)
              {
                minuto01 -= 60;
                hora01 +=1;
              }
              file.open(&root, "HDA1.TXT", O_CREAT | O_APPEND | O_WRITE);
              if(hora01 <10)
              {
                file.print(0);
                file.print(hora01);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }
              else
              {
                file.print(hora01);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }    
            }
            contador = 0;
            file.open(&root, "MDA1.TXT", O_WRITE);
            file.remove(); 
            minuto01 = (((hora_final_dosagem_automatica_1 * 60) + (minuto_final_dosagem_automatica_1)) - ((hora_inicial_dosagem_automatica_1 * 60) + (minuto_inicial_dosagem_automatica_1)));
            minuto01 /= 1 + quantidade_dose_dosadora_1_automatica; 

            for(int j = 1; j <= quantidade_dose_dosadora_1_automatica; j++)
            { 
              contador += 1;   
              if(contador == 1)
              {
                minuto01 = minuto_inicial_dosagem_automatica_1 + minuto11;
              }
              if(contador > 1)
              {
                minuto01 += minuto11;  
              }  
              if((quantidade_dose_dosadora_1_automatica == quantidade_dose_dosadora_2_automatica) || (quantidade_dose_dosadora_1_automatica == quantidade_dose_dosadora_3_automatica))
              {
                if((hora_inicial_dosagem_automatica_1 == hora_inicial_dosagem_automatica_2) || (hora_inicial_dosagem_automatica_1 == hora_inicial_dosagem_automatica_3))
                {
                  minuto01 += 10;
                }
              }
              if(minuto01 >= 60)
              {
                minuto01 -= 60;
                hora01 += 1;
              }
              file.open(&root, "MDA1.TXT", O_CREAT | O_APPEND | O_WRITE);
              if(minuto01 <10)
              {
                file.print(0);
                file.print(minuto01);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }
              else
              {
                file.print(minuto01);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }    
            }
            contador = 0;
            digitalWrite (4, HIGH);    
          }      
        }           
      }
      if(dosadora_2_selecionada == true)
      {
        if ((y >= houU[1]) && (y <= houU[3])) // Buttons: Time UP
        {
          if ((x >= houU[0]) && (x <= houU[2])) {
            waitForIt(houU[0], houU[1], houU[2], houU[3]);
            hora_inicial_dosagem_automatica_2_temp2 = (hora_inicial_dosagem_automatica_2_temp2 + 1) % 24;
            config_dosagem_automatica();
          } 
          if ((x >= minUT[0]) && (x <= minUT[2])) {
            waitForIt(minUT[0], minUT[1], minUT[2], minUT[3]);
            minuto_inicial_dosagem_automatica_2_temp2 = (minuto_inicial_dosagem_automatica_2_temp2 + 1) % 60;
            config_dosagem_automatica();
          } 


          if ((x >= houU[0] + deslocamento_botao_x) && (x <= houU[2] + deslocamento_botao_x)) {
            waitForIt(houU[0] + deslocamento_botao_x, houU[1], houU[2] + deslocamento_botao_x, houU[3]);
            hora_final_dosagem_automatica_2_temp2 = (hora_final_dosagem_automatica_2_temp2 + 1) % 24;
            config_dosagem_automatica();
          } 
          if ((x >= minUT[0] + deslocamento_botao_x) && (x <= minUT[2] + deslocamento_botao_x)) {
            waitForIt(minUT[0] + deslocamento_botao_x, minUT[1], minUT[2] + deslocamento_botao_x, minUT[3]);
            minuto_final_dosagem_automatica_2_temp2 = (minuto_final_dosagem_automatica_2_temp2 + 1) % 60;
            config_dosagem_automatica();
          }

        } 
        if ((y >= houD[1]) && (y <= houD[3])) // Buttons: Time DOWN
        {
          if ((x >= houD[0]) && (x <= houD[2])) {
            waitForIt(houD[0], houD[1], houD[2], houD[3]);
            hora_inicial_dosagem_automatica_2_temp2 = (hora_inicial_dosagem_automatica_2_temp2 + 23) % 24;
            config_dosagem_automatica();
          } 
          if ((x >= minDT[0]) && (x <= minDT[2])) {
            waitForIt(minDT[0], minDT[1], minDT[2], minDT[3]);
            minuto_inicial_dosagem_automatica_2_temp2 = (minuto_inicial_dosagem_automatica_2_temp2 + 59) % 60;
            config_dosagem_automatica();
          } 

          if ((x >= houD[0] + deslocamento_botao_x) && (x <= houD[2] + deslocamento_botao_x)) {
            waitForIt(houD[0] + deslocamento_botao_x, houD[1], houD[2] + deslocamento_botao_x, houD[3]);
            hora_final_dosagem_automatica_2_temp2 = (hora_final_dosagem_automatica_2_temp2 + 23) % 24;
            config_dosagem_automatica();
          } 
          if ((x >= minDT[0] + deslocamento_botao_x) && (x <= minDT[2] + deslocamento_botao_x)) {
            waitForIt(minDT[0] + deslocamento_botao_x, minDT[1], minDT[2] + deslocamento_botao_x, minDT[3]);
            minuto_final_dosagem_automatica_2_temp2 = (minuto_final_dosagem_automatica_2_temp2 + 59) % 60;
            config_dosagem_automatica();
          }
        }
        if ((x >= minUT[0]) && (x <= minUT[2]) && (y >= minUT[1]+ deslocamento_botao_y) && (y <= minUT[3] + deslocamento_botao_y)) // Dose diaria mais
        {
          waitForIt(minUT[0], minUT[1] + deslocamento_botao_y, minUT[2], minUT[3] + deslocamento_botao_y);
          dose_dosadora_2_automatica_temp2 += 0.5;
          if(dose_dosadora_2_automatica_temp2 > 999.5)
          {
            dose_dosadora_2_automatica_temp2 = 0.5;
          }
          if(dose_dosadora_2_automatica_temp2 <= 9.5)
          {
            myGLCD.setColor(0, 0, 0);                      
            myGLCD.fillRect(100, 45 + deslocamento_botao_y, 185, 67 + deslocamento_botao_y);
          }           

          config_dosagem_automatica();
        }
        if ((x >= minDT[0]) && (x <= minDT[2]) && (y >= minDT[1] + deslocamento_botao_y) && (y <= minDT[3] + deslocamento_botao_y)) // Dose diaria menos
        {
          waitForIt(minDT[0], minDT[1] + deslocamento_botao_y, minDT[2], minDT[3] + deslocamento_botao_y);
          dose_dosadora_2_automatica_temp2 -= 0.5;
          if(dose_dosadora_2_automatica_temp2 <0.5)
          {
            dose_dosadora_2_automatica_temp2 = 999.5;
          }
          if(dose_dosadora_2_automatica_temp2 <= 9.5)
          {
            myGLCD.setColor(0, 0, 0);                      
            myGLCD.fillRect(100, 45 + deslocamento_botao_y, 185, 67 + deslocamento_botao_y);
          }
          config_dosagem_automatica();
        }
        if ((x >= durC[0]) && (x <= durC[2]) && (y >= durC[1] + deslocamento_botao_y) && (y <= durC[3] + deslocamento_botao_y)) 
        {
          waitForIt(durC[0], durC[1] + deslocamento_botao_y, durC[2], durC[3] + deslocamento_botao_y); 
          quantidade_dose_dosadora_2_automatica_temp2 += 1;
          if(quantidade_dose_dosadora_2_automatica_temp2 > 24)
          {
            quantidade_dose_dosadora_2_automatica_temp2 = 1;
          }
          config_dosagem_automatica();
        }

        if ((x >= durB[0]) && (x <= durB[2]) && (y >= durB[1] + deslocamento_botao_y) && (y <= durB[3] + deslocamento_botao_y)) 
        {
          waitForIt(durB[0], durB[1] + deslocamento_botao_y, durB[2], durB[3] + deslocamento_botao_y);
          quantidade_dose_dosadora_2_automatica_temp2 -= 1;
          if(quantidade_dose_dosadora_2_automatica_temp2 < 1)
          {
            quantidade_dose_dosadora_2_automatica_temp2 = 24;
          }
          config_dosagem_automatica();        
        }
        if ((x >= domI[0]) && (x<= domI[2]) && (y >= domI [1]) && (y <= domI[3])) // Ativar ou desativar modo automatico
        {
          waitForIt(domI[0], domI[1], domI[2], domI[3]);
          if(modo_automatico_on_2_temp2 == 0)
          {
            modo_automatico_on_2_temp2 = 1;
            config_dosagem_automatica();
          }
          else
          {
            modo_automatico_on_2_temp2 = 0;
            config_dosagem_automatica();
          }
        }
        if ((y >= salV[1]) && (y <= salV[3]) && (x >= salV[0]) && (x <= salV[2])) 
        {
          waitForIt(salV[0], salV[1], salV[2], salV[3]); //funcao salvar
          dose_dosadora_2_automatica = dose_dosadora_2_automatica_temp2;
          quantidade_dose_dosadora_2_automatica = quantidade_dose_dosadora_2_automatica_temp2;
          modo_automatico_on_2 = modo_automatico_on_2_temp2;
          hora_inicial_dosagem_automatica_2 = hora_inicial_dosagem_automatica_2_temp2;
          minuto_inicial_dosagem_automatica_2 = minuto_inicial_dosagem_automatica_2_temp2;
          hora_final_dosagem_automatica_2 = hora_final_dosagem_automatica_2_temp2;
          minuto_final_dosagem_automatica_2 = minuto_final_dosagem_automatica_2_temp2;

          if((hora_final_dosagem_automatica_2_temp2 == hora_inicial_dosagem_automatica_2) && (minuto_final_dosagem_automatica_2_temp2 < (minuto_inicial_dosagem_automatica_2+10)))
          {
            setFont(SMALL, 255, 0, 0, 0, 0, 0);
            myGLCD.print("INTERVALO ", 225, 198);
            myGLCD.print("ERRADO!", 225, 218);

          }
          if(hora_final_dosagem_automatica_2_temp2 < hora_inicial_dosagem_automatica_2)
          {
            setFont(SMALL, 255, 0, 0, 0, 0, 0);
            myGLCD.print("HORA FINAL", 225, 198);
            myGLCD.print("ERRADA!", 225, 218);
          }
          if((hora_final_dosagem_automatica_2_temp2 == hora_inicial_dosagem_automatica_2) && (minuto_final_dosagem_automatica_2_temp2 >= (minuto_inicial_dosagem_automatica_2+10)))
          {
            Salvar_dosadora_EEPROM();
            dispScreen = 0;
            clearScreen();
            mainScreen(true);
            digitalWrite (4, LOW); 
            file.open(&root, "HDA2.TXT", O_WRITE);
            file.remove();       

            minuto02 = (((hora_final_dosagem_automatica_2 * 60) + (minuto_final_dosagem_automatica_2)) - ((hora_inicial_dosagem_automatica_2 * 60) + (minuto_inicial_dosagem_automatica_2))); 
            minuto02 /= 1 + quantidade_dose_dosadora_2_automatica; 
            minuto12 = minuto02 % 60; 
            hora12 = minuto02 - minuto12; 
            hora12 /= 60;   
            for(int i = 1; i <= quantidade_dose_dosadora_2_automatica; i++)
            { 
              contador += 1;  
              if(contador == 1)
              {
                minuto02 = minuto_inicial_dosagem_automatica_2 + minuto12;
                hora02 = hora_inicial_dosagem_automatica_2 + hora12;
              }
              if(contador > 1)
              {
                minuto02 += minuto12;
                hora02 += hora12;
              }
              if((quantidade_dose_dosadora_1_automatica == quantidade_dose_dosadora_2_automatica) || (quantidade_dose_dosadora_1_automatica == quantidade_dose_dosadora_3_automatica))
              {
                if((hora_inicial_dosagem_automatica_1 == hora_inicial_dosagem_automatica_2) || (hora_inicial_dosagem_automatica_1 == hora_inicial_dosagem_automatica_3))
                {
                  minuto02 += 10;
                }
              }
              if(minuto02 >= 60)
              {
                minuto02 -= 60;
                hora02 +=1;
              }
              file.open(&root, "HDA2.TXT", O_CREAT | O_APPEND | O_WRITE);
              if(hora02 <10)
              {
                file.print(0);
                file.print(hora02);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }
              else
              {
                file.print(hora02);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }     
            }
            contador = 0;
            file.open(&root, "MDA2.TXT", O_WRITE);
            file.remove(); 
            minuto02 = (((hora_final_dosagem_automatica_2 * 60) + (minuto_final_dosagem_automatica_2)) - ((hora_inicial_dosagem_automatica_2 * 60) + (minuto_inicial_dosagem_automatica_2)));
            minuto02 /= 1 + quantidade_dose_dosadora_2_automatica; 

            for(int j = 1; j <= quantidade_dose_dosadora_2_automatica; j++)
            { 
              contador += 1;   
              if(contador == 1)
              {
                minuto02 = minuto_inicial_dosagem_automatica_2 + minuto12;
              }
              if(contador > 1)
              {
                minuto02 += minuto12;  
              }  
              if((quantidade_dose_dosadora_1_automatica == quantidade_dose_dosadora_2_automatica) || (quantidade_dose_dosadora_1_automatica == quantidade_dose_dosadora_3_automatica))
              {
                if((hora_inicial_dosagem_automatica_1 == hora_inicial_dosagem_automatica_2) || (hora_inicial_dosagem_automatica_1 == hora_inicial_dosagem_automatica_3))
                {
                  minuto02 += 10;
                }
              }
              if(minuto02 >= 60)
              {
                minuto02 -= 60;
                hora02 += 1;
              }
              file.open(&root, "MDA2.TXT", O_CREAT | O_APPEND | O_WRITE);
              if(minuto02 <10)
              {
                file.print(0);
                file.print(minuto02);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }
              else
              {
                file.print(minuto02);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }      
            }
            contador = 0;
            digitalWrite (4, HIGH);    
          }
          if(hora_final_dosagem_automatica_2_temp2 > hora_inicial_dosagem_automatica_2)
          {
            Salvar_dosadora_EEPROM();
            dispScreen = 0;
            clearScreen();
            mainScreen(true);
            digitalWrite (4, LOW); 
            file.open(&root, "HDA2.TXT", O_WRITE);
            file.remove();       

            minuto02 = (((hora_final_dosagem_automatica_2 * 60) + (minuto_final_dosagem_automatica_2)) - ((hora_inicial_dosagem_automatica_2 * 60) + (minuto_inicial_dosagem_automatica_2))); 
            minuto02 /= 1 + quantidade_dose_dosadora_2_automatica; 
            minuto12 = minuto02 % 60; 
            hora12 = minuto02 - minuto12; 
            hora12 /= 60;   
            for(int i = 1; i <= quantidade_dose_dosadora_2_automatica; i++)
            { 
              contador += 1;  
              if(contador == 1)
              {
                minuto02 = minuto_inicial_dosagem_automatica_2 + minuto12;
                hora02 = hora_inicial_dosagem_automatica_2 + hora12; 
              }
              if(contador > 1)
              {
                minuto02 += minuto12;
                hora02 += hora12;  
              }
              if((quantidade_dose_dosadora_1_automatica == quantidade_dose_dosadora_2_automatica) || (quantidade_dose_dosadora_1_automatica == quantidade_dose_dosadora_3_automatica))
              {
                if((hora_inicial_dosagem_automatica_1 == hora_inicial_dosagem_automatica_2) || (hora_inicial_dosagem_automatica_1 == hora_inicial_dosagem_automatica_3))
                {
                  minuto02 += 10;
                }
              }
              if(minuto02 >= 60)
              {
                minuto02 -= 60;
                hora02 += 1;
              }
              file.open(&root, "HDA2.TXT", O_CREAT | O_APPEND | O_WRITE);
              if(hora02 <10)
              {
                file.print(0);
                file.print(hora02);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }
              else
              {
                file.print(hora02);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }    
            }
            contador = 0;
            file.open(&root, "MDA2.TXT", O_WRITE);
            file.remove(); 
            minuto02 = (((hora_final_dosagem_automatica_2 * 60) + (minuto_final_dosagem_automatica_2)) - ((hora_inicial_dosagem_automatica_2 * 60) + (minuto_inicial_dosagem_automatica_2)));
            minuto02 /= 1 + quantidade_dose_dosadora_2_automatica; 

            for(int j = 1; j <= quantidade_dose_dosadora_2_automatica; j++)
            { 
              contador += 1;   
              if(contador == 1)
              {
                minuto02 = minuto_inicial_dosagem_automatica_2 + minuto12;
              }
              if(contador > 1)
              {
                minuto02 += minuto12;  
              }  
              if((quantidade_dose_dosadora_1_automatica == quantidade_dose_dosadora_2_automatica) || (quantidade_dose_dosadora_1_automatica == quantidade_dose_dosadora_3_automatica))
              {
                if((hora_inicial_dosagem_automatica_1 == hora_inicial_dosagem_automatica_2) || (hora_inicial_dosagem_automatica_1 == hora_inicial_dosagem_automatica_3))
                {
                  minuto02 += 10;
                }
              }
              if(minuto02 >= 60)
              {
                minuto02 -= 60;
                hora02 += 1;
              }
              file.open(&root, "MDA2.TXT", O_CREAT | O_APPEND | O_WRITE);
              if(minuto02 <10)
              {
                file.print(0);
                file.print(minuto02);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }
              else
              {
                file.print(minuto02);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }   
            }
            contador = 0;
            digitalWrite (4, HIGH);    
          }        
        }   
      }
      if(dosadora_3_selecionada == true)
      {
        if ((y >= houU[1]) && (y <= houU[3])) // Buttons: Time UP
        {
          if ((x >= houU[0]) && (x <= houU[2])) {
            waitForIt(houU[0], houU[1], houU[2], houU[3]);
            hora_inicial_dosagem_automatica_3_temp2  = (hora_inicial_dosagem_automatica_3_temp2  + 1) % 24;
            config_dosagem_automatica();
          } 
          if ((x >= minUT[0]) && (x <= minUT[2])) {
            waitForIt(minUT[0], minUT[1], minUT[2], minUT[3]);
            minuto_inicial_dosagem_automatica_3_temp2  = (minuto_inicial_dosagem_automatica_3_temp2  + 1) % 60;
            config_dosagem_automatica();
          } 


          if ((x >= houU[0] + deslocamento_botao_x) && (x <= houU[2] + deslocamento_botao_x)) {
            waitForIt(houU[0] + deslocamento_botao_x, houU[1], houU[2] + deslocamento_botao_x, houU[3]);
            hora_final_dosagem_automatica_3_temp2  = (hora_final_dosagem_automatica_3_temp2  + 1) % 24;
            config_dosagem_automatica();
          } 
          if ((x >= minUT[0] + deslocamento_botao_x) && (x <= minUT[2] + deslocamento_botao_x)) {
            waitForIt(minUT[0] + deslocamento_botao_x, minUT[1], minUT[2] + deslocamento_botao_x, minUT[3]);
            minuto_final_dosagem_automatica_3_temp2  = (minuto_final_dosagem_automatica_3_temp2  + 1) % 60;
            config_dosagem_automatica();
          }

        } 
        if ((y >= houD[1]) && (y <= houD[3])) // Buttons: Time DOWN
        {
          if ((x >= houD[0]) && (x <= houD[2])) {
            waitForIt(houD[0], houD[1], houD[2], houD[3]);
            hora_inicial_dosagem_automatica_3_temp2  = (hora_inicial_dosagem_automatica_3_temp2  + 23) % 24;
            config_dosagem_automatica();
          } 
          if ((x >= minDT[0]) && (x <= minDT[2])) {
            waitForIt(minDT[0], minDT[1], minDT[2], minDT[3]);
            minuto_inicial_dosagem_automatica_3_temp2  = (minuto_inicial_dosagem_automatica_3_temp2  + 59) % 60;
            config_dosagem_automatica();
          } 

          if ((x >= houD[0] + deslocamento_botao_x) && (x <= houD[2] + deslocamento_botao_x)) {
            waitForIt(houD[0] + deslocamento_botao_x, houD[1], houD[2] + deslocamento_botao_x, houD[3]);
            hora_final_dosagem_automatica_3_temp2  = (hora_final_dosagem_automatica_3_temp2  + 23) % 24;
            config_dosagem_automatica();
          } 
          if ((x >= minDT[0] + deslocamento_botao_x) && (x <= minDT[2] + deslocamento_botao_x)) {
            waitForIt(minDT[0] + deslocamento_botao_x, minDT[1], minDT[2] + deslocamento_botao_x, minDT[3]);
            minuto_final_dosagem_automatica_3_temp2  = (minuto_final_dosagem_automatica_3_temp2  + 59) % 60;
            config_dosagem_automatica();
          }
        }
        if ((x >= minUT[0]) && (x <= minUT[2]) && (y >= minUT[1] + deslocamento_botao_y) && (y <= minUT[3] + deslocamento_botao_y)) // Dose diaria mais
        {
          waitForIt(minUT[0], minUT[1] + deslocamento_botao_y, minUT[2], minUT[3] + deslocamento_botao_y);
          dose_dosadora_3_automatica_temp2 += 0.5;
          if(dose_dosadora_3_automatica_temp2 > 999.5)
          {
            dose_dosadora_3_automatica_temp2 = 0.5;
          }
          if(dose_dosadora_3_automatica_temp2 <= 9.5)
          {
            myGLCD.setColor(0, 0, 0);                      
            myGLCD.fillRect(100, 45 + deslocamento_botao_y, 185, 67 + deslocamento_botao_y);
          }           

          config_dosagem_automatica();
        }
        if ((x >= minDT[0]) && (x <= minDT[2]) && (y >= minDT[1] + deslocamento_botao_y) && (y <= minDT[3] + deslocamento_botao_y)) // Dose diaria menos
        {
          waitForIt(minDT[0], minDT[1] + deslocamento_botao_y, minDT[2], minDT[3] + deslocamento_botao_y);
          dose_dosadora_3_automatica_temp2 -= 0.5;
          if(dose_dosadora_3_automatica_temp2 <0.5)
          {
            dose_dosadora_3_automatica_temp2 = 999.5;
          }
          if(dose_dosadora_3_automatica_temp2 <= 9.5)
          {
            myGLCD.setColor(0, 0, 0);                      
            myGLCD.fillRect(100, 45 + deslocamento_botao_y, 185, 67 + deslocamento_botao_y);
          }
          config_dosagem_automatica();
        }
        if ((x >= durC[0]) && (x <= durC[2]) && (y >= durC[1] + deslocamento_botao_y) && (y <= durC[3] + deslocamento_botao_y)) 
        {
          waitForIt(durC[0], durC[1] + deslocamento_botao_y, durC[2], durC[3] + deslocamento_botao_y); 
          quantidade_dose_dosadora_3_automatica_temp2 += 1;
          if(quantidade_dose_dosadora_3_automatica_temp2 > 24)
          {
            quantidade_dose_dosadora_3_automatica_temp2 = 1;
          }
          config_dosagem_automatica();
        }

        if ((x >= durB[0]) && (x <= durB[2]) && (y >= durB[1] + deslocamento_botao_y) && (y <= durB[3] + deslocamento_botao_y)) 
        {
          waitForIt(durB[0], durB[1] + deslocamento_botao_y, durB[2], durB[3] + deslocamento_botao_y);
          quantidade_dose_dosadora_3_automatica_temp2 -= 1;
          if(quantidade_dose_dosadora_3_automatica_temp2 < 1)
          {
            quantidade_dose_dosadora_3_automatica_temp2 = 24;
          }
          config_dosagem_automatica();        
        }
        if ((x >= domI[0]) && (x<= domI[2]) && (y >= domI [1]) && (y <= domI[3])) // Ativar ou desativar modo automatico
        {
          waitForIt(domI[0], domI[1], domI[2], domI[3]);
          if(modo_automatico_on_3_temp2 == 0)
          {
            modo_automatico_on_3_temp2 = 1;
            config_dosagem_automatica();
          }
          else
          {
            modo_automatico_on_3_temp2 = 0;
            config_dosagem_automatica();
          }
        }
        if ((y >= salV[1]) && (y <= salV[3]) && (x >= salV[0]) && (x <= salV[2])) 
        {
          waitForIt(salV[0], salV[1], salV[2], salV[3]); //funcao salvar
          dose_dosadora_3_automatica = dose_dosadora_3_automatica_temp2;
          quantidade_dose_dosadora_3_automatica = quantidade_dose_dosadora_3_automatica_temp2;
          modo_automatico_on_3  = modo_automatico_on_3_temp2;
          hora_inicial_dosagem_automatica_3  = hora_inicial_dosagem_automatica_3_temp2;
          minuto_inicial_dosagem_automatica_3  = minuto_inicial_dosagem_automatica_3_temp2;
          hora_final_dosagem_automatica_3  = hora_final_dosagem_automatica_3_temp2;
          minuto_final_dosagem_automatica_3  = minuto_final_dosagem_automatica_3_temp2;

          if((hora_final_dosagem_automatica_3_temp2  == hora_inicial_dosagem_automatica_3) && (minuto_final_dosagem_automatica_3_temp2  < (minuto_inicial_dosagem_automatica_3+10)))
          {
            setFont(SMALL, 255, 0, 0, 0, 0, 0);
            myGLCD.print("INTERVALO ", 225, 198);
            myGLCD.print("ERRADO!", 225, 218);

          }
          if(hora_final_dosagem_automatica_3_temp2  < hora_inicial_dosagem_automatica_3)
          {
            setFont(SMALL, 255, 0, 0, 0, 0, 0);
            myGLCD.print("HORA FINAL", 225, 198);
            myGLCD.print("ERRADA!", 225, 218);
          }
          if((hora_final_dosagem_automatica_3_temp2 == hora_inicial_dosagem_automatica_3) && (minuto_final_dosagem_automatica_3_temp2 >= (minuto_inicial_dosagem_automatica_3+10)))
          {
            Salvar_dosadora_EEPROM();
            dispScreen = 0;
            clearScreen();
            mainScreen(true);
            digitalWrite (4, LOW); 
            file.open(&root, "HDA3.TXT", O_WRITE);
            file.remove();       

            minuto03 = (((hora_final_dosagem_automatica_3 * 60) + (minuto_final_dosagem_automatica_3)) - ((hora_inicial_dosagem_automatica_3 * 60) + (minuto_inicial_dosagem_automatica_3)));
            minuto03 /= 1 + quantidade_dose_dosadora_3_automatica; 
            minuto13 = minuto03 % 60; 
            hora13 = minuto03 - minuto13; 
            hora13 /= 60;   
            for(int i = 1; i <= quantidade_dose_dosadora_3_automatica; i++)
            { 
              contador += 1;  
              if(contador == 1)
              {
                minuto03 = minuto_inicial_dosagem_automatica_3 + minuto13;
                hora03 = hora_inicial_dosagem_automatica_3 + hora13; 
              }
              if(contador > 1)
              {
                minuto03 += minuto13;
                hora03 += hora13;  
              }
              if((quantidade_dose_dosadora_1_automatica == quantidade_dose_dosadora_2_automatica) || (quantidade_dose_dosadora_1_automatica == quantidade_dose_dosadora_3_automatica))
              {
                if((hora_inicial_dosagem_automatica_1 == hora_inicial_dosagem_automatica_2) || (hora_inicial_dosagem_automatica_1 == hora_inicial_dosagem_automatica_3))
                {
                  minuto03 += 10;
                }
              }
              if(minuto03 >= 60)
              {
                minuto03 -= 60;
                hora03 +=1;
              }
              file.open(&root, "HDA3.TXT", O_CREAT | O_APPEND | O_WRITE);
              if(hora02 <10)
              {
                file.print(0);
                file.print(hora03);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }
              else
              {
                file.print(hora03);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }    
            }
            contador = 0;
            file.open(&root, "MDA3.TXT", O_WRITE);
            file.remove(); 
            minuto03 = (((hora_final_dosagem_automatica_3 * 60) + (minuto_final_dosagem_automatica_3)) - ((hora_inicial_dosagem_automatica_3 * 60) + (minuto_inicial_dosagem_automatica_3)));
            minuto03 /= 1 + quantidade_dose_dosadora_3_automatica; 

            for(int j = 1; j <= quantidade_dose_dosadora_3_automatica; j++)
            { 
              contador += 1;   
              if(contador == 1)
              {
                minuto03 = minuto_inicial_dosagem_automatica_3 + minuto13;
              }
              if(contador > 1)
              {
                minuto03 += minuto13;  
              }  
              if((quantidade_dose_dosadora_1_automatica == quantidade_dose_dosadora_2_automatica) || (quantidade_dose_dosadora_1_automatica == quantidade_dose_dosadora_3_automatica))
              {
                if((hora_inicial_dosagem_automatica_1 == hora_inicial_dosagem_automatica_2) || (hora_inicial_dosagem_automatica_1 == hora_inicial_dosagem_automatica_3))
                {
                  minuto03 += 10;
                }
              }
              if(minuto03 >= 60)
              {
                minuto03 -= 60;
                hora03 += 1;
              }
              file.open(&root, "MDA3.TXT", O_CREAT | O_APPEND | O_WRITE);
              if(minuto03 <10)
              {
                file.print(0);
                file.print(minuto03);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }
              else
              {
                file.print(minuto03);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }   
            }
            contador = 0;
            digitalWrite (4, HIGH);    
          }
          if(hora_final_dosagem_automatica_3_temp2 > hora_inicial_dosagem_automatica_3)
          {
            Salvar_dosadora_EEPROM();
            dispScreen = 0;
            clearScreen();
            mainScreen(true);
            digitalWrite (4, LOW); 
            file.open(&root, "HDA3.TXT", O_WRITE);
            file.remove();       

            minuto03 = (((hora_final_dosagem_automatica_3 * 60) + (minuto_final_dosagem_automatica_3)) - ((hora_inicial_dosagem_automatica_3 * 60) + (minuto_inicial_dosagem_automatica_3))); 
            minuto03 /= 1 + quantidade_dose_dosadora_3_automatica; 
            minuto13 = minuto03 % 60; 
            hora13 = minuto03 - minuto13; 
            hora13 /= 60;   
            for(int i = 1; i <= quantidade_dose_dosadora_3_automatica; i++)
            { 
              contador += 1;  
              if(contador == 1)
              {
                minuto03 = minuto_inicial_dosagem_automatica_3 + minuto13;
                hora03 = hora_inicial_dosagem_automatica_3 + hora13; 
              }
              if(contador > 1)
              {
                minuto03 += minuto13;
                hora03 += hora13;  
              }
              if((quantidade_dose_dosadora_1_automatica == quantidade_dose_dosadora_2_automatica) || (quantidade_dose_dosadora_1_automatica == quantidade_dose_dosadora_3_automatica))
              {
                if((hora_inicial_dosagem_automatica_1 == hora_inicial_dosagem_automatica_2) || (hora_inicial_dosagem_automatica_1 == hora_inicial_dosagem_automatica_3))
                {
                  minuto03 += 10;
                }
              }
              if(minuto03 >= 60)
              {
                minuto03 -= 60;
                hora03 += 1;
              }
              file.open(&root, "HDA3.TXT", O_CREAT | O_APPEND | O_WRITE);
              if(hora03 <10)
              {
                file.print(0);
                file.print(hora03);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }
              else
              {
                file.print(hora03);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }    
            }
            contador = 0;
            file.open(&root, "MDA3.TXT", O_WRITE);
            file.remove(); 
            minuto03 = (((hora_final_dosagem_automatica_3 * 60) + (minuto_final_dosagem_automatica_3)) - ((hora_inicial_dosagem_automatica_3 * 60) + (minuto_inicial_dosagem_automatica_3)));
            minuto03 /= 1 + quantidade_dose_dosadora_3_automatica; 

            for(int j = 1; j <= quantidade_dose_dosadora_3_automatica; j++)
            { 
              contador += 1;   
              if(contador == 1)
              {
                minuto03 = minuto_inicial_dosagem_automatica_3 + minuto13;
              }
              if(contador > 1)
              {
                minuto03 += minuto13;  
              } 
              if((quantidade_dose_dosadora_1_automatica == quantidade_dose_dosadora_2_automatica) || (quantidade_dose_dosadora_1_automatica == quantidade_dose_dosadora_3_automatica))
              {
                if((hora_inicial_dosagem_automatica_1 == hora_inicial_dosagem_automatica_2) || (hora_inicial_dosagem_automatica_1 == hora_inicial_dosagem_automatica_3))
                {
                  minuto03 += 10;
                }
              } 
              if(minuto03 >= 60)
              {
                minuto03 -= 60;
                hora03 += 1;
              }
              file.open(&root, "MDA3.TXT", O_CREAT | O_APPEND | O_WRITE);
              if(minuto03 <10)
              {
                file.print(0);
                file.print(minuto03);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }
              else
              {
                file.print(minuto03);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }    
            }
            contador = 0;
            digitalWrite (4, HIGH);    
          }        
        }   
      }
      break;

    case 29:   // ----------------------------------------- Config dosagem personalizada --------------------------------------
      if ((x>=menU[0]) && x<=menU[2] && (y>=menU[1]) && (y<=menU[3]))           // volta ao menu
      {
        waitForIt(menU[0], menU[1], menU[2], menU[3]);
        dispScreen = 1;
        clearScreen();
        menuScreen(); 
        modo_manual = false;
        modo_automatico = false;
        modo_personalizado = false;
        modo_calibrar = false;
        dosadora_1_selecionada = false;
        dosadora_2_selecionada = false;
        dosadora_3_selecionada = false;
      }
      if ((x>=volT[0]) && x<=volT[2] && (y>=volT[1]) && (y<=volT[3]))           // Volta a tela altera configuracao das dosadoras
      {
        waitForIt(volT[0], volT[1], volT[2], volT[3]);
        dispScreen = 21;
        clearScreen();
        selecionar_dosadora(true);
        setFont(SMALL, 255, 255, 255, 0, 0, 0);
        myGLCD.print("MODO PERSONALIZADO SELECIONADO", 15, 220);
        modo_manual = false;
        modo_automatico = false;
        modo_personalizado = true;
        modo_calibrar = false;
        dosadora_1_selecionada = false;
        dosadora_2_selecionada = false;
        dosadora_3_selecionada = false; 
      }
      if ((y >= proX[1]) && (y <= proX[3]) && (x >= proX[0]) && (x <= proX[2])) {
        waitForIt(proX[0], proX[1], proX[2], proX[3]); //funcao salvar
        dispScreen = 31;
        clearScreen();
        config_dosagem_personalizada_2(true);
      }
      if(dosadora_1_selecionada == true)
      {
        if ((y >= houU[1]) && (y <= houU[3])) // Buttons: Time UP
        {
          if ((x >= houU[0]) && (x <= houU[2])) {
            waitForIt(houU[0], houU[1], houU[2], houU[3]);
            temp2hora_inicial_dosagem_personalizada_1 = (temp2hora_inicial_dosagem_personalizada_1 + 1) % 24;
            config_dosagem_personalizada();
          } 
          if ((x >= minUT[0]) && (x <= minUT[2])) {
            waitForIt(minUT[0], minUT[1], minUT[2], minUT[3]);
            temp2minuto_inicial_dosagem_personalizada_1 = (temp2minuto_inicial_dosagem_personalizada_1 + 1) % 60;
            config_dosagem_personalizada();
          } 


          if ((x >= houU[0] + deslocamento_botao_x) && (x <= houU[2] + deslocamento_botao_x)) {
            waitForIt(houU[0] + deslocamento_botao_x, houU[1], houU[2] + deslocamento_botao_x, houU[3]);
            temp2hora_final_dosagem_personalizada_1 = (temp2hora_final_dosagem_personalizada_1 + 1) % 24;
            config_dosagem_personalizada();
          } 
          if ((x >= minUT[0] + deslocamento_botao_x) && (x <= minUT[2] + deslocamento_botao_x)) {
            waitForIt(minUT[0] + deslocamento_botao_x, minUT[1], minUT[2] + deslocamento_botao_x, minUT[3]);
            temp2minuto_final_dosagem_personalizada_1 = (temp2minuto_final_dosagem_personalizada_1 + 1) % 60;
            config_dosagem_personalizada();
          }

        } 
        if ((y >= houD[1]) && (y <= houD[3])) // Buttons: Time DOWN
        {
          if ((x >= houD[0]) && (x <= houD[2])) {
            waitForIt(houD[0], houD[1], houD[2], houD[3]);
            temp2hora_inicial_dosagem_personalizada_1 = (temp2hora_inicial_dosagem_personalizada_1 + 23) % 24;
            config_dosagem_personalizada();
          } 
          if ((x >= minDT[0]) && (x <= minDT[2])) {
            waitForIt(minDT[0], minDT[1], minDT[2], minDT[3]);
            temp2minuto_inicial_dosagem_personalizada_1 = (temp2minuto_inicial_dosagem_personalizada_1 + 59) % 60;
            config_dosagem_personalizada();
          } 

          if ((x >= houD[0] + deslocamento_botao_x) && (x <= houD[2] + deslocamento_botao_x)) {
            waitForIt(houD[0] + deslocamento_botao_x, houD[1], houD[2] + deslocamento_botao_x, houD[3]);
            temp2hora_final_dosagem_personalizada_1 = (temp2hora_final_dosagem_personalizada_1 + 23) % 24;
            config_dosagem_personalizada();
          } 
          if ((x >= minDT[0] + deslocamento_botao_x) && (x <= minDT[2] + deslocamento_botao_x)) {
            waitForIt(minDT[0] + deslocamento_botao_x, minDT[1], minDT[2] + deslocamento_botao_x, minDT[3]);
            temp2minuto_final_dosagem_personalizada_1 = (temp2minuto_final_dosagem_personalizada_1 + 59) % 60;
            config_dosagem_personalizada();
          }
        }

        if ((x >= segU[0]) && (x <= segU[2]) && (y >= segU[1]) && (y <= segU[3])) {
          if (temp2segunda_dosagem_personalizada_1 == 1) {
            temp2segunda_dosagem_personalizada_1 = 0;
            config_dosagem_personalizada();
          } 
          else {
            temp2segunda_dosagem_personalizada_1 = 1;
            config_dosagem_personalizada();
          }
        }
        if ((x >= terC[0]) && (x <= terC[2]) && (y >= terC[1]) && (y <= terC[3])) {
          if (temp2terca_dosagem_personalizada_1 == 2) {
            temp2terca_dosagem_personalizada_1 = 0;
            config_dosagem_personalizada();
          } 
          else {
            temp2terca_dosagem_personalizada_1 = 2;
            config_dosagem_personalizada();
          }
        }
        if ((x >= quaR[0]) && (x <= quaR[2]) && (y >= quaR[1]) && (y <= quaR[3])) {

          if (temp2quarta_dosagem_personalizada_1 == 3) {
            temp2quarta_dosagem_personalizada_1 = 0;
            config_dosagem_personalizada();
          } 
          else {
            temp2quarta_dosagem_personalizada_1 = 3;
            config_dosagem_personalizada();
          }
        }
        if ((x >= quiN[0]) && (x <= quiN[2]) && (y >= quiN[1]) && (y <= quiN[3])) {

          if (temp2quinta_dosagem_personalizada_1 == 4) {
            temp2quinta_dosagem_personalizada_1 = 0;
            config_dosagem_personalizada();
          } 
          else {
            temp2quinta_dosagem_personalizada_1 = 4;
            config_dosagem_personalizada();
          }
        }
        if ((x >= sexT[0]) && (x <= sexT[2]) && (y >= sexT[1]) && (y <= sexT[3])) {
          if (temp2sexta_dosagem_personalizada_1 == 5) {
            temp2sexta_dosagem_personalizada_1 = 0;
            config_dosagem_personalizada();
          } 
          else {
            temp2sexta_dosagem_personalizada_1 = 5;
            config_dosagem_personalizada();
          }
        }
        if ((x >= sabA[0]) && (x <= sabA[2]) && (y >= sabA[1]) && (y <= sabA[3])) {
          if (temp2sabado_dosagem_personalizada_1 == 6) {
            temp2sabado_dosagem_personalizada_1 = 0;
            config_dosagem_personalizada();
          } 
          else {
            temp2sabado_dosagem_personalizada_1 = 6;
            config_dosagem_personalizada();
          }
        }
        if ((x >= domI[0]) && (x <= domI[2]) && (y >= domI[1]) && (y <= domI[3])) {
          if (temp2domingo_dosagem_personalizada_1 == 7) {
            temp2domingo_dosagem_personalizada_1 = 0;
            config_dosagem_personalizada();
          } 
          else {
            temp2domingo_dosagem_personalizada_1 = 7;
            config_dosagem_personalizada();
          }
        }
      }
      if(dosadora_2_selecionada == true)
      {
        if ((y >= houU[1]) && (y <= houU[3])) // Buttons: Time UP
        {
          if ((x >= houU[0]) && (x <= houU[2])) {
            waitForIt(houU[0], houU[1], houU[2], houU[3]);
            temp2hora_inicial_dosagem_personalizada_2 = (temp2hora_inicial_dosagem_personalizada_2 + 1) % 24;
            config_dosagem_personalizada();
          } 
          if ((x >= minUT[0]) && (x <= minUT[2])) {
            waitForIt(minUT[0], minUT[1], minUT[2], minUT[3]);
            temp2minuto_inicial_dosagem_personalizada_2 = (temp2minuto_inicial_dosagem_personalizada_2 + 1) % 60;
            config_dosagem_personalizada();
          } 


          if ((x >= houU[0] + deslocamento_botao_x) && (x <= houU[2] + deslocamento_botao_x)) {
            waitForIt(houU[0] + deslocamento_botao_x, houU[1], houU[2] + deslocamento_botao_x, houU[3]);
            temp2hora_final_dosagem_personalizada_2 = (temp2hora_final_dosagem_personalizada_2 + 1) % 24;
            config_dosagem_personalizada();
          } 
          if ((x >= minUT[0] + deslocamento_botao_x) && (x <= minUT[2] + deslocamento_botao_x)) {
            waitForIt(minUT[0] + deslocamento_botao_x, minUT[1], minUT[2] + deslocamento_botao_x, minUT[3]);
            temp2minuto_final_dosagem_personalizada_2 = (temp2minuto_final_dosagem_personalizada_2 + 1) % 60;
            config_dosagem_personalizada();
          }

        } 
        if ((y >= houD[1]) && (y <= houD[3])) // Buttons: Time DOWN
        {
          if ((x >= houD[0]) && (x <= houD[2])) {
            waitForIt(houD[0], houD[1], houD[2], houD[3]);
            temp2hora_inicial_dosagem_personalizada_2 = (temp2hora_inicial_dosagem_personalizada_2 + 23) % 24;
            config_dosagem_personalizada();
          } 
          if ((x >= minDT[0]) && (x <= minDT[2])) {
            waitForIt(minDT[0], minDT[1], minDT[2], minDT[3]);
            temp2minuto_inicial_dosagem_personalizada_2 = (temp2minuto_inicial_dosagem_personalizada_2 + 59) % 60;
            config_dosagem_personalizada();
          } 

          if ((x >= houD[0] + deslocamento_botao_x) && (x <= houD[2] + deslocamento_botao_x)) {
            waitForIt(houD[0] + deslocamento_botao_x, houD[1], houD[2] + deslocamento_botao_x, houD[3]);
            temp2hora_final_dosagem_personalizada_2 = (temp2hora_final_dosagem_personalizada_2 + 23) % 24;
            config_dosagem_personalizada();
          } 
          if ((x >= minDT[0] + deslocamento_botao_x) && (x <= minDT[2] + deslocamento_botao_x)) {
            waitForIt(minDT[0] + deslocamento_botao_x, minDT[1], minDT[2] + deslocamento_botao_x, minDT[3]);
            temp2minuto_final_dosagem_personalizada_2 = (temp2minuto_final_dosagem_personalizada_2 + 59) % 60;
            config_dosagem_personalizada();
          }
        }

        if ((x >= segU[0]) && (x <= segU[2]) && (y >= segU[1]) && (y <= segU[3])) {
          if (temp2segunda_dosagem_personalizada_2 == 1) {
            temp2segunda_dosagem_personalizada_2 = 0;
            config_dosagem_personalizada();
          } 
          else {
            temp2segunda_dosagem_personalizada_2 = 1;
            config_dosagem_personalizada();
          }
        }
        if ((x >= terC[0]) && (x <= terC[2]) && (y >= terC[1]) && (y <= terC[3])) {
          if (temp2terca_dosagem_personalizada_2 == 2) {
            temp2terca_dosagem_personalizada_2 = 0;
            config_dosagem_personalizada();
          } 
          else {
            temp2terca_dosagem_personalizada_2 = 2;
            config_dosagem_personalizada();
          }
        }
        if ((x >= quaR[0]) && (x <= quaR[2]) && (y >= quaR[1]) && (y <= quaR[3])) {

          if (temp2quarta_dosagem_personalizada_2 == 3) {
            temp2quarta_dosagem_personalizada_2 = 0;
            config_dosagem_personalizada();
          } 
          else {
            temp2quarta_dosagem_personalizada_2 = 3;
            config_dosagem_personalizada();
          }
        }
        if ((x >= quiN[0]) && (x <= quiN[2]) && (y >= quiN[1]) && (y <= quiN[3])) {

          if (temp2quinta_dosagem_personalizada_2 == 4) {
            temp2quinta_dosagem_personalizada_2 = 0;
            config_dosagem_personalizada();
          } 
          else {
            temp2quinta_dosagem_personalizada_2 = 4;
            config_dosagem_personalizada();
          }
        }
        if ((x >= sexT[0]) && (x <= sexT[2]) && (y >= sexT[1]) && (y <= sexT[3])) {
          if (temp2sexta_dosagem_personalizada_2 == 5) {
            temp2sexta_dosagem_personalizada_2 = 0;
            config_dosagem_personalizada();
          } 
          else {
            temp2sexta_dosagem_personalizada_2 = 5;
            config_dosagem_personalizada();
          }
        }
        if ((x >= sabA[0]) && (x <= sabA[2]) && (y >= sabA[1]) && (y <= sabA[3])) {
          if (temp2sabado_dosagem_personalizada_2 == 6) {
            temp2sabado_dosagem_personalizada_2 = 0;
            config_dosagem_personalizada();
          } 
          else {
            temp2sabado_dosagem_personalizada_2 = 6;
            config_dosagem_personalizada();
          }
        }
        if ((x >= domI[0]) && (x <= domI[2]) && (y >= domI[1]) && (y <= domI[3])) {
          if (temp2domingo_dosagem_personalizada_2 == 7) {
            temp2domingo_dosagem_personalizada_2 = 0;
            config_dosagem_personalizada();
          } 
          else {
            temp2domingo_dosagem_personalizada_2 = 7;
            config_dosagem_personalizada();
          }
        }
      }
      if(dosadora_3_selecionada == true)
      {
        if ((y >= houU[1]) && (y <= houU[3])) // Buttons: Time UP
        {
          if ((x >= houU[0]) && (x <= houU[2])) {
            waitForIt(houU[0], houU[1], houU[2], houU[3]);
            temp2hora_inicial_dosagem_personalizada_3 = (temp2hora_inicial_dosagem_personalizada_3 + 1) % 24;
            config_dosagem_personalizada();
          } 
          if ((x >= minUT[0]) && (x <= minUT[2])) {
            waitForIt(minUT[0], minUT[1], minUT[2], minUT[3]);
            temp2minuto_inicial_dosagem_personalizada_3 = (temp2minuto_inicial_dosagem_personalizada_3 + 1) % 60;
            config_dosagem_personalizada();
          } 


          if ((x >= houU[0] + deslocamento_botao_x) && (x <= houU[2] + deslocamento_botao_x)) {
            waitForIt(houU[0] + deslocamento_botao_x, houU[1], houU[2] + deslocamento_botao_x, houU[3]);
            temp2hora_final_dosagem_personalizada_3 = (temp2hora_final_dosagem_personalizada_3 + 1) % 24;
            config_dosagem_personalizada();
          } 
          if ((x >= minUT[0] + deslocamento_botao_x) && (x <= minUT[2] + deslocamento_botao_x)) {
            waitForIt(minUT[0] + deslocamento_botao_x, minUT[1], minUT[2] + deslocamento_botao_x, minUT[3]);
            temp2minuto_final_dosagem_personalizada_3 = (temp2minuto_final_dosagem_personalizada_3 + 1) % 60;
            config_dosagem_personalizada();
          }

        } 
        if ((y >= houD[1]) && (y <= houD[3])) // Buttons: Time DOWN
        {
          if ((x >= houD[0]) && (x <= houD[2])) {
            waitForIt(houD[0], houD[1], houD[2], houD[3]);
            temp2hora_inicial_dosagem_personalizada_3 = (temp2hora_inicial_dosagem_personalizada_3 + 23) % 24;
            config_dosagem_personalizada();
          } 
          if ((x >= minDT[0]) && (x <= minDT[2])) {
            waitForIt(minDT[0], minDT[1], minDT[2], minDT[3]);
            temp2minuto_inicial_dosagem_personalizada_3 = (temp2minuto_inicial_dosagem_personalizada_3 + 59) % 60;
            config_dosagem_personalizada();
          } 

          if ((x >= houD[0] + deslocamento_botao_x) && (x <= houD[2] + deslocamento_botao_x)) {
            waitForIt(houD[0] + deslocamento_botao_x, houD[1], houD[2] + deslocamento_botao_x, houD[3]);
            temp2hora_final_dosagem_personalizada_3 = (temp2hora_final_dosagem_personalizada_3 + 23) % 24;
            config_dosagem_personalizada();
          } 
          if ((x >= minDT[0] + deslocamento_botao_x) && (x <= minDT[2] + deslocamento_botao_x)) {
            waitForIt(minDT[0] + deslocamento_botao_x, minDT[1], minDT[2] + deslocamento_botao_x, minDT[3]);
            temp2minuto_final_dosagem_personalizada_3 = (temp2minuto_final_dosagem_personalizada_3 + 59) % 60;
            config_dosagem_personalizada();
          }
        }

        if ((x >= segU[0]) && (x <= segU[2]) && (y >= segU[1]) && (y <= segU[3])) {
          if (temp2segunda_dosagem_personalizada_3 == 1) {
            temp2segunda_dosagem_personalizada_3 = 0;
            config_dosagem_personalizada();
          } 
          else {
            temp2segunda_dosagem_personalizada_3 = 1;
            config_dosagem_personalizada();
          }
        }
        if ((x >= terC[0]) && (x <= terC[2]) && (y >= terC[1]) && (y <= terC[3])) {
          if (temp2terca_dosagem_personalizada_3 == 2) {
            temp2terca_dosagem_personalizada_3 = 0;
            config_dosagem_personalizada();
          } 
          else {
            temp2terca_dosagem_personalizada_3 = 2;
            config_dosagem_personalizada();
          }
        }
        if ((x >= quaR[0]) && (x <= quaR[2]) && (y >= quaR[1]) && (y <= quaR[3])) {

          if (temp2quarta_dosagem_personalizada_3 == 3) {
            temp2quarta_dosagem_personalizada_3 = 0;
            config_dosagem_personalizada();
          } 
          else {
            temp2quarta_dosagem_personalizada_3 = 3;
            config_dosagem_personalizada();
          }
        }
        if ((x >= quiN[0]) && (x <= quiN[2]) && (y >= quiN[1]) && (y <= quiN[3])) {

          if (temp2quinta_dosagem_personalizada_3 == 4) {
            temp2quinta_dosagem_personalizada_3 = 0;
            config_dosagem_personalizada();
          } 
          else {
            temp2quinta_dosagem_personalizada_3 = 4;
            config_dosagem_personalizada();
          }
        }
        if ((x >= sexT[0]) && (x <= sexT[2]) && (y >= sexT[1]) && (y <= sexT[3])) {
          if (temp2sexta_dosagem_personalizada_3 == 5) {
            temp2sexta_dosagem_personalizada_3 = 0;
            config_dosagem_personalizada();
          } 
          else {
            temp2sexta_dosagem_personalizada_3 = 5;
            config_dosagem_personalizada();
          }
        }
        if ((x >= sabA[0]) && (x <= sabA[2]) && (y >= sabA[1]) && (y <= sabA[3])) {
          if (temp2sabado_dosagem_personalizada_3 == 6) {
            temp2sabado_dosagem_personalizada_3 = 0;
            config_dosagem_personalizada();
          } 
          else {
            temp2sabado_dosagem_personalizada_3 = 6;
            config_dosagem_personalizada();
          }
        }
        if ((x >= domI[0]) && (x <= domI[2]) && (y >= domI[1]) && (y <= domI[3])) {
          if (temp2domingo_dosagem_personalizada_3 == 7) {
            temp2domingo_dosagem_personalizada_3 = 0;
            config_dosagem_personalizada();
          } 
          else {
            temp2domingo_dosagem_personalizada_3 = 7;
            config_dosagem_personalizada();
          }
        }
      }
      break;

    case 30:  // ----------------------------------------- Digitar a senha --------------------------------------------

      if ((x>=boT1[0]) && (x<=boT1[2]) && (y>=boT1[1]) && (y<=boT1[3]))  // Botao: 1
      {
        waitForIt(boT1[0], boT1[1], boT1[2] ,boT1[3]);
        updateStr('1');
      }

      if ((x>=boT2[0]) && (x<=boT2[2]) && (y>=boT2[1]) && (y<=boT2[3]))  // Botao: 2
      {
        waitForIt(boT2[0], boT2[1], boT2[2], boT2[3]);
        updateStr('2');
      }
      if ((x>=boT3[0]) && (x<=boT3[2]) && (y>=boT3[1]) && (y<=boT3[3]))  // Botao: 3
      {
        waitForIt(boT3[0], boT3[1], boT3[2], boT3[3]);
        updateStr('3');
      }
      if ((x>=boT4[0]) && (x<=boT4[2]) && (y>=boT4[1]) && (y<=boT4[3]))  // Botao: 4
      {
        waitForIt(boT4[0], boT4[1], boT4[2], boT4[3]);
        updateStr('4');
      }
      if ((x>=boT5[0]) && (x<=boT5[2]) && (y>=boT5[1]) && (y<=boT5[3]))  // Botao: 5
      {
        waitForIt(boT5[0], boT5[1], boT5[2], boT5[3]);
        updateStr('5');
      }

      if ((x>=boT6[0]) && (x<=boT6[2]) && (y>=boT6[1]) && (y<=boT6[3]))  // Botao: 6
      {
        waitForIt(boT6[0], boT6[1], boT6[2], boT6[3]);
        updateStr('6');
      }
      if ((x>=boT7[0]) && (x<=boT7[2]) && (y>=boT7[1]) && (y<=boT7[3]))  // Botao: 7
      {
        waitForIt(boT7[0], boT7[1], boT7[2], boT7[3]);
        updateStr('7');
      }
      if ((x>=boT8[0]) && (x<=boT8[2]) && (y>=boT8[1]) && (y<=boT8[3]))  // Botao: 8
      {
        waitForIt(boT8[0], boT8[1], boT8[2], boT8[3]);
        updateStr('8');
      }
      if ((x>=boT9[0]) && (x<=boT9[2]) && (y>=boT9[1]) && (y<=boT9[3]))  // Botao: 9
      {
        waitForIt(boT9[0], boT9[1], boT9[2], boT9[3]);
        updateStr('9');
      }
      if ((x>=boT0[0]) && (x<=boT0[2]) && (y>=boT0[1]) && (y<=boT0[3]))  // Botao: 0
      {
        waitForIt(boT0[0], boT0[1], boT0[2], boT0[3]);
        updateStr('0');
      }

      if ((x>=boTL[0]) && (x<=boTL[2]) && (y>=boTL[1]) && (y<=boTL[3]))  // Botao: limpar
      {
        waitForIt(boTL[0], boTL[1], boTL[2], boTL[3]);
        for (int i=0; i < 7;i++) stCurrent[i] = '\0';
        stCurrentLen=0;
      }
      if ((x>=boTE[0]) && (x<=boTE[2]) && (y>=boTE[1]) && (y<=boTE[3]))  // Botao: entrar
      {
        waitForIt(boTE[0], boTE[1], boTE[2], boTE[3]);
        if ((stCurrent[0] == senha [0]) && (stCurrent[1] == senha [1]) && (stCurrent[2] == senha [2]) && (stCurrent[3] == senha [3]) && (stCurrent[4] == senha [4]) && (stCurrent[5] == senha [5]))
        {
          stCurrentLen=0;
          myGLCD.setFont(BigFont);
          myGLCD.setColor(0, 255, 0);
          myGLCD.setBackColor(0, 0, 0);
          myGLCD.print("SENHA CORRETA", 51, 192);
          delay(500);
          myGLCD.print("              ", 51, 192);
          dispScreen=1;
          clearScreen();
          menuScreen();
          memcpy(stCurrent, limpar_senha, sizeof(limpar_senha));
        }

        else
        {
          myGLCD.setFont(BigFont);
          myGLCD.setColor(255, 0, 0);
          myGLCD.setBackColor(0, 0, 0);
          myGLCD.print("SENHA INCORRETA!", 35, 192);
          delay(500);
          myGLCD.print("                 ", 35, 192);
          delay(500);            
          myGLCD.print("SENHA INCORRETA!", 35, 192);
          delay(500);
          myGLCD.print("                 ", 35, 192);
          delay(500);
          myGLCD.print("SENHA INCORRETA!", 35, 192);
          delay(500);
          myGLCD.print("                ", 35, 192);
          stCurrentLen=0;
          memcpy(stCurrent, limpar_senha, sizeof(limpar_senha));
        }
      }
      break;
    case 31:// ----------------------------------------- Dosagem personalizada --------------------------------------------
      if ((x>=menU[0]) && x<=menU[2] && (y>=menU[1]) && (y<=menU[3]))           // volta ao menu
      {
        waitForIt(menU[0], menU[1], menU[2], menU[3]);
        dispScreen = 1;
        clearScreen();
        menuScreen(); 
        modo_manual = false;
        modo_automatico = false;
        modo_personalizado = false;
        modo_calibrar = false;
        dosadora_1_selecionada = false;
        dosadora_2_selecionada = false;
        dosadora_3_selecionada = false;
      }
      if ((y >= anT[1]) && (y <= anT[3]) && (x >= anT[0]) && (x <= anT[2])) // Volta ao menu dosagem personalizada
      {
        waitForIt(anT[0], anT[1], anT[2], anT[3]);
        dispScreen = 29;
        clearScreen();
        config_dosagem_personalizada();
      }
      if(dosadora_1_selecionada == true)
      {
        if ((x >= minUT[0]) && (x <= minUT[2]) && (y >= minUT[1]) && (y <= minUT[3])) // Dose diaria mais
        {
          waitForIt(minUT[0], minUT[1], minUT[2], minUT[3]);
          dose_dosadora_1_personalizada_temp2 += 0.5;
          if(dose_dosadora_1_personalizada_temp2 > 999.5)
          {
            dose_dosadora_1_personalizada_temp2 = 0.5;
          }
          if(dose_dosadora_1_personalizada_temp2 <= 9.5)
          {
            myGLCD.setColor(0, 0, 0);                      
            myGLCD.fillRect(100, 45, 185, 67);
          }           

          config_dosagem_personalizada_2();
        }
        if ((x >= minDT[0]) && (x <= minDT[2]) && (y >= minDT[1]) && (y <= minDT[3])) // Dose diaria menos
        {
          waitForIt(minDT[0], minDT[1], minDT[2], minDT[3]);
          dose_dosadora_1_personalizada_temp2 -= 0.5;
          if(dose_dosadora_1_personalizada_temp2 <0.5)
          {
            dose_dosadora_1_personalizada_temp2 = 999.5;
          }
          if(dose_dosadora_1_personalizada_temp2 <= 9.5)
          {
            myGLCD.setColor(0, 0, 0);                      
            myGLCD.fillRect(100, 45, 185, 67);
          }
          config_dosagem_personalizada_2();
        }
        if ((x >= durC[0]) && (x <= durC[2]) && (y >= durC[1]) && (y <= durC[3])) 
        {
          waitForIt(durC[0], durC[1], durC[2], durC[3]); 
          quantidade_dose_dosadora_1_personalizada_temp2 += 1;
          if(quantidade_dose_dosadora_1_personalizada_temp2 > 24)
          {
            quantidade_dose_dosadora_1_personalizada_temp2 = 1;
          }
          config_dosagem_personalizada_2();
        }

        if ((x >= durB[0]) && (x <= durB[2]) && (y >= durB[1]) && (y <= durB[3])) 
        {
          waitForIt(durB[0], durB[1], durB[2], durB[3]);
          quantidade_dose_dosadora_1_personalizada_temp2 -= 1;
          if(quantidade_dose_dosadora_1_personalizada_temp2 < 1)
          {
            quantidade_dose_dosadora_1_personalizada_temp2 = 24;
          }
          config_dosagem_personalizada_2();        
        }
        if ((x >= sexT[0]) && (x<= sexT[2]) && (y >= sexT [1]) && (y <= sexT[3])) // Ativar ou desativar modo personalizado
        {
          waitForIt(sexT[0], sexT[1], sexT[2], sexT[3]);
          if(modo_personalizado_on_1_temp2 == 0)
          {
            modo_personalizado_on_1_temp2 = 1;
            config_dosagem_personalizada_2();
          }
          else
          {
            modo_personalizado_on_1_temp2 = 0;
            config_dosagem_personalizada_2();
          }
        }
        if ((y >= prOK[1]) && (y <= prOK[3]) && (x >= prOK[0]) && (x <= prOK[2])) 
        {
          waitForIt(prOK[0], prOK[1], prOK[2], prOK[3]); //funcao salvar
          dose_dosadora_1_personalizada = dose_dosadora_1_personalizada_temp2;
          quantidade_dose_dosadora_1_personalizada = quantidade_dose_dosadora_1_personalizada_temp2;
          modo_personalizado_on_1 = modo_personalizado_on_1_temp2;
          hora_inicial_dosagem_personalizada_1 = temp2hora_inicial_dosagem_personalizada_1;
          minuto_inicial_dosagem_personalizada_1 = temp2minuto_inicial_dosagem_personalizada_1;
          hora_final_dosagem_personalizada_1 = temp2hora_final_dosagem_personalizada_1;
          minuto_final_dosagem_personalizada_1 = temp2minuto_final_dosagem_personalizada_1;
          segunda_dosagem_personalizada_1 = temp2segunda_dosagem_personalizada_1;
          terca_dosagem_personalizada_1 = temp2terca_dosagem_personalizada_1;
          quarta_dosagem_personalizada_1 = temp2quarta_dosagem_personalizada_1;
          quinta_dosagem_personalizada_1 = temp2quinta_dosagem_personalizada_1;
          sexta_dosagem_personalizada_1 = temp2sexta_dosagem_personalizada_1;
          sabado_dosagem_personalizada_1 = temp2sabado_dosagem_personalizada_1;
          domingo_dosagem_personalizada_1 = temp2domingo_dosagem_personalizada_1;

          if((hora_final_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_1) && (minuto_final_dosagem_personalizada_1 < (minuto_inicial_dosagem_personalizada_1+10)))
          {
            setFont(SMALL, 255, 0, 0, 0, 0, 0);
            myGLCD.print("O INTERVALO ENTRE A INICIAL E A FINAL", 20, 110);
            myGLCD.print("DEVE SER DE NO MINIMO 10 MINUTOS!", 35, 130);

          }
          if(hora_final_dosagem_personalizada_1 < hora_inicial_dosagem_personalizada_1)
          {
            setFont(SMALL, 255, 0, 0, 0, 0, 0);
            myGLCD.print("A HORA FINAL NAO PODE SER MENOR", 50, 110);
            myGLCD.print("QUE A INICIAL!", 100, 130);
          }
          if((temp2hora_final_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_1) && (temp2minuto_final_dosagem_personalizada_1 >= (minuto_inicial_dosagem_personalizada_1+10)))
          {
            Salvar_dosadora_EEPROM();
            dispScreen = 0;
            clearScreen();
            mainScreen(true);
            digitalWrite (4, LOW); 
            file.open(&root, "HDP1.TXT", O_WRITE);
            file.remove();       

            minuto01 = (((hora_final_dosagem_personalizada_1 * 60) + (minuto_final_dosagem_personalizada_1)) - ((hora_inicial_dosagem_personalizada_1 * 60) + (minuto_inicial_dosagem_personalizada_1))); 
            minuto01 /= 1 + quantidade_dose_dosadora_1_personalizada; 
            minuto11 = minuto01 % 60; 
            hora11 = minuto01 - minuto11; 
            hora11 /= 60;   
            for(int i = 1; i <= quantidade_dose_dosadora_1_personalizada; i++)
            { 
              contador += 1;  
              if(contador == 1)
              {
                minuto01 = minuto_inicial_dosagem_personalizada_1 + minuto11;
                hora01 = hora_inicial_dosagem_personalizada_1 + hora11; 
              }
              if(contador > 1)
              {
                minuto01 += minuto11;
                hora01 += hora11;  
              }
              if((quantidade_dose_dosadora_1_personalizada == quantidade_dose_dosadora_2_personalizada) || (quantidade_dose_dosadora_1_personalizada == quantidade_dose_dosadora_3_personalizada))
              {
                if((hora_inicial_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_2) || (hora_inicial_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_3))
                {
                  minuto01 += 10;
                }
              }
              if(minuto01 >= 60)
              {
                minuto01 -= 60;
                hora01 +=1;
              }
              file.open(&root, "HDP1.TXT", O_CREAT | O_APPEND | O_WRITE);

              if(hora01 <10)
              {
                file.print(0);
                file.print(hora01);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }
              else
              {
                file.print(hora01);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }    
            }
            contador = 0;
            file.open(&root, "MDP1.TXT", O_WRITE);
            file.remove(); 
            minuto01 = (((hora_final_dosagem_personalizada_1 * 60) + (minuto_final_dosagem_personalizada_1)) - ((hora_inicial_dosagem_personalizada_1 * 60) + (minuto_inicial_dosagem_personalizada_1)));
            minuto01 /= 1 + quantidade_dose_dosadora_1_personalizada; 

            for(int j = 1; j <= quantidade_dose_dosadora_1_personalizada; j++)
            { 
              contador += 1;   
              if(contador == 1)
              {
                minuto01 = minuto_inicial_dosagem_personalizada_1 + minuto11;
              }
              if(contador > 1)
              {
                minuto01 += minuto11;  
              }  
              if((quantidade_dose_dosadora_1_personalizada == quantidade_dose_dosadora_2_personalizada) || (quantidade_dose_dosadora_1_personalizada == quantidade_dose_dosadora_3_personalizada))
              {
                if((hora_inicial_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_2) || (hora_inicial_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_3))
                {
                  minuto01 += 10;
                }
              }
              if(minuto01 >= 60)
              {
                minuto01 -= 60;
                hora01 += 1;
              }
              file.open(&root, "MDP1.TXT", O_CREAT | O_APPEND | O_WRITE);
              if(minuto01 <10)
              {
                file.print(0);
                file.print(minuto01);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }
              else
              {
                file.print(minuto01);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }    
            }
            contador = 0;
            digitalWrite (4, HIGH);    
          }
          if(temp2hora_final_dosagem_personalizada_1 > hora_inicial_dosagem_personalizada_1)
          {
            Salvar_dosadora_EEPROM();
            dispScreen = 0;
            clearScreen();
            mainScreen(true);
            digitalWrite (4, LOW); 
            file.open(&root, "HDP1.TXT", O_WRITE);
            file.remove();       

            minuto01 = (((hora_final_dosagem_personalizada_1 * 60) + (minuto_final_dosagem_personalizada_1)) - ((hora_inicial_dosagem_personalizada_1 * 60) + (minuto_inicial_dosagem_personalizada_1)));
            minuto01 /= 1 + quantidade_dose_dosadora_1_personalizada; 
            minuto11 = minuto01 % 60; 
            hora11 = minuto01 - minuto11; 
            hora11 /= 60;  
            for(int i = 1; i <= quantidade_dose_dosadora_1_personalizada; i++)
            { 
              contador += 1;  
              if(contador == 1)
              {
                minuto01 = minuto_inicial_dosagem_personalizada_1 + minuto11;
                hora01 = hora_inicial_dosagem_personalizada_1 + hora11; 
              }
              if(contador > 1)
              {
                minuto01 += minuto11;
                hora01 += hora11;  
              }
              if((quantidade_dose_dosadora_1_personalizada == quantidade_dose_dosadora_2_personalizada) || (quantidade_dose_dosadora_1_personalizada == quantidade_dose_dosadora_3_personalizada))
              {
                if((hora_inicial_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_2) || (hora_inicial_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_3))
                {
                  minuto01 += 10;
                }
              }
              if(minuto01 >= 60)
              {
                minuto01 -= 60;
                hora01 +=1;
              }
              file.open(&root, "HDP1.TXT", O_CREAT | O_APPEND | O_WRITE);
              if(hora01 <10)
              {
                file.print(0);
                file.print(hora01);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }
              else
              {
                file.print(hora01);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }    
            }
            contador = 0;
            file.open(&root, "MDP1.TXT", O_WRITE);
            file.remove(); 
            minuto01 = (((hora_final_dosagem_personalizada_1 * 60) + (minuto_final_dosagem_personalizada_1)) - ((hora_inicial_dosagem_personalizada_1 * 60) + (minuto_inicial_dosagem_personalizada_1)));
            minuto01 /= 1 + quantidade_dose_dosadora_1_personalizada; 

            for(int j = 1; j <= quantidade_dose_dosadora_1_personalizada; j++)
            { 
              contador += 1;   
              if(contador == 1)
              {
                minuto01 = minuto_inicial_dosagem_personalizada_1 + minuto11;
              }
              if(contador > 1)
              {
                minuto01 += minuto11;  
              }  
              if((quantidade_dose_dosadora_1_personalizada == quantidade_dose_dosadora_2_personalizada) || (quantidade_dose_dosadora_1_personalizada == quantidade_dose_dosadora_3_personalizada))
              {
                if((hora_inicial_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_2) || (hora_inicial_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_3))
                {
                  minuto01 += 10;
                }
              }
              if(minuto01 >= 60)
              {
                minuto01 -= 60;
                hora01 += 1;
              }
              file.open(&root, "MDP1.TXT", O_CREAT | O_APPEND | O_WRITE);
              if(minuto01 <10)
              {
                file.print(0);
                file.print(minuto01);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }
              else
              {
                file.print(minuto01);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }    
            }
            contador = 0;
            digitalWrite (4, HIGH);    
          }        
        } 
      }      
      if(dosadora_2_selecionada == true)
      {
        if ((x >= minUT[0]) && (x <= minUT[2]) && (y >= minUT[1]) && (y <= minUT[3])) // Dose diaria mais
        {
          waitForIt(minUT[0], minUT[1], minUT[2], minUT[3]);
          dose_dosadora_2_personalizada_temp2 += 0.5;
          if(dose_dosadora_2_personalizada_temp2 > 999.5)
          {
            dose_dosadora_2_personalizada_temp2 = 0.5;
          }
          if(dose_dosadora_2_personalizada_temp2 <= 9.5)
          {
            myGLCD.setColor(0, 0, 0);                      
            myGLCD.fillRect(100, 45, 185, 67);
          }
          config_dosagem_personalizada_2();
        }
        if ((x >= minDT[0]) && (x <= minDT[2]) && (y >= minDT[1]) && (y <= minDT[3])) // Dose diaria menos
        {
          waitForIt(minDT[0], minDT[1], minDT[2], minDT[3]);
          dose_dosadora_2_personalizada_temp2 -= 0.5;
          if(dose_dosadora_2_personalizada_temp2 <0.5)
          {
            dose_dosadora_2_personalizada_temp2 = 999.5;
          }
          if(dose_dosadora_2_personalizada_temp2 <= 9.5)
          {
            myGLCD.setColor(0, 0, 0);                      
            myGLCD.fillRect(100, 45, 185, 67);
          }
          config_dosagem_personalizada_2();
        }
        if ((x >= durC[0]) && (x <= durC[2]) && (y >= durC[1]) && (y <= durC[3])) 
        {
          waitForIt(durC[0], durC[1], durC[2], durC[3]); 
          quantidade_dose_dosadora_2_personalizada_temp2 += 1;
          if(quantidade_dose_dosadora_2_personalizada_temp2 > 24)
          {
            quantidade_dose_dosadora_2_personalizada_temp2 = 1;
          }
          config_dosagem_personalizada_2();
        }

        if ((x >= durB[0]) && (x <= durB[2]) && (y >= durB[1]) && (y <= durB[3])) 
        {
          waitForIt(durB[0], durB[1], durB[2], durB[3]);
          quantidade_dose_dosadora_2_personalizada_temp2 -= 1;
          if(quantidade_dose_dosadora_2_personalizada_temp2 < 1)
          {
            quantidade_dose_dosadora_2_personalizada_temp2 = 24;
          }
          config_dosagem_personalizada_2();        
        }
        if ((x >= sexT[0]) && (x<= sexT[2]) && (y >= sexT [1]) && (y <= sexT[3]))
        {
          waitForIt(sexT[0], sexT[1], sexT[2], sexT[3]);
          if(modo_personalizado_on_2_temp2 == 0)
          {
            modo_personalizado_on_2_temp2 = 1;
            config_dosagem_personalizada_2();
          }
          else
          {
            modo_personalizado_on_2_temp2 = 0;
            config_dosagem_personalizada_2();
          }
        }
        if ((y >= prOK[1]) && (y <= prOK[3]) && (x >= prOK[0]) && (x <= prOK[2])) 
        {
          waitForIt(prOK[0], prOK[1], prOK[2], prOK[3]); //funcao salvar
          dose_dosadora_2_personalizada = dose_dosadora_2_personalizada_temp2;
          quantidade_dose_dosadora_2_personalizada = quantidade_dose_dosadora_2_personalizada_temp2;
          modo_personalizado_on_2 = modo_personalizado_on_2_temp2;
          hora_inicial_dosagem_personalizada_2 = temp2hora_inicial_dosagem_personalizada_2;
          minuto_inicial_dosagem_personalizada_2 = temp2minuto_inicial_dosagem_personalizada_2;
          hora_final_dosagem_personalizada_2 = temp2hora_final_dosagem_personalizada_2;
          minuto_final_dosagem_personalizada_2 = temp2minuto_final_dosagem_personalizada_2;
          segunda_dosagem_personalizada_2 = temp2segunda_dosagem_personalizada_2;
          terca_dosagem_personalizada_2 = temp2terca_dosagem_personalizada_2;
          quarta_dosagem_personalizada_2 = temp2quarta_dosagem_personalizada_2;
          quinta_dosagem_personalizada_2 = temp2quinta_dosagem_personalizada_2;
          sexta_dosagem_personalizada_2 = temp2sexta_dosagem_personalizada_2;
          sabado_dosagem_personalizada_2 = temp2sabado_dosagem_personalizada_2;
          domingo_dosagem_personalizada_2 = temp2domingo_dosagem_personalizada_2;
          if((hora_final_dosagem_personalizada_2 == hora_inicial_dosagem_personalizada_2) && (minuto_final_dosagem_personalizada_2 < (minuto_inicial_dosagem_personalizada_2+10)))
          {
            setFont(SMALL, 255, 0, 0, 0, 0, 0);
            myGLCD.print("O INTERVALO ENTRE A INICIAL E A FINAL", 20, 110);
            myGLCD.print("DEVE SER DE NO MINIMO 10 MINUTOS!", 35, 130);
          }
          if(hora_final_dosagem_personalizada_2 < hora_inicial_dosagem_personalizada_2)
          {
            setFont(SMALL, 255, 0, 0, 0, 0, 0);
            myGLCD.print("A HORA FINAL NAO PODE SER MENOR", 50, 110);
            myGLCD.print("QUE A INICIAL!", 100, 130);
          }
          if((temp2hora_final_dosagem_personalizada_2 == hora_inicial_dosagem_personalizada_2) && (temp2minuto_final_dosagem_personalizada_2 >= (minuto_inicial_dosagem_personalizada_2+10)))
          {
            Salvar_dosadora_EEPROM();
            dispScreen = 0;
            clearScreen();
            mainScreen(true);
            digitalWrite (4, LOW); 
            file.open(&root, "HDP2.TXT", O_WRITE);
            file.remove();       

            minuto02 = (((hora_final_dosagem_personalizada_2 * 60) + (minuto_final_dosagem_personalizada_2)) - ((hora_inicial_dosagem_personalizada_2 * 60) + (minuto_inicial_dosagem_personalizada_2))); //1439
            minuto02 /= 1 + quantidade_dose_dosadora_2_personalizada; //359
            minuto12 = minuto02 % 60; //59
            hora12 = minuto02 - minuto12; //300
            hora12 /= 60;   //5 horas
            for(int i = 1; i <= quantidade_dose_dosadora_2_personalizada; i++)
            { 
              contador += 1;  
              if(contador == 1)
              {
                minuto02 = minuto_inicial_dosagem_personalizada_2 + minuto12;
                hora02 = hora_inicial_dosagem_personalizada_2 + hora12; //0 + 5 = 5 horas
              }
              if(contador > 1)
              {
                minuto02 += minuto12;
                hora02 += hora12;  //12 horas
              }
              if((quantidade_dose_dosadora_1_personalizada == quantidade_dose_dosadora_2_personalizada) || (quantidade_dose_dosadora_1_personalizada == quantidade_dose_dosadora_3_personalizada))
              {
                if((hora_inicial_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_2) || (hora_inicial_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_3))
                {
                  minuto02 += 10;
                }
              }
              if(minuto02 >= 60)
              {
                minuto02 -= 60;
                hora02 +=1;
              }
              file.open(&root, "HDP2.TXT", O_CREAT | O_APPEND | O_WRITE);
              if(hora02 <10)
              {
                file.print(0);
                file.print(hora02);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }
              else
              {
                file.print(hora02);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }     
            }
            contador = 0;
            file.open(&root, "MDP2.TXT", O_WRITE);
            file.remove(); 
            minuto02 = (((hora_final_dosagem_personalizada_2 * 60) + (minuto_final_dosagem_personalizada_2)) - ((hora_inicial_dosagem_personalizada_2 * 60) + (minuto_inicial_dosagem_personalizada_2)));
            minuto02 /= 1 + quantidade_dose_dosadora_2_personalizada; 

            for(int j = 1; j <= quantidade_dose_dosadora_2_personalizada; j++)
            { 
              contador += 1;   
              if(contador == 1)
              {
                minuto02 = minuto_inicial_dosagem_personalizada_2 + minuto12;
              }
              if(contador > 1)
              {
                minuto02 += minuto12;  
              }  
              if((quantidade_dose_dosadora_1_personalizada == quantidade_dose_dosadora_2_personalizada) || (quantidade_dose_dosadora_1_personalizada == quantidade_dose_dosadora_3_personalizada))
              {
                if((hora_inicial_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_2) || (hora_inicial_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_3))
                {
                  minuto02 += 10;
                }
              }
              if(minuto02 >= 60)
              {
                minuto02 -= 60;
                hora02 += 1;
              }
              file.open(&root, "MDP2.TXT", O_CREAT | O_APPEND | O_WRITE);
              if(minuto02 <10)
              {
                file.print(0);
                file.print(minuto02);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }
              else
              {
                file.print(minuto02);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }      
            }
            contador = 0;
            digitalWrite (4, HIGH);    
          }
          if(temp2hora_final_dosagem_personalizada_2 > hora_inicial_dosagem_personalizada_2)
          {
            Salvar_dosadora_EEPROM();
            dispScreen = 0;
            clearScreen();
            mainScreen(true);
            digitalWrite (4, LOW); 
            file.open(&root, "HDP2.TXT", O_WRITE);
            file.remove();       

            minuto02 = (((hora_final_dosagem_personalizada_2 * 60) + (minuto_final_dosagem_personalizada_2)) - ((hora_inicial_dosagem_personalizada_2 * 60) + (minuto_inicial_dosagem_personalizada_2))); //1439
            minuto02 /= 1 + quantidade_dose_dosadora_2_personalizada; //359
            minuto12 = minuto02 % 60; //59
            hora12 = minuto02 - minuto12; //300
            hora12 /= 60;   //5 horas
            for(int i = 1; i <= quantidade_dose_dosadora_2_personalizada; i++)
            { 
              contador += 1;  
              if(contador == 1)
              {
                minuto02 = minuto_inicial_dosagem_personalizada_2 + minuto12;
                hora02 = hora_inicial_dosagem_personalizada_2 + hora12; //0 + 5 = 5 horas
              }
              if(contador > 1)
              {
                minuto02 += minuto12;
                hora02 += hora12;  //12 horas
              }
              if((quantidade_dose_dosadora_1_personalizada == quantidade_dose_dosadora_2_personalizada) || (quantidade_dose_dosadora_1_personalizada == quantidade_dose_dosadora_3_personalizada))
              {
                if((hora_inicial_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_2) || (hora_inicial_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_3))
                {
                  minuto02 += 10;
                }
              }
              if(minuto02 >= 60)
              {
                minuto02 -= 60;
                hora02 += 1;
              }
              file.open(&root, "HDP2.TXT", O_CREAT | O_APPEND | O_WRITE);
              if(hora02 <10)
              {
                file.print(0);
                file.print(hora02);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }
              else
              {
                file.print(hora02);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }    
            }
            contador = 0;
            file.open(&root, "MDP2.TXT", O_WRITE);
            file.remove(); 
            minuto02 = (((hora_final_dosagem_personalizada_2 * 60) + (minuto_final_dosagem_personalizada_2)) - ((hora_inicial_dosagem_personalizada_2 * 60) + (minuto_inicial_dosagem_personalizada_2)));
            minuto02 /= 1 + quantidade_dose_dosadora_2_personalizada; 

            for(int j = 1; j <= quantidade_dose_dosadora_2_personalizada; j++)
            { 
              contador += 1;   
              if(contador == 1)
              {
                minuto02 = minuto_inicial_dosagem_personalizada_2 + minuto12;
              }
              if(contador > 1)
              {
                minuto02 += minuto12;  
              }  
              if((quantidade_dose_dosadora_1_personalizada == quantidade_dose_dosadora_2_personalizada) || (quantidade_dose_dosadora_1_personalizada == quantidade_dose_dosadora_3_personalizada))
              {
                if((hora_inicial_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_2) || (hora_inicial_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_3))
                {
                  minuto02 += 10;
                }
              }
              if(minuto02 >= 60)
              {
                minuto02 -= 60;
                hora02 += 1;
              }
              file.open(&root, "MDP2.TXT", O_CREAT | O_APPEND | O_WRITE);
              if(minuto02 <10)
              {
                file.print(0);
                file.print(minuto02);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }
              else
              {
                file.print(minuto02);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }   
            }
            contador = 0;
            digitalWrite (4, HIGH);    
          }        

        }      
      }
      if(dosadora_3_selecionada == true)
      {
        if ((x >= minUT[0]) && (x <= minUT[2]) && (y >= minUT[1]) && (y <= minUT[3])) // Dose diaria mais
        {
          waitForIt(minUT[0], minUT[1], minUT[2], minUT[3]);
          dose_dosadora_3_personalizada_temp2 += 0.5;
          if(dose_dosadora_3_personalizada_temp2 > 999.5)
          {
            dose_dosadora_3_personalizada_temp2 = 0.5;
          }
          if(dose_dosadora_3_personalizada_temp2 <= 9.5)
          {
            myGLCD.setColor(0, 0, 0);                      
            myGLCD.fillRect(100, 45, 185, 67);
          }
          config_dosagem_personalizada_2();
        }
        if ((x >= minDT[0]) && (x <= minDT[2]) && (y >= minDT[1]) && (y <= minDT[3])) // Dose diaria menos
        {
          waitForIt(minDT[0], minDT[1], minDT[2], minDT[3]);
          dose_dosadora_3_personalizada_temp2 -= 0.5;
          if(dose_dosadora_3_personalizada_temp2 <0.5)
          {
            dose_dosadora_3_personalizada_temp2 = 999.5;
          }
          if(dose_dosadora_3_personalizada_temp2 <= 9.5)
          {
            myGLCD.setColor(0, 0, 0);                      
            myGLCD.fillRect(100, 45, 185, 67);
          }
          config_dosagem_personalizada_2();
        }
        if ((x >= durC[0]) && (x <= durC[2]) && (y >= durC[1]) && (y <= durC[3])) 
        {
          waitForIt(durC[0], durC[1], durC[2], durC[3]); 
          quantidade_dose_dosadora_3_personalizada_temp2 += 1;
          if(quantidade_dose_dosadora_3_personalizada_temp2 > 24)
          {
            quantidade_dose_dosadora_3_personalizada_temp2 = 1;
          }
          config_dosagem_personalizada_2();
        }

        if ((x >= durB[0]) && (x <= durB[2]) && (y >= durB[1]) && (y <= durB[3])) 
        {
          waitForIt(durB[0], durB[1], durB[2], durB[3]);
          quantidade_dose_dosadora_3_personalizada_temp2 -= 1;
          if(quantidade_dose_dosadora_3_personalizada_temp2 < 1)
          {
            quantidade_dose_dosadora_3_personalizada_temp2 = 24;
          }
          config_dosagem_personalizada_2();        
        }
        if ((x >= sexT[0]) && (x<= sexT[2]) && (y >= sexT [1]) && (y <= sexT[3]))
        {
          waitForIt(sexT[0], sexT[1], sexT[2], sexT[3]);
          if(modo_personalizado_on_3_temp2 == 0)
          {
            modo_personalizado_on_3_temp2 = 1;
            config_dosagem_personalizada_2();
          }
          else
          {
            modo_personalizado_on_3_temp2 = 0;
            config_dosagem_personalizada_2();
          }
        }
        if ((y >= prOK[1]) && (y <= prOK[3]) && (x >= prOK[0]) && (x <= prOK[2])) 
        {
          waitForIt(prOK[0], prOK[1], prOK[2], prOK[3]); //funcao salvar
          dose_dosadora_3_personalizada = dose_dosadora_3_personalizada_temp2;
          quantidade_dose_dosadora_3_personalizada = quantidade_dose_dosadora_3_personalizada_temp2;
          modo_personalizado_on_3 = modo_personalizado_on_3_temp2;
          hora_inicial_dosagem_personalizada_3 = temp2hora_inicial_dosagem_personalizada_3;
          minuto_inicial_dosagem_personalizada_3 = temp2minuto_inicial_dosagem_personalizada_3;
          hora_final_dosagem_personalizada_3 = temp2hora_final_dosagem_personalizada_3;
          minuto_final_dosagem_personalizada_3 = temp2minuto_final_dosagem_personalizada_3;
          segunda_dosagem_personalizada_3 = temp2segunda_dosagem_personalizada_3;
          terca_dosagem_personalizada_3 = temp2terca_dosagem_personalizada_3;
          quarta_dosagem_personalizada_3 = temp2quarta_dosagem_personalizada_3;
          quinta_dosagem_personalizada_3 = temp2quinta_dosagem_personalizada_3;
          sexta_dosagem_personalizada_3 = temp2sexta_dosagem_personalizada_3;
          sabado_dosagem_personalizada_3 = temp2sabado_dosagem_personalizada_3;
          domingo_dosagem_personalizada_3 = temp2domingo_dosagem_personalizada_3;
          if((hora_final_dosagem_personalizada_3 == hora_inicial_dosagem_personalizada_3) && (minuto_final_dosagem_personalizada_3 < (minuto_inicial_dosagem_personalizada_3+10)))
          {
            setFont(SMALL, 255, 0, 0, 0, 0, 0);
            myGLCD.print("O INTERVALO ENTRE A INICIAL E A FINAL", 20, 110);
            myGLCD.print("DEVE SER DE NO MINIMO 10 MINUTOS!", 35, 130);
          }
          if(hora_final_dosagem_personalizada_3 < hora_inicial_dosagem_personalizada_3)
          {
            setFont(SMALL, 255, 0, 0, 0, 0, 0);
            myGLCD.print("A HORA FINAL NAO PODE SER MENOR", 50, 110);
            myGLCD.print("QUE A INICIAL!", 100, 130);
          }
          if((temp2hora_final_dosagem_personalizada_3 == hora_inicial_dosagem_personalizada_3) && (temp2minuto_final_dosagem_personalizada_3 >= (minuto_inicial_dosagem_personalizada_3+10)))
          {
            Salvar_dosadora_EEPROM();
            dispScreen = 0;
            clearScreen();
            mainScreen(true);
            digitalWrite (4, LOW); 
            file.open(&root, "HDP3.TXT", O_WRITE);
            file.remove();       

            minuto03 = (((hora_final_dosagem_personalizada_3 * 60) + (minuto_final_dosagem_personalizada_3)) - ((hora_inicial_dosagem_personalizada_3 * 60) + (minuto_inicial_dosagem_personalizada_3))); //1439
            minuto03 /= 1 + quantidade_dose_dosadora_3_personalizada; //359
            minuto13 = minuto03 % 60; //59
            hora13 = minuto03 - minuto13; //300
            hora13 /= 60;   //5 horas
            for(int i = 1; i <= quantidade_dose_dosadora_3_personalizada; i++)
            { 
              contador += 1;  
              if(contador == 1)
              {
                minuto03 = minuto_inicial_dosagem_personalizada_3 + minuto13;
                hora03 = hora_inicial_dosagem_personalizada_3 + hora13; //0 + 5 = 5 horas
              }
              if(contador > 1)
              {
                minuto03 += minuto13;
                hora03 += hora13;  //13 horas
              }
              if((quantidade_dose_dosadora_1_personalizada == quantidade_dose_dosadora_2_personalizada) || (quantidade_dose_dosadora_1_personalizada == quantidade_dose_dosadora_3_personalizada))
              {
                if((hora_inicial_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_2) || (hora_inicial_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_3))
                {
                  minuto03 += 10;
                }
              }
              if(minuto03 >= 60)
              {
                minuto03 -= 60;
                hora03 +=1;
              }
              file.open(&root, "HDP3.TXT", O_CREAT | O_APPEND | O_WRITE);
              if(hora02 <10)
              {
                file.print(0);
                file.print(hora03);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }
              else
              {
                file.print(hora03);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }    
            }
            contador = 0;
            file.open(&root, "MDP3.TXT", O_WRITE);
            file.remove(); 
            minuto03 = (((hora_final_dosagem_personalizada_3 * 60) + (minuto_final_dosagem_personalizada_3)) - ((hora_inicial_dosagem_personalizada_3 * 60) + (minuto_inicial_dosagem_personalizada_3)));
            minuto03 /= 1 + quantidade_dose_dosadora_3_personalizada; 

            for(int j = 1; j <= quantidade_dose_dosadora_3_personalizada; j++)
            { 
              contador += 1;   
              if(contador == 1)
              {
                minuto03 = minuto_inicial_dosagem_personalizada_3 + minuto13;
              }
              if(contador > 1)
              {
                minuto03 += minuto13;  
              }  
              if((quantidade_dose_dosadora_1_personalizada == quantidade_dose_dosadora_2_personalizada) || (quantidade_dose_dosadora_1_personalizada == quantidade_dose_dosadora_3_personalizada))
              {
                if((hora_inicial_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_2) || (hora_inicial_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_3))
                {
                  minuto03 += 10;
                }
              }
              if(minuto03 >= 60)
              {
                minuto03 -= 60;
                hora03 += 1;
              }
              file.open(&root, "MDP3.TXT", O_CREAT | O_APPEND | O_WRITE);
              if(minuto03 <10)
              {
                file.print(0);
                file.print(minuto03);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }
              else
              {
                file.print(minuto03);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }   
            }
            contador = 0;
            digitalWrite (4, HIGH);    
          }
          if(temp2hora_final_dosagem_personalizada_3 > hora_inicial_dosagem_personalizada_3)
          {
            Salvar_dosadora_EEPROM();
            dispScreen = 0;
            clearScreen();
            mainScreen(true);
            digitalWrite (4, LOW); 
            file.open(&root, "HDP3.TXT", O_WRITE);
            file.remove();       

            minuto03 = (((hora_final_dosagem_personalizada_3 * 60) + (minuto_final_dosagem_personalizada_3)) - ((hora_inicial_dosagem_personalizada_3 * 60) + (minuto_inicial_dosagem_personalizada_3))); //1439
            minuto03 /= 1 + quantidade_dose_dosadora_3_personalizada; //359
            minuto13 = minuto03 % 60; //59
            hora13 = minuto03 - minuto13; //300
            hora13 /= 60;   //5 horas
            for(int i = 1; i <= quantidade_dose_dosadora_3_personalizada; i++)
            { 
              contador += 1;  
              if(contador == 1)
              {
                minuto03 = minuto_inicial_dosagem_personalizada_3 + minuto13;
                hora03 = hora_inicial_dosagem_personalizada_3 + hora13; //0 + 5 = 5 horas
              }
              if(contador > 1)
              {
                minuto03 += minuto13;
                hora03 += hora13;  //13 horas
              }
              if((quantidade_dose_dosadora_1_personalizada == quantidade_dose_dosadora_2_personalizada) || (quantidade_dose_dosadora_1_personalizada == quantidade_dose_dosadora_3_personalizada))
              {
                if((hora_inicial_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_2) || (hora_inicial_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_3))
                {
                  minuto03 += 10;
                }
              }
              if(minuto03 >= 60)
              {
                minuto03 -= 60;
                hora03 += 1;
              }
              file.open(&root, "HDP3.TXT", O_CREAT | O_APPEND | O_WRITE);
              if(hora03 <10)
              {
                file.print(0);
                file.print(hora03);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }
              else
              {
                file.print(hora03);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }    
            }
            contador = 0;
            file.open(&root, "MDP3.TXT", O_WRITE);
            file.remove(); 
            minuto03 = (((hora_final_dosagem_personalizada_3 * 60) + (minuto_final_dosagem_personalizada_3)) - ((hora_inicial_dosagem_personalizada_3 * 60) + (minuto_inicial_dosagem_personalizada_3)));
            minuto03 /= 1 + quantidade_dose_dosadora_3_personalizada; 

            for(int j = 1; j <= quantidade_dose_dosadora_3_personalizada; j++)
            { 
              contador += 1;   
              if(contador == 1)
              {
                minuto03 = minuto_inicial_dosagem_personalizada_3 + minuto13;
              }
              if(contador > 1)
              {
                minuto03 += minuto13;  
              }  
              if((quantidade_dose_dosadora_1_personalizada == quantidade_dose_dosadora_2_personalizada) || (quantidade_dose_dosadora_1_personalizada == quantidade_dose_dosadora_3_personalizada))
              {
                if((hora_inicial_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_2) || (hora_inicial_dosagem_personalizada_1 == hora_inicial_dosagem_personalizada_3))
                {
                  minuto03 += 10;
                }
              }
              if(minuto03 >= 60)
              {
                minuto03 -= 60;
                hora03 += 1;
              }
              file.open(&root, "MDP3.TXT", O_CREAT | O_APPEND | O_WRITE);
              if(minuto03 <10)
              {
                file.print(0);
                file.print(minuto03);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }
              else
              {
                file.print(minuto03);
                file.write((uint8_t*)"\0", 1);
                writeCRLF(file);
                file.close(); 
              }    
            }
            contador = 0;
            digitalWrite (4, HIGH);    
          }        

        }
      }      
      break;
    }
  }
}

//---------------------------LED levels---------------------------
void LED_levels_output()
{
  int sector, sstep, t1, t2 ;
  int b_out, w_out;

  if (min_cnt>=1440) {
    min_cnt=1;
  }   // 24 hours of minutes 
  sector = min_cnt/15;              // divided by gives sector -- 15 minute
  sstep = min_cnt%15;               // remainder gives add on to sector value 

  t1 =sector;
  if (t1==95) {
    t2=0;
  }
  else {
    t2 = t1+1;
  }

  if (sstep==0) {
    bled_out = bled[t1];
    wled_out = wled[t1];
  } 
  else {
    bled_out = check(&bled[t1], &bled[t2], sstep);
    wled_out = check(&wled[t1], &wled[t2], sstep);
  }

  if (BUCKPUCK) {
    b_out = bled_out;
    w_out = wled_out;
  } 
  else {
    b_out = bled_out;
    w_out = wled_out;
  }

  analogWrite(ledPinBlue, b_out);
  analogWrite(ledPinWhite, w_out);
}

int check( byte *pt1, byte *pt2, int lstep)
{
  int result;
  float fresult;

  if (*pt1==*pt2) {
    result = *pt1;
  }   // No change
  else if (*pt1<*pt2)                //Increasing brightness
  { 
    fresult = ((float(*pt2-*pt1)/15.0) * float(lstep))+float(*pt1);
    result = int(fresult);
  }
  //Decreasing brightness
  else {
    fresult = -((float(*pt1-*pt2)/15.0) * float(lstep))+float(*pt1);
    result = int(fresult);                     
  } 
  return result;
}

//------------------------setup------------------------------
void setup()
{
  Serial.begin(38400);
  Serial3.begin(38400);
  pinMode(ledPinBlue, OUTPUT);
  pinMode(ledPinWhite, OUTPUT);
  pinMode(aquecedorPin, OUTPUT);
  pinMode(chillerPin, OUTPUT);
  pinMode(alarmPin, OUTPUT);
  pinMode(fanPin, OUTPUT);
  pinMode(bomba1Pin, OUTPUT);
  pinMode(bomba2Pin, OUTPUT);
  pinMode(bomba3Pin, OUTPUT);
  pinMode(reatorPin, OUTPUT);
  pinMode(ozonizadorPin, OUTPUT);
  pinMode(solenoide1Pin, OUTPUT);
  pinMode(multiplexadorS0Pin, OUTPUT);
  pinMode(multiplexadorS1Pin, OUTPUT);
  pinMode (4, OUTPUT);  //sd card
  digitalWrite (4, HIGH);
  pinMode (dosadora1, OUTPUT);
  pinMode (dosadora2, OUTPUT);
  pinMode (dosadora3, OUTPUT);

  myGLCD.InitLCD(LANDSCAPE);
  myGLCD.clrScr();

  myTouch.InitTouch(LANDSCAPE);
  myTouch.setPrecision(PREC_MEDIUM);

  sensors.begin();     //start up temperature library
  // set the resolution to 10 bit
  sensors.setResolution(sensor_agua, 10);
  sensors.setResolution(sensor_dissipador, 10);
  if (ether.begin(sizeof Ethernet::buffer, mymac) == 0) 
  {
    Serial.println( "Failed to access Ethernet controller");
  }
  ether.staticSetup(myip,gwip);

  // Set the clock to run-mode
  rtc.halt(false);
  min_cnt= (t.hour*60)+t.min;
  ReadFromEEPROM();
  lertpaEEPROM();
  lerPHAEEPROM();
  lerPHREEPROM();
  lerORPEEPROM();
  lerDENEEPROM();
  ler_dosadora_EEPROM();
  LED_levels_output();
  mainScreen(true); 
  card.init(SPI_QUARTER_SPEED,chipselect);
  volume.init(&card);
  root.openRoot(&volume);

}
//-----------------------main loop------------------------------
void loop()
{
  int valor1=0;
  int valor2=0;
  int valor3=0;
  int valor4=0;
  int valor5=0;
  int valor6=0;
/*
  valor1 = analogRead(sensor1);
  valor2 = analogRead(sensor2);
  valor3 = analogRead(sensor3);
  valor4 = analogRead(sensor4);
  valor5 = analogRead(sensor5);
  valor6 = analogRead(sensor6);*/

  unsigned long currentMillis = millis();
  unsigned long logtempminutoagora = millis();

  ether.packetLoop(ether.packetReceive());

  if (myTouch.dataAvailable())  
  { 
    processMyTouch(); 
  }

  if (currentMillis - previousMillis > 10000)    //check time, temp and LED levels every 10s
  {
    previousMillis = currentMillis;  
    t = rtc.getTime();
    checkTempC();
    min_cnt= (t.hour*60)+t.hour;
    LED_levels_output();
    reposicao_agua_doce ();
    check_nivel();
    check_PH_reator();
    check_PH_aquario();
    check_densidade();
    check_ORP();
    check_alarme();

    if (dispScreen == 0)
    {
      mainScreen();    
    }

    /*    Serial.println("Dia da semana");  
     Serial.println(rtc.getDOWStr()); 
     
     Serial.println("Horario");
     Serial.println(rtc.getTimeStr(FORMAT_LONG));
     
     Serial.println ("Memoria livre:");
     Serial.println (FreeRam());
     
     Serial.println("Sensor 1:");    
     Serial.println(valor1);
     
     Serial.println("Sensor 2:");
     Serial.println(valor2);
     
     Serial.println("Sensor 3:");
     Serial.println(valor3);
     
     Serial.println("Sensor 4:");
     Serial.println(valor4);
     
     Serial.println("Sensor 5:");    
     Serial.println(valor5);      
     
     Serial.println("Sensor 6:");
     Serial.println(valor6);
     
     Serial.println("marcadoriniciotpa:");
     Serial.println(marcadoriniciotpa);
     
     Serial.println("shiftedmillis:");
     Serial.println(shiftedmillis);
     
     Serial.println("Tempo:");
     Serial.println(tempo);
     
     if (digitalRead(bomba1Pin)==HIGH)
     {
     Serial.println("Bomba1: ligada");
     }
     else
     {
     Serial.println("Bomba1: desligada");
     }
     if (digitalRead(bomba2Pin)==HIGH)
     {
     Serial.println("Bomba2: ligada");
     }
     else
     {
     Serial.println("Bomba2: desligada");
     }
     if (digitalRead(bomba3Pin)==HIGH)
     {
     Serial.println("Bomba3: ligada");
     }
     else
     {
     Serial.println("Bomba3: desligada");
     }*/
  }
  check_dosagem_automatica_1();
  checktpa();
  check_status();
  logtempgraf();
  check_dosagem_automatica_2();
  logphagraf();
  logphrgraf();
  logdengraf();
  check_dosagem_automatica_3();
  logorpgraf();
  check_parametros();
  cosm ();


  if (logtempminutoagora - logtempminutoantes > 900000ul) //Grava parametros a cada 15 minutos no cartao SD.
  {
    logtempminutoantes=logtempminutoagora;
    logparametros();
  }

} //-------------------end of main loop
